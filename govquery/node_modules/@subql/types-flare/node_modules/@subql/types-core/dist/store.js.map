{"version":3,"file":"store.js","sourceRoot":"","sources":["../src/store.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\ntype SingleOperators = '=' | '!=';\ntype ArrayOperators = 'in' | '!in';\nexport type FieldOperators = SingleOperators | ArrayOperators;\n\nexport type FieldsExpression<T> =\n  | [field: keyof T, operator: SingleOperators, value: T[keyof T]]\n  | [field: keyof T, operator: ArrayOperators, value: Array<T[keyof T]>];\n\nexport interface Entity {\n  id: string;\n  _name?: string;\n  save?: () => Promise<void>;\n}\n\nexport type GetOptions<T> = {\n  offset?: number;\n  limit?: number;\n  orderBy?: keyof T;\n  orderDirection?: 'ASC' | 'DESC';\n};\n\nexport interface Store {\n  get(entity: string, id: string): Promise<Entity | undefined>;\n  /**\n   * Gets entities matching the specified filters and options.\n   *\n   * ⚠️ This function will first search cache data followed by DB data. Please consider this when using order and offset options.⚠️\n   * */\n  getByFields<T extends Entity>(entity: string, filter: FieldsExpression<T>[], options?: GetOptions<T>): Promise<T[]>;\n  /**\n   * This is an alias for getByFields with a single filter\n   * */\n  getByField(entity: string, field: string, value: any, options?: GetOptions<Entity>): Promise<Entity[]>;\n  /**\n   * This is an alias for getByField with limit set to 1\n   * */\n  getOneByField(entity: string, field: string, value: any): Promise<Entity | undefined>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  //if fields in provided, only specify fields will be updated\n  bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n  bulkRemove(entity: string, ids: string[]): Promise<void>;\n}\n"]}