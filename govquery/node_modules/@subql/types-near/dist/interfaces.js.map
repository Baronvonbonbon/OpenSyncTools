{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAmItB,QAAA,UAAU,GAAG;IACxB,aAAa,EAAE,eAAwB;IACvC,cAAc,EAAE,gBAAyB;IACzC,YAAY,EAAE,cAAuB;IACrC,QAAQ,EAAE,UAAmB;IAC7B,KAAK,EAAE,OAAgB;IACvB,MAAM,EAAE,QAAiB;IACzB,SAAS,EAAE,WAAoB;IAC/B,aAAa,EAAE,eAAwB;IACvC,cAAc,EAAE,UAAmB;CAC3B,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport type {Chunk, BlockHeader} from '@near-js/types';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface IArgs extends String {\n  toJson<T = any>(): T;\n}\n\nexport interface NearBlock {\n  author: string;\n  header: BlockHeader;\n  chunks: Chunk[];\n  transactions: NearTransaction[];\n  actions: NearAction[];\n  receipts: NearTransactionReceipt[];\n}\n\nexport interface NearTransaction {\n  nonce: bigint;\n  signer_id: string;\n  public_key: string;\n  receiver_id: string;\n  actions: NearAction[];\n  block_hash: string;\n  block_height: number;\n  gas_price: string;\n  gas_used: string;\n  timestamp: number;\n  result: TransactionResult;\n}\n\nexport interface TransactionResult {\n  id: string;\n  logs: string[];\n  receipt_ids: string[];\n}\n\nexport interface NearTransactionReceipt {\n  id: number;\n  block_height: number;\n  receipt_id: string;\n  predecessor_id: string;\n  Action?: {\n    actions: NearAction[];\n    gas_price: bigint;\n    input_data_ids: string[];\n    output_data_receivers: {\n      data_id: string;\n      receiver_id: string;\n    }[];\n    signer_id: string;\n    signer_public_key: string;\n  };\n  Data?: {\n    data: string;\n    data_id: string;\n  };\n  receiver_id: string;\n}\n\n//eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface CreateAccount {}\n\nexport interface DeployContract {\n  code: Uint8Array;\n}\n\nexport interface FunctionCall {\n  method_name: string;\n  args: IArgs;\n  gas: bigint;\n  deposit: bigint;\n}\n\nexport interface Transfer {\n  deposit: bigint;\n}\n\nexport interface Stake {\n  stake: bigint;\n  public_key: string;\n}\n\nexport interface AddKey {\n  public_key: string;\n  access_key: {nonce: bigint; permission: string};\n}\n\nexport interface DeleteKey {\n  public_key: string;\n}\n\nexport interface DeleteAccount {\n  beneficiary_id: string;\n}\n\nexport interface SignedDelegate {\n  delegate_action: DelegateAction;\n  signature: string;\n}\n\nexport type NonDelegateAction = Record<Exclude<ActionType, 'SignedDelegate'>, Exclude<Action, SignedDelegate>>;\n\nexport interface DelegateAction {\n  /// Signer of the delegated actions\n  sender_id: string;\n  /// Receiver of the delegated actions.\n  receiver_id: string;\n  /// List of actions to be executed.\n  actions: NonDelegateAction[];\n  /// Nonce to ensure that the same delegate action is not sent twice by a relayer and should match for given account's `public_key`.\n  /// After this action is processed it will increment.\n  nonce: bigint;\n  /// The maximal height of the block in the blockchain below which the given DelegateAction is valid.\n  max_block_height: number;\n  /// Public key that is used to sign this delegated action.\n  public_key: string;\n}\n\nexport type Action =\n  | CreateAccount\n  | DeployContract\n  | FunctionCall\n  | Transfer\n  | Stake\n  | AddKey\n  | DeleteKey\n  | DeleteAccount\n  | SignedDelegate;\n\nexport const ActionType = {\n  CreateAccount: 'CreateAccount' as const,\n  DeployContract: 'DeployContract' as const,\n  FunctionCall: 'FunctionCall' as const,\n  Transfer: 'Transfer' as const,\n  Stake: 'Stake' as const,\n  AddKey: 'AddKey' as const,\n  DeleteKey: 'DeleteKey' as const,\n  DeleteAccount: 'DeleteAccount' as const,\n  SignedDelegate: 'Delegate' as const,\n} as const;\n\nexport type ActionType = (typeof ActionType)[keyof typeof ActionType];\n\nexport interface NearAction<T = Action | any> {\n  id: number;\n  type: ActionType;\n  action: T;\n  transaction?: NearTransaction;\n  receipt?: NearTransactionReceipt;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n"]}