{"version":3,"file":"project.js","sourceRoot":"","sources":["../src/project.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAwBnC;;;GAGG;AACH,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,8CAAwB,CAAA;AAC1B,CAAC,EALW,kBAAkB,kCAAlB,kBAAkB,QAK7B;AAED;;;GAGG;AACH,IAAY,eAiBX;AAjBD,WAAY,eAAe;IACzB;;OAEG;IACH,8CAA2B,CAAA;IAC3B;;OAEG;IACH,0DAAuC,CAAA;IACvC;;OAEG;IACH,gDAA6B,CAAA;IAC7B;;OAEG;IACH,kDAA+B,CAAA;AACjC,CAAC,EAjBW,eAAe,+BAAf,eAAe,QAiB1B","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {JsonRpcProvider} from '@near-js/providers';\nimport {\n  BaseTemplateDataSource,\n  IProjectNetworkConfig,\n  CommonSubqueryProject,\n  FileReference,\n  ProjectManifestV1_0_0,\n  BlockFilter,\n  BaseDataSource,\n  BaseCustomDataSource,\n  BaseHandler,\n  SecondLayerHandlerProcessor_0_0_0,\n  SecondLayerHandlerProcessor_1_0_0,\n  DsProcessor,\n} from '@subql/types-core';\nimport {NearBlock, NearTransaction, NearAction, NearTransactionReceipt, ActionType} from './interfaces';\n\nexport type RuntimeDatasourceTemplate = BaseTemplateDataSource<NearRuntimeDatasource>;\nexport type CustomDatasourceTemplate = BaseTemplateDataSource<NearCustomDatasource>;\n\nexport type NearProjectManifestV1_0_0 = ProjectManifestV1_0_0<NearRuntimeDatasource | NearCustomDatasource>;\n\n/**\n * Kind of Near datasource.\n * @enum {string}\n */\nexport enum NearDatasourceKind {\n  /**\n   * The runtime kind of Near datasource.\n   */\n  Runtime = 'near/Runtime',\n}\n\n/**\n * Enum representing the kind of Near handler.\n * @enum {string}\n */\nexport enum NearHandlerKind {\n  /**\n   * Handler for Near blocks.\n   */\n  Block = 'near/BlockHandler',\n  /**\n   * Handler for Near transactions.\n   */\n  Transaction = 'near/TransactionHandler',\n  /**\n   * Handler for Near actions.\n   */\n  Action = 'near/ActionHandler',\n  /**\n   * Handler for Near transactions receipts.\n   */\n  Receipt = 'near/ReceiptHandler',\n}\n\nexport type RuntimeHandlerInputMap = {\n  [NearHandlerKind.Block]: NearBlock;\n  [NearHandlerKind.Transaction]: NearTransaction;\n  [NearHandlerKind.Action]: NearAction;\n  [NearHandlerKind.Receipt]: NearTransactionReceipt;\n};\n\nexport type RuntimeHandlerFilterMap = {\n  [NearHandlerKind.Block]: NearBlockFilter;\n  [NearHandlerKind.Transaction]: NearTransactionFilter;\n  [NearHandlerKind.Action]: NearActionFilter;\n  [NearHandlerKind.Receipt]: NearReceiptFilter;\n};\n\n/**\n * Represents a filter for Near blocks.\n */\nexport type NearBlockFilter = BlockFilter;\n\nexport interface NearTransactionFilter {\n  /**\n   * The address of the transaction sender\n   * @example\n   * sender: 'sweat_welcome.near',\n   * */\n  sender?: string;\n  /**\n   * The address of the transaction receiver\n   * @example\n   * receiver: 'token.sweat',\n   * */\n  receiver?: string;\n}\n\n/**\n * Represents a filter for Near receipts, extending NearTransactionFilter.\n * @interface\n * @extends {NearTransactionFilter}\n */\nexport interface NearReceiptFilter extends NearTransactionFilter {\n  /**\n   * The signer of the transaction\n   * */\n  signer?: string;\n}\n\nexport interface NearActionFilter extends NearReceiptFilter {\n  /**\n   * The type of the action\n   * @example\n   * type: 'FunctionCall',\n   * */\n  type: ActionType;\n\n  //FunctionCall\n  /**\n   * The method name. Only applicable with type: 'FunctionCall'\n   * @example\n   * methodName: 'storage_deposit',\n   * */\n  methodName?: string;\n  /**\n   *  The arguments for the method. Only applicable with type: 'FunctionCall'\n   */\n  args?: string;\n\n  // Stake, AddKey, DeleteKey\n  /**\n   * The public key of the action. Only applicable with types 'Stake', 'AddKey' and 'DeleteKey'\n   * */\n  publicKey?: string;\n\n  // AddKey\n  /**\n   * The access key. Only applicable with type: 'AddKey'\n   * */\n  accessKey?: string;\n\n  // DeleteAccount\n  /**\n   * The beneficiary of a DeleteAccount type action.\n   * */\n  beneficiaryId?: string;\n}\n\n/**\n * Represents a handler for Near blocks.\n * @type {NearCustomHandler<NearHandlerKind.Block, NearBlockFilter>}\n */\nexport type NearBlockHandler = NearCustomHandler<NearHandlerKind.Block, NearBlockFilter>;\n/**\n * Represents a handler for Near transactions.\n * @type {NearCustomHandler<NearHandlerKind.Transaction, NearTransactionFilter>}\n */\nexport type NearTransactionHandler = NearCustomHandler<NearHandlerKind.Transaction, NearTransactionFilter>;\n/**\n * Represents a handler for Near actions.\n * @type {NearCustomHandler<NearHandlerKind.Action, NearActionFilter>}\n */\nexport type NearActionHandler = NearCustomHandler<NearHandlerKind.Action, NearActionFilter>;\n/**\n * Represents a handler for Near transaction receipts.\n * @type {NearCustomHandler<NearHandlerKind.Receipt, NearTransactionFilter>}\n */\nexport type NearReceiptHandler = NearCustomHandler<NearHandlerKind.Receipt, NearTransactionFilter>;\n\n/**\n * Represents a generic custom handler for Near.\n * @interface\n * @template K - The kind of the handler (default: string).\n * @template F - The filter type for the handler (default: Record<string, unknown>).\n */\nexport interface NearCustomHandler<K extends string = string, F = Record<string, unknown>> extends BaseHandler<F, K> {\n  /**\n   * The kind of handler. For `near/Runtime` datasources this is either `Block`, `Transaction`, `Action` or `Receipt` kinds.\n   * The value of this will determine the filter options as well as the data provided to your handler function\n   * @type {NearHandlerKind.Block | NearHandlerKind.Transaction | NearHandlerKind.Action | NearHandlerKind.Receipt | string }\n   * @example\n   * kind: NearHandlerKind.Block // Defined with an enum, this is used for runtime datasources\n   */\n  kind: K;\n  filter?: F;\n}\n\n/**\n * Represents a runtime handler for Near, which can be a block handler, transaction handler, action handler, or receipt handler.\n * @type {NearBlockHandler | NearTransactionHandler | NearActionHandler | NearReceiptHandler}\n */\nexport type NearRuntimeHandler = NearBlockHandler | NearTransactionHandler | NearActionHandler | NearReceiptHandler;\n/**\n * Represents a handler for Near, which can be a runtime handler or a custom handler with unknown filter type.\n * @type {NearRuntimeHandler | NearCustomHandler<string, unknown>}\n */\nexport type NearHandler = NearRuntimeHandler | NearCustomHandler<string, unknown>;\n/**\n * Represents a filter for Near runtime handlers, which can be a block filter, transaction filter, action filter, or event filter.\n * @type {NearBlockFilter | NearTransactionFilter | NearActionFilter | NearReceiptFilter}\n */\nexport type NearRuntimeHandlerFilter = NearBlockFilter | NearTransactionFilter | NearActionFilter | NearReceiptFilter;\n\n/**\n * Represents a mapping for Near handlers, extending FileReference.\n * @interface\n * @extends {FileReference}\n */\nexport interface NearMapping<T extends NearHandler = NearHandler> extends FileReference {\n  handlers: T[];\n}\n\n/**\n * Represents a Near datasource interface with generic parameters.\n * @interface\n * @template M - The mapping type for the datasource.\n */\ntype INearDatasource<M extends NearMapping> = BaseDataSource<NearHandler, M>;\n\n/**\n * Represents a runtime datasource for Near.\n * @interface\n * @template M - The mapping type for the datasource (default: NearMapping<NearRuntimeHandler>).\n */\nexport interface NearRuntimeDatasource<M extends NearMapping<NearRuntimeHandler> = NearMapping<NearRuntimeHandler>>\n  extends INearDatasource<M> {\n  /**\n   * The kind of the datasource, which is `near/Runtime`.\n   * @type {NearDatasourceKind.Runtime}\n   */\n  kind: NearDatasourceKind.Runtime;\n}\n\n/**\n * Represents a Near datasource, which can be either runtime or custom.\n * @type {NearDatasource}\n */\nexport type NearDatasource = NearRuntimeDatasource | NearCustomDatasource; // | NearBuiltinDataSource;\n\nexport type CustomDataSourceAsset = FileReference;\n\n/**\n * Represents a custom datasource for Near.\n * @interface\n * @template K - The kind of the datasource (default: string).\n * @template M - The mapping type for the datasource (default: NearMapping<NearCustomHandler>).\n */\nexport interface NearCustomDatasource<K extends string = string, M extends NearMapping = NearMapping<NearCustomHandler>>\n  extends BaseCustomDataSource<NearHandler, M> {\n  /**\n   * The kind of the custom datasource. This should follow the pattern `near/*`.\n   * @type {K}\n   */\n  kind: K;\n}\n\nexport type SecondLayerHandlerProcessorArray<\n  K extends string,\n  F extends Record<string, unknown>,\n  T,\n  DS extends NearCustomDatasource<K> = NearCustomDatasource<K>\n> =\n  | SecondLayerHandlerProcessor<NearHandlerKind.Block, F, T, DS>\n  | SecondLayerHandlerProcessor<NearHandlerKind.Transaction, F, T, DS>\n  | SecondLayerHandlerProcessor<NearHandlerKind.Action, F, T, DS>\n  | SecondLayerHandlerProcessor<NearHandlerKind.Receipt, F, T, DS>;\n\nexport type NearDatasourceProcessor<\n  K extends string,\n  F extends Record<string, unknown>,\n  DS extends NearCustomDatasource<K> = NearCustomDatasource<K>,\n  P extends Record<string, SecondLayerHandlerProcessorArray<K, F, any, DS>> = Record<\n    string,\n    SecondLayerHandlerProcessorArray<K, F, any, DS>\n  >\n> = DsProcessor<DS, P, JsonRpcProvider>;\n\nexport type SecondLayerHandlerProcessor<\n  K extends NearHandlerKind,\n  F extends Record<string, unknown>,\n  E,\n  DS extends NearCustomDatasource = NearCustomDatasource\n> =\n  | SecondLayerHandlerProcessor_0_0_0<K, RuntimeHandlerInputMap, RuntimeHandlerFilterMap, F, E, DS, JsonRpcProvider>\n  | SecondLayerHandlerProcessor_1_0_0<K, RuntimeHandlerInputMap, RuntimeHandlerFilterMap, F, E, DS, JsonRpcProvider>;\n\nexport type NearProject<DS extends NearDatasource = NearRuntimeDatasource> = CommonSubqueryProject<\n  IProjectNetworkConfig,\n  NearRuntimeDatasource | DS,\n  BaseTemplateDataSource<NearRuntimeDatasource> | BaseTemplateDataSource<DS>\n>;\n"]}