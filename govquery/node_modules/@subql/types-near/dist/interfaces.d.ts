import type { Chunk, BlockHeader } from '@near-js/types';
export interface IArgs extends String {
    toJson<T = any>(): T;
}
export interface NearBlock {
    author: string;
    header: BlockHeader;
    chunks: Chunk[];
    transactions: NearTransaction[];
    actions: NearAction[];
    receipts: NearTransactionReceipt[];
}
export interface NearTransaction {
    nonce: bigint;
    signer_id: string;
    public_key: string;
    receiver_id: string;
    actions: NearAction[];
    block_hash: string;
    block_height: number;
    gas_price: string;
    gas_used: string;
    timestamp: number;
    result: TransactionResult;
}
export interface TransactionResult {
    id: string;
    logs: string[];
    receipt_ids: string[];
}
export interface NearTransactionReceipt {
    id: number;
    block_height: number;
    receipt_id: string;
    predecessor_id: string;
    Action?: {
        actions: NearAction[];
        gas_price: bigint;
        input_data_ids: string[];
        output_data_receivers: {
            data_id: string;
            receiver_id: string;
        }[];
        signer_id: string;
        signer_public_key: string;
    };
    Data?: {
        data: string;
        data_id: string;
    };
    receiver_id: string;
}
export interface CreateAccount {
}
export interface DeployContract {
    code: Uint8Array;
}
export interface FunctionCall {
    method_name: string;
    args: IArgs;
    gas: bigint;
    deposit: bigint;
}
export interface Transfer {
    deposit: bigint;
}
export interface Stake {
    stake: bigint;
    public_key: string;
}
export interface AddKey {
    public_key: string;
    access_key: {
        nonce: bigint;
        permission: string;
    };
}
export interface DeleteKey {
    public_key: string;
}
export interface DeleteAccount {
    beneficiary_id: string;
}
export interface SignedDelegate {
    delegate_action: DelegateAction;
    signature: string;
}
export type NonDelegateAction = Record<Exclude<ActionType, 'SignedDelegate'>, Exclude<Action, SignedDelegate>>;
export interface DelegateAction {
    sender_id: string;
    receiver_id: string;
    actions: NonDelegateAction[];
    nonce: bigint;
    max_block_height: number;
    public_key: string;
}
export type Action = CreateAccount | DeployContract | FunctionCall | Transfer | Stake | AddKey | DeleteKey | DeleteAccount | SignedDelegate;
export declare const ActionType: {
    readonly CreateAccount: "CreateAccount";
    readonly DeployContract: "DeployContract";
    readonly FunctionCall: "FunctionCall";
    readonly Transfer: "Transfer";
    readonly Stake: "Stake";
    readonly AddKey: "AddKey";
    readonly DeleteKey: "DeleteKey";
    readonly DeleteAccount: "DeleteAccount";
    readonly SignedDelegate: "Delegate";
};
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export interface NearAction<T = Action | any> {
    id: number;
    type: ActionType;
    action: T;
    transaction?: NearTransaction;
    receipt?: NearTransactionReceipt;
}
export type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;
