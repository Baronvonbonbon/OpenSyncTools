{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,iEAAiE;AACjE,mCAAmC;;;AA8DnC,IAAY,eAMX;AAND,WAAY,eAAe;IACzB,6CAA0B,CAAA;IAC1B,yCAAsB,CAAA;IACtB,mDAAgC,CAAA;IAChC,sCAAmB,CAAA;IACnB,8CAA2B,CAAA;AAC7B,CAAC,EANW,eAAe,+BAAf,eAAe,QAM1B","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {CosmWasmClient} from '@cosmjs/cosmwasm-stargate';\nimport {DecodedTxRaw} from '@cosmjs/proto-signing';\nimport {Log} from '@cosmjs/stargate/build/logs';\nimport type {tendermint34, tendermint37, comet38} from '@cosmjs/tendermint-rpc';\nimport Long from 'long';\n\nexport type Block = tendermint34.Block | tendermint37.Block | comet38.Block;\nexport type BlockId = tendermint34.BlockId | tendermint37.BlockId | comet38.BlockId;\nexport type Validator = tendermint34.Validator | tendermint37.Validator | comet38.Validator;\nexport type TxData = tendermint34.TxData | tendermint37.TxData | comet38.TxData;\nexport type TxEvent = tendermint34.Event | tendermint37.Event | comet38.Event;\nexport type Header = tendermint34.Header | tendermint37.Header | comet38.Header;\n\nexport interface CosmWasmSafeClient extends CosmWasmClient {\n  validators: () => Promise<readonly Validator[]>;\n}\n\nexport interface CosmosBlock {\n  blockId: BlockId;\n  block: {id: string} & Block;\n  header: Header; // Full header\n  /* The raw transaction data */\n  txs: TxData[];\n\n  /**\n   * Decoded transactions, this is the same data as passed to a transaction handler\n   * */\n  transactions: CosmosTransaction[];\n  /**\n   * Decoded messages, this is the same data as passed to a message handler\n   * */\n  messages: CosmosMessage[];\n  /**\n   * Decoded events, this is the same data as passed to a event handler.\n   * This is all events including, beginBlockEvents, endBlockEvents and finalizedBlockEvents\n   * */\n  events: CosmosEvent[];\n}\n\nexport interface CosmosTransaction {\n  idx: number;\n  block: CosmosBlock;\n  hash: string;\n  tx: TxData;\n  decodedTx: DecodedTxRaw;\n}\n\nexport interface CosmosMessage<T = any> {\n  /**\n   * The index of the message within the transaction\n   */\n  idx: number;\n  block: CosmosBlock;\n  tx: CosmosTransaction;\n  msg: {\n    typeUrl: string;\n    decodedMsg: T;\n  };\n}\n\nexport enum CosmosEventKind {\n  BeginBlock = 'begin_block',\n  EndBlock = 'end_block',\n  FinalizeBlock = 'finalize_block',\n  Message = 'message',\n  Transaction = 'transaction',\n}\n\nexport interface CosmosEvent {\n  idx: number;\n  block: CosmosBlock;\n  tx: CosmosTransaction;\n  msg?: CosmosMessage;\n  log: Log;\n  event: TxEvent;\n  kind: CosmosEventKind;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n\nexport interface Coin {\n  denom: string;\n  amount: string;\n}\n\nexport interface MsgExecuteContract<T> {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n  /** Msg json encoded message to be passed to the contract */\n  msg: T;\n  /** Funds coins that are transferred to the contract on execution */\n  funds: Coin[];\n}\n\nexport interface MsgMigrateContract<T> {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Contract is the address of the smart contract */\n  contract: string;\n  /** CodeID references the new WASM code */\n  codeId: Long;\n  /** Msg json encoded message to be passed to the contract on migration */\n  msg: T;\n}\n\nexport interface MsgInstantiateContract<T> {\n  /** Sender is the that actor that signed the messages */\n  sender: string;\n  /** Admin is an optional address that can execute migrations */\n  admin: string;\n  /** CodeID is the reference to the stored WASM code */\n  codeId: Long;\n  /** Label is optional metadata to be stored with a contract instance. */\n  label: string;\n  /** Msg json encoded message to be passed to the contract on instantiation */\n  msg: T;\n  /** Funds coins that are transferred to the contract on instantiation */\n  funds: Coin[];\n}\n"]}