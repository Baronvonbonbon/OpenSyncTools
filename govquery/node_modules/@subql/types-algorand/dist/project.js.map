{"version":3,"file":"project.js","sourceRoot":"","sources":["../src/project.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAyBnC;;;GAGG;AACH,IAAY,sBAKX;AALD,WAAY,sBAAsB;IAChC;;OAEG;IACH,sDAA4B,CAAA;AAC9B,CAAC,EALW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAKjC;AAED;;;GAGG;AACH,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,sDAA+B,CAAA;IAC/B;;OAEG;IACH,kEAA2C,CAAA;AAC7C,CAAC,EATW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAS9B","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {\n  BaseTemplateDataSource,\n  IProjectNetworkConfig,\n  CommonSubqueryProject,\n  FileReference,\n  ProjectManifestV1_0_0,\n  BlockFilter,\n  BaseHandler,\n  BaseMapping,\n  BaseDataSource,\n  BaseCustomDataSource,\n  SecondLayerHandlerProcessor_0_0_0,\n  SecondLayerHandlerProcessor_1_0_0,\n  DsProcessor,\n} from '@subql/types-core';\nimport type {Indexer, TransactionType} from 'algosdk';\nimport {AlgorandBlock, AlgorandTransaction} from './interfaces';\n\nexport type RuntimeDatasourceTemplate = BaseTemplateDataSource<AlgorandRuntimeDataSource>;\nexport type CustomDatasourceTemplate = BaseTemplateDataSource<AlgorandCustomDataSource>;\n\nexport type AlgorandProjectManifestV1_0_0 = ProjectManifestV1_0_0<AlgorandRuntimeDataSource | AlgorandCustomDataSource>;\n\n/**\n * Kind of Algorand datasource.\n * @enum {string}\n */\nexport enum AlgorandDataSourceKind {\n  /**\n   * The runtime kind of Algorand datasource.\n   */\n  Runtime = 'algorand/Runtime',\n}\n\n/**\n * Enum representing the kind of Algorand handler.\n * @enum {string}\n */\nexport enum AlgorandHandlerKind {\n  /**\n   * Handler for Algorand blocks.\n   */\n  Block = 'algorand/BlockHandler',\n  /**\n   * Handler for Algorand transactions.\n   */\n  Transaction = 'algorand/TransactionHandler',\n}\n\nexport type RuntimeHandlerInputMap = {\n  [AlgorandHandlerKind.Block]: AlgorandBlock;\n  [AlgorandHandlerKind.Transaction]: AlgorandTransaction;\n};\n\nexport type RuntimeFilterMap = {\n  [AlgorandHandlerKind.Block]: AlgorandBlockFilter;\n  [AlgorandHandlerKind.Transaction]: AlgorandTransactionFilter;\n};\n\nexport type AlgorandBlockFilter = BlockFilter;\n\n/**\n * Represents a filter for Algorand transactions.\n * Depending on the txType the other filters may or may not be relevant\n * */\nexport interface AlgorandTransactionFilter {\n  /**\n   * The type of transaction\n   * @example\n   * txType: 'axfer',\n   * @example\n   * txType: 'appl',\n   * */\n  txType?: TransactionType | string;\n  /**\n   * Filter by the sender of a transction\n   * @example\n   * sender: '5GMADASEGJ324HR4GI2XZ2BNSN77ND45LLF4F4XDTAYX3YM6TX5YEU4FEA'\n   * */\n  sender?: string;\n  /**\n   * Filter by the receiver of a transaction\n   * @example\n   * receiver: 'V6CK3HRC4JBRBDIBB4JWOBMYNUYIP7SYHRPVHH5ZMJQME337C57IBIZVFI',\n   * */\n  receiver?: string;\n  nonParticipant?: boolean;\n  /**\n   * Filter by the assetId of a transaction\n   * */\n  assetId?: number;\n  newFreezeStatus?: boolean;\n  address?: string;\n  /**\n   * Filter by the application id\n   * @example\n   * applicationId: 971368268,\n   * */\n  applicationId?: number;\n  /**\n   * Filter by the args of an application call\n   * @example\n   * applicationArgs: ['udVC+w=='],\n   * @example\n   * // Use null to skip filtering certain arguments\n   * applicationArgs: ['udVC+w==', null, null, null, 'AQ==']\n   * */\n  applicationArgs?: string[];\n}\n\n/**\n * Represents a handler for Algorand blocks.\n * @type {AlgorandCustomHandler<AlgorandHandlerKind.Block, AlgorandBlockFilter>}\n */\nexport type AlgorandBlockHandler = AlgorandCustomHandler<AlgorandHandlerKind.Block, AlgorandBlockFilter>;\n/**\n * Represents a handler for Algorand transactions.\n * @type {AlgorandCustomHandler<AlgorandHandlerKind.Transaction, AlgorandTransactionFilter>}\n */\nexport type AlgorandTransactionHandler = AlgorandCustomHandler<\n  AlgorandHandlerKind.Transaction,\n  AlgorandTransactionFilter\n>;\n\n/**\n * Represents a generic custom handler for Algorand.\n * @interface\n * @template K - The kind of the handler (default: string).\n * @template F - The filter type for the handler (default: Record<string, unknown>).\n */\nexport interface AlgorandCustomHandler<K extends string = string, F = Record<string, unknown>>\n  extends BaseHandler<F, K> {\n  /**\n   * The kind of handler. For `algorand/Runtime` datasources this is either `Block` or `Transaction` kinds.\n   * The value of this will determine the filter options as well as the data provided to your handler function\n   * @type {AlgorandHandlerKind.Block | AlgorandHandlerKind.Transaction | string }\n   * @example\n   * kind: AlgorandHandlerKind.Block // Defined with an enum, this is used for runtime datasources\n   */\n  kind: K;\n  /**\n   * @type {F}\n   * @example\n   * filter: {\n        txType: 'axfer',\n        assetId: 27165954,\n        sender: 'ZW3ISEHZUHPO7OZGMKLKIIMKVICOUDRCERI454I3DB2BH52HGLSO67W754',\n      }\n   */\n  filter?: F;\n}\n\n/**\n * Represents a runtime handler for Algorand, which can be a block handler or transaction handler.\n * @type {AlgorandBlockHandler | AlgorandTransactionHandler}\n */\nexport type AlgorandRuntimeHandler = AlgorandBlockHandler | AlgorandTransactionHandler;\n/**\n * Represents a handler for Algorand, which can be a runtime handler or a custom handler with unknown filter type.\n * @type {AlgorandRuntimeHandler | AlgorandCustomHandler<string, unknown>}\n */\nexport type AlgorandHandler = AlgorandRuntimeHandler | AlgorandCustomHandler<string, unknown>;\n/**\n * Represents a filter for Algorand runtime handlers, which can be a block filter or transaction filter.\n * @type {AlgorandBlockFilter | AlgorandTransactionFilter}\n */\nexport type AlgorandRuntimeHandlerFilter = AlgorandBlockFilter | AlgorandTransactionFilter;\n\n/**\n * Represents a mapping for Algorand handlers, extending FileReference.\n * @interface\n * @extends {FileReference}\n */\nexport interface AlgorandMapping<T extends AlgorandHandler = AlgorandHandler> extends BaseMapping<T> {\n  /**\n   * @type {T[]}\n   * @example\n   * handlers: [{\n        kind: AlgorandRuntimeHandler.Transaction,\n        handler: 'handleTransfer',\n        filter: {\n          txType: 'axfer',\n          assetId: 27165954,\n          sender: 'ZW3ISEHZUHPO7OZGMKLKIIMKVICOUDRCERI454I3DB2BH52HGLSO67W754',\n        }\n      }]\n   */\n  handlers: T[];\n}\n\n/**\n * Represents a Algorand datasource interface with generic parameters.\n * @interface\n * @template M - The mapping type for the datasource.\n */\ntype IAlgorandDataSource<M extends AlgorandMapping> = BaseDataSource<AlgorandHandler, M>;\n\nexport interface AlgorandRuntimeDataSource<\n  M extends AlgorandMapping<AlgorandRuntimeHandler> = AlgorandMapping<AlgorandRuntimeHandler>\n> extends IAlgorandDataSource<M> {\n  kind: AlgorandDataSourceKind.Runtime;\n}\n\nexport type AlgorandDataSource = AlgorandRuntimeDataSource | AlgorandCustomDataSource;\n\nexport type CustomDataSourceAsset = FileReference;\n\nexport interface AlgorandCustomDataSource<\n  K extends string = string,\n  M extends AlgorandMapping = AlgorandMapping<AlgorandCustomHandler>\n> extends BaseCustomDataSource<AlgorandHandler, M> {\n  /**\n   * The kind of the custom datasource. This should follow the pattern `algorand/*`.\n   * @type {K}\n   */\n  kind: K;\n}\n\nexport type SecondLayerHandlerProcessor<\n  K extends AlgorandHandlerKind,\n  F extends Record<string, unknown>,\n  E,\n  DS extends AlgorandCustomDataSource = AlgorandCustomDataSource\n> =\n  | SecondLayerHandlerProcessor_0_0_0<K, RuntimeHandlerInputMap, RuntimeFilterMap, F, E, DS, Indexer>\n  | SecondLayerHandlerProcessor_1_0_0<K, RuntimeHandlerInputMap, RuntimeFilterMap, F, E, DS, Indexer>;\n\nexport type SecondLayerHandlerProcessorArray<\n  K extends string,\n  F extends Record<string, unknown>,\n  T,\n  DS extends AlgorandCustomDataSource<K> = AlgorandCustomDataSource<K>\n> =\n  | SecondLayerHandlerProcessor<AlgorandHandlerKind.Block, F, T, DS>\n  | SecondLayerHandlerProcessor<AlgorandHandlerKind.Transaction, F, T, DS>;\n\nexport type AlgorandDataSourceProcessor<\n  K extends string,\n  DS extends AlgorandCustomDataSource<K> = AlgorandCustomDataSource<K>,\n  P extends Record<string, SecondLayerHandlerProcessorArray<K, any, DS>> = Record<\n    string,\n    SecondLayerHandlerProcessorArray<K, any, DS>\n  >\n> = DsProcessor<DS, P, Indexer>;\n\nexport type AlgorandProject<DS extends AlgorandDataSource = AlgorandRuntimeDataSource> = CommonSubqueryProject<\n  IProjectNetworkConfig,\n  AlgorandRuntimeDataSource | DS,\n  BaseTemplateDataSource<AlgorandRuntimeDataSource> | BaseTemplateDataSource<DS>\n>;\n"]}