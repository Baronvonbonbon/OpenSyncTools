import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { sync as mkdirp } from "mkdirp";
import { join } from "path";
import { writeFileSync } from "fs";
import { header } from "../utils/header";
import generate from "@babel/generator";
import * as t from "@babel/types";

/**
 * BuilderPluginBase enable ts-codegen users implement their own plugins by only implement a few functions.
 */
export class BuilderPluginBase {
  constructor(opt, builder) {
    _defineProperty(this, "builder", void 0);

    _defineProperty(this, "option", void 0);

    _defineProperty(this, "utils", void 0);

    this.option = opt;
    this.builder = builder;
  }

  setBuilder(builder) {
    this.builder = builder;
  }

  async render(name, contractInfo, outPath) {
    const {
      enabled
    } = this.option;

    if (!enabled) {
      return;
    }

    const context = this.initContext(contractInfo, this.option);
    const results = await this.doRender(name, context);

    if (!results || !results.length) {
      return [];
    }

    return results.map(result => {
      const imports = context.getImports(this.utils, result.localname);
      const code = header + generate(t.program([...imports, ...result.body])).code;
      mkdirp(outPath);
      const filename = join(outPath, result.localname);
      writeFileSync(filename, code);
      return {
        type: result.type,
        pluginType: result.pluginType,
        contract: name,
        localname: result.localname,
        filename
      };
    });
  }
  /**
   * init context here
   * @param contract
   * @param options
   */


}