import { pascal } from "case";
import * as w from "wasm-ast-types";
import { findAndParseTypes, findExecuteMsg } from "../utils";
import { getMessageProperties, RenderContext } from "wasm-ast-types";
import { BuilderPluginBase } from "./plugin-base";
export const TYPE = "message-composer";
export class MessageComposerPlugin extends BuilderPluginBase {
  initContext(contract, options) {
    return new RenderContext(contract, options, this.builder.builderContext);
  }

  async doRender(name, context) {
    const {
      enabled
    } = this.option.messageComposer;

    if (!enabled) {
      return;
    }

    const {
      schemas
    } = context.contract;
    const localname = pascal(name) + ".message-composer.ts";
    const TypesFile = pascal(name) + ".types";
    const ExecuteMsg = findExecuteMsg(schemas);
    const typeHash = await findAndParseTypes(schemas);
    const body = [];
    body.push(w.importStmt(Object.keys(typeHash), `./${TypesFile}`)); // execute messages

    if (ExecuteMsg) {
      const children = getMessageProperties(ExecuteMsg);

      if (children.length > 0) {
        const TheClass = pascal(`${name}MessageComposer`);
        const Interface = pascal(`${name}Message`);
        body.push(w.createMessageComposerInterface(context, Interface, ExecuteMsg));
        body.push(w.createMessageComposerClass(context, TheClass, Interface, ExecuteMsg));
        context.addProviderInfo(name, w.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE, TheClass, localname);
      }
    }

    if (typeHash.hasOwnProperty("Coin")) {
      // @ts-ignore
      delete context.utils.Coin;
    }

    return [{
      type: TYPE,
      localname,
      body
    }];
  }

}