"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writeContentToFile = exports.writeAstToFile = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _parser = require("@babel/parser");

var _mkdirp = require("mkdirp");

var _fs = require("fs");

var _path = require("path");

var _generator = _interopRequireDefault(require("@babel/generator"));

var _unused = require("./unused");

var _traverse = _interopRequireDefault(require("@babel/traverse"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var writeAstToFile = function writeAstToFile(outPath, program, filename) {
  var removeUnusedImports = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var isTsDisable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var isEslintDisable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var ast = t.program(program);
  var content = (0, _generator["default"])(ast).code;

  if (removeUnusedImports) {
    var plugins = ["typescript"];
    var newAst = (0, _parser.parse)(content, {
      sourceType: "module",
      plugins: plugins
    });
    (0, _traverse["default"])(newAst, _unused.unused);
    var content2 = (0, _generator["default"])(newAst).code;
    writeContentToFile(outPath, content2, filename, isTsDisable, isEslintDisable);
  } else {
    writeContentToFile(outPath, content, filename, isTsDisable, isEslintDisable);
  }
};

exports.writeAstToFile = writeAstToFile;

var writeContentToFile = function writeContentToFile(outPath, content, filename) {
  var isTsDisable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var isEslintDisable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var esLintPrefix = "";
  var tsLintPrefix = "";
  var nameWithoutPath = filename.replace(outPath, ""); // strip off leading slash

  if (nameWithoutPath.startsWith("/")) nameWithoutPath = nameWithoutPath.replace(/^\//, "");

  if (isTsDisable) {
    tsLintPrefix = "//@ts-nocheck\n";
  }

  if (isEslintDisable) {
    esLintPrefix = "/* eslint-disable */\n";
  }

  var text = tsLintPrefix + esLintPrefix + content;
  (0, _mkdirp.sync)((0, _path.dirname)(filename));
  (0, _fs.writeFileSync)(filename, text);
};

exports.writeContentToFile = writeContentToFile;