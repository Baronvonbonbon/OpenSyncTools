"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContractsProviderBundlePlugin = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _case = require("case");

var w = _interopRequireWildcard(require("wasm-ast-types"));

var _pluginBase = require("./plugin-base");

var _provider = require("./provider");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ContractsProviderBundlePlugin = /*#__PURE__*/function (_BuilderPluginBase) {
  (0, _inherits2["default"])(ContractsProviderBundlePlugin, _BuilderPluginBase);

  var _super = _createSuper(ContractsProviderBundlePlugin);

  function ContractsProviderBundlePlugin(opt) {
    var _this;

    (0, _classCallCheck2["default"])(this, ContractsProviderBundlePlugin);
    _this = _super.call(this, opt);
    _this.utils = {
      CosmWasmClient: "@cosmjs/cosmwasm-stargate",
      SigningCosmWasmClient: "@cosmjs/cosmwasm-stargate",
      IQueryClientProvider: "__contractContextBase__",
      ISigningClientProvider: "__contractContextBase__",
      IMessageComposerProvider: "__contractContextBase__"
    };
    return _this;
  }

  (0, _createClass2["default"])(ContractsProviderBundlePlugin, [{
    key: "initContext",
    value: function initContext(contract, options) {
      return new w.RenderContext(contract, options, this.builder.builderContext);
    }
  }, {
    key: "doRender",
    value: function () {
      var _doRender = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(name, context) {
        var _this$option, _this$option$useContr, _Object$keys;

        var providerInfos, localname, body, _name, providerInfo, key, info;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if ((_this$option = this.option) !== null && _this$option !== void 0 && (_this$option$useContr = _this$option.useContractsHooks) !== null && _this$option$useContr !== void 0 && _this$option$useContr.enabled) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                providerInfos = context.getProviderInfos();

                if ((_Object$keys = Object.keys(providerInfos)) !== null && _Object$keys !== void 0 && _Object$keys.length) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                localname = "contractContextProviders.ts";
                body = [];
                context.addUtil("CosmWasmClient");
                context.addUtil("SigningCosmWasmClient");
                context.addUtil("IQueryClientProvider");
                context.addUtil("ISigningClientProvider");
                context.addUtil("IMessageComposerProvider");

                for (_name in providerInfos) {
                  if (Object.prototype.hasOwnProperty.call(providerInfos, _name)) {
                    providerInfo = providerInfos[_name];

                    for (key in providerInfo) {
                      if (Object.prototype.hasOwnProperty.call(providerInfo, key)) {
                        info = providerInfo[key];
                        body.push(w.importStmt([info.classname], "./".concat(info.basename)));
                      }
                    }

                    body.push(w.importStmt([(0, _case.pascal)(_name)], "./".concat((0, _provider.GetLocalBaseNameByContractName)(_name))));
                  }
                }

                body.push(w.createIContractsContext(providerInfos));
                body.push(w.createGettingProviders(providerInfos));
                return _context.abrupt("return", [{
                  type: "plugin",
                  pluginType: "contractContextProviders",
                  localname: localname,
                  body: body
                }]);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function doRender(_x, _x2) {
        return _doRender.apply(this, arguments);
      }

      return doRender;
    }()
  }]);
  return ContractsProviderBundlePlugin;
}(_pluginBase.BuilderPluginBase);

exports.ContractsProviderBundlePlugin = ContractsProviderBundlePlugin;