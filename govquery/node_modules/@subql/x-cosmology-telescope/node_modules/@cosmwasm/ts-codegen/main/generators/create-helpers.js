"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHelpers = void 0;

var _path = require("path");

var _mkdirp = require("mkdirp");

var _package = _interopRequireDefault(require("../../package.json"));

var _files = require("../utils/files");

var _helpers = require("../helpers");

var version = process.env.NODE_ENV === "test" ? "latest" : _package["default"].version;
var header = "/**\n* This file and any referenced files were automatically generated by ".concat(_package["default"].name, "@").concat(version, "\n* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n* and run the transpile command or yarn proto command to regenerate this bundle.\n*/\n\n");

var write = function write(outPath, file, content, varname) {
  var outFile = (0, _path.join)(outPath, file);
  (0, _mkdirp.sync)((0, _path.dirname)(outFile));
  (0, _files.writeContentToFile)(outPath, header + content, outFile);
  return {
    type: "plugin",
    pluginType: "helper",
    contract: varname !== null && varname !== void 0 ? varname : (0, _path.basename)(file, (0, _path.extname)(file)),
    localname: file,
    filename: outFile
  };
};

var createHelpers = function createHelpers(input, builderContext) {
  var _input$options, _input$options$useCon, _Object$keys;

  var files = [];

  if ((_input$options = input.options) !== null && _input$options !== void 0 && (_input$options$useCon = _input$options.useContractsHooks) !== null && _input$options$useCon !== void 0 && _input$options$useCon.enabled && (_Object$keys = Object.keys(builderContext.providers)) !== null && _Object$keys !== void 0 && _Object$keys.length) {
    var _input$options2;

    var useShorthandCtor = (_input$options2 = input.options) === null || _input$options2 === void 0 ? void 0 : _input$options2.useShorthandCtor;
    files.push(write(input.outPath, "contractContextBase.ts", useShorthandCtor ? _helpers.contractContextBaseShortHandCtor : _helpers.contractContextBase));
    files.push(write(input.outPath, "contracts-context.tsx", _helpers.contractsContextTSX, "contractsContext"));
  }

  return files;
};

exports.createHelpers = createHelpers;