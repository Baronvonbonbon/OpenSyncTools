"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MsgBuilderPlugin = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _case = require("case");

var w = _interopRequireWildcard(require("wasm-ast-types"));

var _utils = require("../utils");

var _pluginBase = require("./plugin-base");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var MsgBuilderPlugin = /*#__PURE__*/function (_BuilderPluginBase) {
  (0, _inherits2["default"])(MsgBuilderPlugin, _BuilderPluginBase);

  var _super = _createSuper(MsgBuilderPlugin);

  function MsgBuilderPlugin() {
    (0, _classCallCheck2["default"])(this, MsgBuilderPlugin);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(MsgBuilderPlugin, [{
    key: "initContext",
    value: function initContext(contract, options) {
      return new w.RenderContext(contract, options, this.builder.builderContext);
    }
  }, {
    key: "doRender",
    value: function () {
      var _doRender = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(name, context) {
        var enabled, schemas, localname, TypesFile, ExecuteMsg, typeHash, body, children, className, QueryMsg, _children, _className;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                enabled = this.option.msgBuilder.enabled;

                if (enabled) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                schemas = context.contract.schemas;
                localname = (0, _case.pascal)(name) + '.msg-builder.ts';
                TypesFile = (0, _case.pascal)(name) + '.types';
                ExecuteMsg = (0, _utils.findExecuteMsg)(schemas);
                _context.next = 9;
                return (0, _utils.findAndParseTypes)(schemas);

              case 9:
                typeHash = _context.sent;
                body = [];
                body.push(w.importStmt(Object.keys(typeHash), "./".concat(TypesFile)));
                body.push(w.importStmt(['CamelCasedProperties'], 'type-fest')); // execute messages

                if (ExecuteMsg) {
                  children = (0, w.getMessageProperties)(ExecuteMsg);

                  if (children.length > 0) {
                    className = (0, _case.pascal)("".concat(name, "ExecuteMsgBuilder"));
                    body.push(w.createMsgBuilderClass(context, className, ExecuteMsg));
                  }
                }

                QueryMsg = (0, _utils.findQueryMsg)(schemas); // query messages

                if (QueryMsg) {
                  _children = (0, w.getMessageProperties)(QueryMsg);

                  if (_children.length > 0) {
                    _className = (0, _case.pascal)("".concat(name, "QueryMsgBuilder"));
                    body.push(w.createMsgBuilderClass(context, _className, QueryMsg));
                  }
                }

                if (typeHash.hasOwnProperty('Coin')) {
                  // @ts-ignore
                  delete context.utils.Coin;
                }

                return _context.abrupt("return", [{
                  type: 'msg-builder',
                  localname: localname,
                  body: body
                }]);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function doRender(_x, _x2) {
        return _doRender.apply(this, arguments);
      }

      return doRender;
    }()
  }]);
  return MsgBuilderPlugin;
}(_pluginBase.BuilderPluginBase);

exports.MsgBuilderPlugin = MsgBuilderPlugin;