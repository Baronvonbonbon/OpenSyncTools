export declare const registryHelper = "import { BinaryReader } from \"./binary\";\nimport { Any, AnyAmino } from \"./google/protobuf/any\";\nimport { IProtoType, TelescopeGeneratedCodec } from \"./types\";\n\nexport class GlobalDecoderRegistry {\n  static registry: {\n    [key: string]: TelescopeGeneratedCodec<any, any, any>;\n  } = {};\n\n  static aminoProtoMapping: {\n    [key: string]: string;\n  } = {};\n\n  static registerAminoProtoMapping(aminoType: string, typeUrl: string) {\n    GlobalDecoderRegistry.aminoProtoMapping[aminoType] = typeUrl;\n  }\n\n  static register<T, SDK, Amino>(\n    key: string,\n    decoder: TelescopeGeneratedCodec<T, SDK, Amino>\n  ) {\n    GlobalDecoderRegistry.registry[key] = decoder;\n  }\n  static getDecoder<T, SDK, Amino>(\n    key: string\n  ): TelescopeGeneratedCodec<T, SDK, Amino> {\n    return GlobalDecoderRegistry.registry[key];\n  }\n  static getDecoderByInstance<T, SDK, Amino>(\n    obj: unknown\n  ): TelescopeGeneratedCodec<T, SDK, Amino> | null {\n    if (obj === undefined || obj === null) {\n      return null;\n    }\n    const protoType = obj as IProtoType;\n\n    if (protoType.$typeUrl) {\n      return GlobalDecoderRegistry.getDecoder<T, SDK, Amino>(\n        protoType.$typeUrl\n      );\n    }\n\n    for (const key in GlobalDecoderRegistry.registry) {\n      if (\n        Object.prototype.hasOwnProperty.call(\n          GlobalDecoderRegistry.registry,\n          key\n        )\n      ) {\n        const element = GlobalDecoderRegistry.registry[key];\n\n        if (element.is!(obj)) {\n          return element;\n        }\n\n        if (element.isSDK && element.isSDK(obj)) {\n          return element;\n        }\n\n        if (element.isAmino && element.isAmino(obj)) {\n          return element;\n        }\n      }\n    }\n\n    return null;\n  }\n  static getDecoderByAminoType<T, SDK, Amino>(\n    type: string\n  ): TelescopeGeneratedCodec<T, SDK, Amino> | null {\n    if (type === undefined || type === null) {\n      return null;\n    }\n\n    const typeUrl = GlobalDecoderRegistry.aminoProtoMapping[type];\n\n    if (!typeUrl) {\n      return null;\n    }\n\n    return GlobalDecoderRegistry.getDecoder<T, SDK, Amino>(typeUrl);\n  }\n  static wrapAny(obj: unknown): Any {\n    if(Any.is(obj)){\n      return obj;\n    }\n\n    const decoder = getDecoderByInstance(obj);\n\n    return {\n      typeUrl: decoder.typeUrl,\n      value: decoder.encode(obj).finish(),\n    };\n  }\n  static unwrapAny<T, SDK, Amino>(input: BinaryReader | Uint8Array | Any) {\n    let data;\n\n    if (Any.is(input)) {\n      data = input;\n    } else {\n      const reader =\n        input instanceof BinaryReader ? input : new BinaryReader(input);\n\n      data = Any.decode(reader, reader.uint32());\n    }\n\n    const decoder = GlobalDecoderRegistry.getDecoder<T, SDK, Amino>(\n      data.typeUrl\n    );\n\n    if (!decoder) {\n      return data;\n    }\n\n    return decoder.decode(data.value);\n  }\n  static fromJSON<T>(object: any): T {\n    const decoder = getDecoderByInstance<T>(object);\n    return decoder.fromJSON!(object);\n  }\n  static toJSON<T>(message: T): any {\n    const decoder = getDecoderByInstance<T>(message);\n    return decoder.toJSON!(message);\n  }\n  static fromPartial<T>(object: unknown): T {\n    const decoder = getDecoderByInstance<T>(object);\n    return decoder ? decoder.fromPartial(object) : (object as T);\n  }\n  static fromSDK<T = unknown, SDK = unknown>(object: SDK): T {\n    const decoder = getDecoderByInstance<T, SDK>(object);\n    return decoder.fromSDK!(object);\n  }\n  static fromSDKJSON<SDK = unknown>(object: any): SDK {\n    const decoder = getDecoderByInstance<unknown, SDK>(object);\n    return decoder.fromSDKJSON!(object);\n  }\n  static toSDK<T = unknown, SDK = unknown>(object: T): SDK {\n    const decoder = getDecoderByInstance<T, SDK>(object);\n    return decoder.toSDK!(object);\n  }\n  static fromAmino<T = unknown, Amino = unknown>(object: Amino): T {\n    const decoder = getDecoderByInstance<T, unknown, Amino>(object);\n    return decoder.fromAmino!(object);\n  }\n  static fromAminoMsg<T = unknown, Amino = unknown>(object: AnyAmino): T {\n    const decoder = GlobalDecoderRegistry.getDecoderByAminoType<\n      T,\n      unknown,\n      Amino\n    >(object.type);\n\n    if (!decoder) {\n      throw new Error(`There's no decoder for the amino type ${object.type}`);\n    }\n\n    return decoder.fromAminoMsg!(object);\n  }\n  static toAmino<T = unknown, Amino = unknown>(object: T): Amino {\n    let data: any;\n    let decoder: TelescopeGeneratedCodec<any, any, any>;\n    if (Any.is(object)) {\n      data = GlobalDecoderRegistry.unwrapAny(object);\n\n      decoder = GlobalDecoderRegistry.getDecoder(object.typeUrl);\n\n      if (!decoder) {\n        decoder = Any;\n      }\n    } else {\n      data = object;\n      decoder = getDecoderByInstance<T, unknown, Amino>(object);\n    }\n\n    return decoder.toAmino!(data);\n  }\n  static toAminoMsg<T = unknown, Amino = unknown>(object: T): AnyAmino {\n    let data: any;\n    let decoder: TelescopeGeneratedCodec<any, any, any>;\n    if (Any.is(object)) {\n      data = GlobalDecoderRegistry.unwrapAny(object);\n\n      decoder = GlobalDecoderRegistry.getDecoder(object.typeUrl);\n\n      if (!decoder) {\n        decoder = Any;\n      }\n    } else {\n      data = object;\n      decoder = getDecoderByInstance<T, unknown, Amino>(object);\n    }\n\n    return decoder.toAminoMsg!(data);\n  }\n}\n\nfunction getDecoderByInstance<T = unknown, SDK = unknown, Amino = unknown>(\n  obj: unknown\n): TelescopeGeneratedCodec<T, SDK, Amino> {\n  const decoder = GlobalDecoderRegistry.getDecoderByInstance<T, SDK, Amino>(\n    obj\n  );\n\n  if (!decoder) {\n    throw new Error(\n      `There's no decoder for the instance ${JSON.stringify(obj)}`\n    );\n  }\n\n  return decoder;\n}\n\nGlobalDecoderRegistry.register(Any.typeUrl, Any);\n";
