"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAminoTypeNameByRef = exports.getAminoTypeName = exports.getTypeUrl = exports.getTypeUrlWithPkgAndName = void 0;
const _1 = require(".");
const x_cosmology_types_1 = require("@subql/x-cosmology-types");
const case_1 = require("case");
const getTypeUrlWithPkgAndName = (pkg, name) => {
    return `/${pkg}.${name}`;
};
exports.getTypeUrlWithPkgAndName = getTypeUrlWithPkgAndName;
const getTypeUrl = (root, proto) => {
    if (!proto.name)
        return;
    return (0, exports.getTypeUrlWithPkgAndName)(root.package, proto.name);
};
exports.getTypeUrl = getTypeUrl;
const getAminoTypeName = (context, root, proto) => {
    return (0, exports.getAminoTypeNameByRef)(context.ref, context.options, root, proto);
};
exports.getAminoTypeName = getAminoTypeName;
const getAminoTypeNameByRef = (ref, options, root, proto) => {
    if (!proto.name) {
        // seems to only happen for
        //  SourceInfo_PositionsEntry  (in hash map inside google.api.expr.v1beta1)
        return;
    }
    // 1. first check exceptions
    const typeUrl = (0, exports.getTypeUrl)(root, proto);
    const exceptionsToCheck = {
        ...(options.aminoEncoding.exceptions ?? {}),
        ...x_cosmology_types_1.DEFAULT_AMINO_EXCEPTIONS,
    };
    const exceptionAminoName = exceptionsToCheck?.[typeUrl]?.aminoType;
    if (exceptionAminoName)
        return exceptionAminoName;
    // 2. if animo name defined, use this
    if (proto.options?.["(amino.name)"]) {
        return proto.options["(amino.name)"];
    }
    // 3. if a function was defined, use this
    const modTypeUrlToAmino = (0, _1.getPluginValue)("aminoEncoding.typeUrlToAmino", ref.proto.package, options);
    if (typeof modTypeUrlToAmino === "function") {
        const result = modTypeUrlToAmino(typeUrl);
        if (result)
            return result;
    }
    const name = typeUrl.replace(/^\//, "");
    const elements = name.split(".");
    const pkg = elements[0];
    const TypeName = elements[elements.length - 1];
    switch (pkg) {
        case "cosmos":
            switch (ref.proto.package) {
                case "cosmos.gov.v1":
                    if (TypeName == "MsgUpdateParams")
                        return `cosmos-sdk/x/gov/v1/${TypeName}`;
                    return `cosmos-sdk/v1/${TypeName}`;
            }
        case "ibc":
            return `cosmos-sdk/${TypeName}`;
        case "cosmwasm":
            return `wasm/${TypeName}`;
        case "osmosis": {
            if (/poolmodels/.test(typeUrl) && /stableswap/.test(typeUrl)) {
                const n = elements
                    .filter((a) => a !== "v1beta1")
                    .filter((a) => a !== "poolmodels")
                    .filter((a) => a !== "stableswap");
                n[n.length - 1] = (0, case_1.kebab)(n[n.length - 1]);
                n[n.length - 1] = n[n.length - 1].replace(/^msg-/, "");
                return n.join("/");
            }
            if (/superfluid/.test(typeUrl)) {
                switch (typeUrl) {
                    case "/osmosis.superfluid.MsgUnPoolWhitelistedPool":
                        return "osmosis/unpool-whitelisted-pool";
                }
                const n = elements.filter((a) => a !== "superfluid");
                n[n.length - 1] = (0, case_1.kebab)(n[n.length - 1]);
                n[n.length - 1] = n[n.length - 1].replace(/^msg-/, "");
                return n.join("/");
            }
            if (/lockup/.test(typeUrl)) {
                switch (typeUrl) {
                    case "/osmosis.lockup.MsgLockTokens":
                        return "osmosis/lockup/lock-tokens";
                    case "/osmosis.lockup.MsgBeginUnlockingAll":
                        return "osmosis/lockup/begin-unlock-tokens";
                    case "/osmosis.lockup.MsgBeginUnlocking":
                        return "osmosis/lockup/begin-unlock-period-lock";
                }
            }
            const n = elements.filter((a) => !a.match(/v1beta1/));
            n[n.length - 1] = (0, case_1.kebab)(n[n.length - 1]);
            n[n.length - 1] = n[n.length - 1].replace(/^msg-/, "");
            return n.join("/");
        }
        default: {
            return typeUrl;
        }
    }
};
exports.getAminoTypeNameByRef = getAminoTypeNameByRef;
