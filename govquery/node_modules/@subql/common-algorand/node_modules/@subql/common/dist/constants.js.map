{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,eAAe;AACF,QAAA,YAAY,GAAG,IAAI,CAAC;AAEjC,MAAM;AACO,QAAA,SAAS,GAAG,qCAAqC,CAAC;AAClD,QAAA,UAAU,GAAG,mCAAmC,CAAC;AACjD,QAAA,kBAAkB,GAAG,GAAG,iBAAS,cAAc,CAAC;AAChD,QAAA,mBAAmB,GAAG,GAAG,kBAAU,cAAc,CAAC;AAClD,QAAA,UAAU,GAAG,aAAa,CAAC;AAExC,WAAW;AACE,QAAA,YAAY,GAAG,yCAAyC,CAAC;AAEtE,MAAM;AACO,QAAA,cAAc,GAAG,CAAC,CAAC,CAAC,UAAU;AAE3C,UAAU;AACV,IAAY,cAUX;AAVD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,mCAAiB,CAAA;IACjB,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,+BAAa,CAAA;IACb,qCAAmB,CAAA;IACnB,2CAAyB,CAAA;IACzB,uCAAqB,CAAA;IACrB,mCAAiB,CAAA;AACnB,CAAC,EAVW,cAAc,8BAAd,cAAc,QAUzB;AAEY,QAAA,aAAa,GAAG;IAC3B,aAAa,EAAE,cAAc,CAAC,SAAS;IACvC,uBAAuB,EAAE,cAAc,CAAC,SAAS;IACjD,oBAAoB,EAAE,cAAc,CAAC,MAAM;IAC3C,sBAAsB,EAAE,cAAc,CAAC,QAAQ;IAC/C,sBAAsB,EAAE,cAAc,CAAC,QAAQ;IAC/C,kBAAkB,EAAE,cAAc,CAAC,IAAI;IACvC,qBAAqB,EAAE,cAAc,CAAC,OAAO;IAC7C,wBAAwB,EAAE,cAAc,CAAC,UAAU;IACnD,sBAAsB,EAAE,cAAc,CAAC,QAAQ;IAC/C,oBAAoB,EAAE,cAAc,CAAC,MAAM;CAC5C,CAAC;AAEF,uBAAuB;AACV,QAAA,0BAA0B,GAAG,iBAAiB,CAAC;AAE5D,8DAA8D;AACjD,QAAA,qBAAqB,GAAG,IAAI,CAAC;AAE1C,4BAA4B;AACf,QAAA,mBAAmB,GAAG,GAAG,CAAC;AAEvC,qBAAqB;AACR,QAAA,kBAAkB,GAAG,wEAAwE,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\n// APP API PORT\nexport const DEFAULT_PORT = 3000;\n\n//IPFS\nexport const IPFS_READ = 'https://unauthipfs.subquery.network';\nexport const IPFS_WRITE = 'https://authipfs.subquery.network';\nexport const IPFS_NODE_ENDPOINT = `${IPFS_READ}/ipfs/api/v0`;\nexport const IPFS_WRITE_ENDPOINT = `${IPFS_WRITE}/ipfs/api/v0`;\nexport const IPFS_REGEX = /^ipfs:\\/\\//i;\n\n// MANIFEST\nexport const RUNNER_REGEX = /(\\^?)(\\d|x|\\*)+\\.(\\d|x|\\*)+\\.(\\d|x|\\*)+/;\n\n// POI\nexport const POI_AWAIT_TIME = 2; // seconds\n\n// NETWORK\nexport enum NETWORK_FAMILY {\n  substrate = 'Substrate',\n  cosmos = 'Cosmos',\n  algorand = 'Algorand',\n  ethereum = 'Ethereum',\n  near = 'Near',\n  stellar = 'Stellar',\n  concordium = 'Concordium',\n  starknet = 'Starknet',\n  solana = 'Solana',\n}\n\nexport const runnerMapping = {\n  '@subql/node': NETWORK_FAMILY.substrate,\n  '@subql/node-substrate': NETWORK_FAMILY.substrate,\n  '@subql/node-cosmos': NETWORK_FAMILY.cosmos,\n  '@subql/node-algorand': NETWORK_FAMILY.algorand,\n  '@subql/node-ethereum': NETWORK_FAMILY.ethereum,\n  '@subql/node-near': NETWORK_FAMILY.near,\n  '@subql/node-stellar': NETWORK_FAMILY.stellar,\n  '@subql/node-concordium': NETWORK_FAMILY.concordium,\n  '@subql/node-starknet': NETWORK_FAMILY.starknet,\n  '@subql/node-solana': NETWORK_FAMILY.solana,\n};\n\n// DATABASE ERROR REGEX\nexport const CONNECTION_SSL_ERROR_REGEX = 'not support SSL';\n\n// BLOCK BATCH SYNC between POI MMR <-> Filebased/Postgres MMR\nexport const RESET_MMR_BLOCK_BATCH = 1000;\n\n// Default Model fetch range\nexport const DEFAULT_FETCH_RANGE = 100;\n\n// RUNNER ERROR REGEX\nexport const RUNNER_ERROR_REGEX = 'property runner.node.name has failed the following constraints: equals';\n"]}