"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPFSReader = void 0;
const js_yaml_1 = __importDefault(require("js-yaml"));
const constants_1 = require("../../constants");
const IpfsHttpClientLite_1 = require("../IpfsHttpClientLite");
const CIDv0 = new RegExp(/Qm[1-9A-Za-z]{44}[^OIl]/i);
const CIDv1 = new RegExp(/Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,}/i);
class IPFSReader {
    cid;
    ipfs;
    cache = {};
    constructor(cid, gateway) {
        this.cid = cid;
        if (!CIDv0.test(cid) && !CIDv1.test(cid)) {
            throw new Error('IPFS project path CID is not valid');
        }
        this.ipfs = new IpfsHttpClientLite_1.IPFSHTTPClientLite({ url: gateway ?? constants_1.IPFS_NODE_ENDPOINT });
    }
    get root() {
        return undefined;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getPkg() {
        throw new Error("IPFS Reader doesn't support reading package.json");
    }
    async getProjectSchema() {
        const projectYaml = await this.getFile(this.cid);
        return js_yaml_1.default.load(projectYaml);
    }
    async getFile(fileName) {
        try {
            if (this.cache[fileName] === undefined) {
                const resolvedFileName = fileName.replace('ipfs://', '');
                this.cache[fileName] = this.resultToBuffer(this.ipfs.cat(resolvedFileName));
            }
            return await this.cache[fileName];
        }
        catch (e) {
            console.error(`Failed to fetch file from IPFS: ${fileName}`, e);
            throw new Error(`Failed to fetch file from IPFS: ${fileName}`, { cause: e });
        }
    }
    async resultToBuffer(req) {
        const scriptBufferArray = [];
        for await (const res of req) {
            scriptBufferArray.push(res);
        }
        return Buffer.concat(scriptBufferArray.map((u8a) => Buffer.from(u8a))).toString('utf8');
    }
}
exports.IPFSReader = IPFSReader;
//# sourceMappingURL=ipfs-reader.js.map