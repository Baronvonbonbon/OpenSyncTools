import { BlockFilter, CommonSubqueryProject, IEndpointConfig, IProjectNetworkConfig, NodeOptions, NodeSpec, ParentProject, QuerySpec, RunnerSpecs } from '@subql/types-core';
import { FileType } from '../base';
export declare class RunnerQueryBaseModel implements QuerySpec {
    name: string;
    version: string;
}
export declare class RunnerNodeImpl implements NodeSpec {
    name: string;
    version: string;
    options?: NodeOptions;
}
export declare class RunnerNodeOptionsModel implements NodeOptions {
    historical?: boolean;
    unsafe?: boolean;
    unfinalizedBlocks?: boolean;
    skipTransactions?: boolean;
}
export declare class BlockFilterImpl implements BlockFilter {
    modulo?: number;
    timestamp?: string;
}
export declare class ParentProjectModel implements ParentProject {
    block: number;
    untilBlock: number;
    reference: string;
}
export declare class CommonProjectManifestV1_0_0Impl<D extends object = any> implements CommonSubqueryProject {
    definitions: object;
    description?: string;
    repository?: string;
    specVersion: string;
    dataSources: any[];
    network: IProjectNetworkConfig;
    name?: string;
    version: string;
    schema: FileType;
    templates?: any[];
    runner: RunnerSpecs;
    parent?: ParentProject;
    readonly deployment: D;
}
export declare class CommonRunnerSpecsImpl implements RunnerSpecs {
    node: NodeSpec;
    query: QuerySpec;
}
export declare class CommonEndpointConfig implements IEndpointConfig {
    headers?: Record<string, string>;
}
export declare class CommonProjectNetworkV1_0_0<C = any> implements IProjectNetworkConfig {
    endpoint: string | string[] | Record<string, CommonEndpointConfig>;
    dictionary: string | string[];
    chainId: string;
    chaintypes?: C;
    bypassBlocks?: (number | `${number}-${number}`)[];
}
