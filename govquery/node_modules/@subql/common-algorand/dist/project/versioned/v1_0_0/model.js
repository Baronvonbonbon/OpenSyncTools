"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectManifestV1_0_0Impl = exports.DeploymentV1_0_0 = exports.CustomDataSourceTemplateImpl = exports.RuntimeDataSourceTemplateImpl = exports.AlgorandCustomDataSourceV1_0_0Impl = exports.AlgorandRuntimeDataSourceV1_0_0Impl = exports.ProjectNetworkV1_0_0 = exports.ProjectNetworkDeploymentV1_0_0 = exports.AlgorandRunnerSpecsImpl = exports.AlgorandRunnerNodeImpl = void 0;
const common_1 = require("@subql/common");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const js_yaml_1 = __importDefault(require("js-yaml"));
const models_1 = require("../../models");
const ALGORAND_NODE_NAME = `@subql/node-algorand`;
class AlgorandRunnerNodeImpl {
    name;
    version = ALGORAND_NODE_NAME;
}
__decorate([
    (0, class_validator_1.Equals)(ALGORAND_NODE_NAME, { message: `Runner algorand node name incorrect, suppose be '${ALGORAND_NODE_NAME}'` }),
    __metadata("design:type", String)
], AlgorandRunnerNodeImpl.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Validate)(common_1.SemverVersionValidator),
    __metadata("design:type", String)
], AlgorandRunnerNodeImpl.prototype, "version", void 0);
exports.AlgorandRunnerNodeImpl = AlgorandRunnerNodeImpl;
class AlgorandRunnerSpecsImpl {
    node;
    query;
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => AlgorandRunnerNodeImpl),
    __metadata("design:type", Object)
], AlgorandRunnerSpecsImpl.prototype, "node", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.RunnerQueryBaseModel),
    __metadata("design:type", Object)
], AlgorandRunnerSpecsImpl.prototype, "query", void 0);
exports.AlgorandRunnerSpecsImpl = AlgorandRunnerSpecsImpl;
class ProjectNetworkDeploymentV1_0_0 {
    chainId;
    bypassBlocks;
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectNetworkDeploymentV1_0_0.prototype, "chainId", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], ProjectNetworkDeploymentV1_0_0.prototype, "bypassBlocks", void 0);
exports.ProjectNetworkDeploymentV1_0_0 = ProjectNetworkDeploymentV1_0_0;
class ProjectNetworkV1_0_0 extends common_1.CommonProjectNetworkV1_0_0 {
}
exports.ProjectNetworkV1_0_0 = ProjectNetworkV1_0_0;
class AlgorandRuntimeDataSourceV1_0_0Impl extends models_1.RuntimeDataSourceBase {
    validate() {
        return (0, common_1.validateObject)(this, 'failed to validate runtime datasource.');
    }
}
exports.AlgorandRuntimeDataSourceV1_0_0Impl = AlgorandRuntimeDataSourceV1_0_0Impl;
class AlgorandCustomDataSourceV1_0_0Impl extends models_1.CustomDataSourceBase {
    validate() {
        return (0, common_1.validateObject)(this, 'failed to validate custom datasource.');
    }
}
exports.AlgorandCustomDataSourceV1_0_0Impl = AlgorandCustomDataSourceV1_0_0Impl;
class RuntimeDataSourceTemplateImpl extends AlgorandRuntimeDataSourceV1_0_0Impl {
    name;
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], RuntimeDataSourceTemplateImpl.prototype, "name", void 0);
exports.RuntimeDataSourceTemplateImpl = RuntimeDataSourceTemplateImpl;
class CustomDataSourceTemplateImpl extends AlgorandCustomDataSourceV1_0_0Impl {
    name;
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomDataSourceTemplateImpl.prototype, "name", void 0);
exports.CustomDataSourceTemplateImpl = CustomDataSourceTemplateImpl;
class DeploymentV1_0_0 extends common_1.BaseDeploymentV1_0_0 {
    network;
    runner;
    dataSources;
    templates;
}
__decorate([
    (0, class_transformer_1.Transform)((params) => {
        if (params.value.genesisHash && !params.value.chainId) {
            params.value.chainId = params.value.genesisHash;
        }
        return (0, class_transformer_1.plainToInstance)(ProjectNetworkDeploymentV1_0_0, params.value);
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => ProjectNetworkDeploymentV1_0_0),
    __metadata("design:type", ProjectNetworkDeploymentV1_0_0)
], DeploymentV1_0_0.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => AlgorandRunnerSpecsImpl),
    __metadata("design:type", Object)
], DeploymentV1_0_0.prototype, "runner", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => AlgorandCustomDataSourceV1_0_0Impl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: AlgorandRuntimeDataSourceV1_0_0Impl, name: 'algorand/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], DeploymentV1_0_0.prototype, "dataSources", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CustomDataSourceTemplateImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: RuntimeDataSourceTemplateImpl, name: 'algorand/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], DeploymentV1_0_0.prototype, "templates", void 0);
exports.DeploymentV1_0_0 = DeploymentV1_0_0;
class ProjectManifestV1_0_0Impl extends common_1.ProjectManifestBaseImpl {
    constructor() {
        super(DeploymentV1_0_0);
    }
    specVersion = '1.0.0';
    name;
    version;
    network;
    schema;
    dataSources;
    templates;
    runner;
    parent;
    toDeployment() {
        return js_yaml_1.default.dump(this._deployment, {
            sortKeys: true,
            condenseFlow: true,
        });
    }
    validate() {
        const errors = (0, class_validator_1.validateSync)(this.deployment, { whitelist: true, forbidNonWhitelisted: true });
        if (errors?.length) {
            // TODO: print error details
            const errorMsgs = errors.map((e) => e.toString()).join('\n');
            throw new Error(`failed to parse project.yaml.\n${errorMsgs}`);
        }
    }
}
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    __metadata("design:type", Object)
], ProjectManifestV1_0_0Impl.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestV1_0_0Impl.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestV1_0_0Impl.prototype, "version", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => ProjectNetworkV1_0_0),
    __metadata("design:type", ProjectNetworkV1_0_0)
], ProjectManifestV1_0_0Impl.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.FileType),
    __metadata("design:type", common_1.FileType)
], ProjectManifestV1_0_0Impl.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => AlgorandCustomDataSourceV1_0_0Impl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: AlgorandRuntimeDataSourceV1_0_0Impl, name: 'algorand/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], ProjectManifestV1_0_0Impl.prototype, "dataSources", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CustomDataSourceTemplateImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: RuntimeDataSourceTemplateImpl, name: 'algorand/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], ProjectManifestV1_0_0Impl.prototype, "templates", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => AlgorandRunnerSpecsImpl),
    __metadata("design:type", Object)
], ProjectManifestV1_0_0Impl.prototype, "runner", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    (0, class_transformer_1.Type)(() => common_1.ParentProjectModel),
    __metadata("design:type", Object)
], ProjectManifestV1_0_0Impl.prototype, "parent", void 0);
exports.ProjectManifestV1_0_0Impl = ProjectManifestV1_0_0Impl;
//# sourceMappingURL=model.js.map