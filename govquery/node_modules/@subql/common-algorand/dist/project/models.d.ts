import { BaseDataSource } from '@subql/common';
import { CustomDataSourceAsset as AlgorandCustomDataSourceAsset, AlgorandBlockFilter, AlgorandBlockHandler, AlgorandCustomHandler, AlgorandDataSourceKind, AlgorandHandlerKind, AlgorandRuntimeDataSource, AlgorandRuntimeHandler, AlgorandCustomDataSource, AlgorandTransactionHandler, AlgorandTransactionFilter } from '@subql/types-algorand';
import { BaseMapping, FileReference, Processor } from '@subql/types-core';
import { TransactionType } from 'algosdk';
export declare class BlockFilter implements AlgorandBlockFilter {
    modulo?: number;
    timestamp?: string;
}
export declare class TransactionFilter implements AlgorandTransactionFilter {
    txType?: TransactionType;
    sender?: string;
    receiver?: string;
    nonParticipant?: boolean;
    assetId?: number;
    newFreezeStatus?: boolean;
    address?: string;
    applicationId?: number;
    applicationArgs?: string[];
}
export declare class BlockHandler implements AlgorandBlockHandler {
    kind: AlgorandHandlerKind.Block;
    handler: string;
    filter?: AlgorandBlockFilter;
}
export declare class TransactionHandler implements AlgorandTransactionHandler {
    filter?: AlgorandTransactionFilter;
    kind: AlgorandHandlerKind.Transaction;
    handler: string;
}
export declare class CustomHandler implements AlgorandCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class RuntimeMapping implements BaseMapping<AlgorandRuntimeHandler> {
    handlers: AlgorandRuntimeHandler[];
    file: string;
}
export declare class CustomMapping implements BaseMapping<AlgorandCustomHandler> {
    handlers: CustomHandler[];
    file: string;
}
export declare class RuntimeDataSourceBase extends BaseDataSource implements AlgorandRuntimeDataSource {
    kind: AlgorandDataSourceKind.Runtime;
    mapping: RuntimeMapping;
}
export declare class FileReferenceImpl implements FileReference {
    file: string;
}
export declare class CustomDataSourceBase<K extends string, M extends CustomMapping, O = any> extends BaseDataSource implements AlgorandCustomDataSource<K, M> {
    kind: K;
    mapping: M;
    assets: Map<string, AlgorandCustomDataSourceAsset>;
    processor: Processor<O>;
}
