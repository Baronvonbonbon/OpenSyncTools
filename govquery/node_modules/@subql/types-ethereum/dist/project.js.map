{"version":3,"file":"project.js","sourceRoot":"","sources":["../src/project.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAgCnC;;;GAGG;AACH,IAAY,sBAKX;AALD,WAAY,sBAAsB;IAChC;;OAEG;IACH,sDAA4B,CAAA;AAC9B,CAAC,EALW,sBAAsB,sCAAtB,sBAAsB,QAKjC;AAED;;;GAGG;AACH,IAAY,mBAaX;AAbD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,sDAA+B,CAAA;IAC/B;;OAEG;IACH,2DAAoC,CAAA;IACpC;;OAEG;IACH,oDAA6B,CAAA;AAC/B,CAAC,EAbW,mBAAmB,mCAAnB,mBAAmB,QAa9B","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {\n  BaseTemplateDataSource,\n  IProjectNetworkConfig,\n  CommonSubqueryProject,\n  FileReference,\n  Processor,\n  ProjectManifestV1_0_0,\n  BaseDataSource,\n  SecondLayerHandlerProcessor_0_0_0,\n  SecondLayerHandlerProcessor_1_0_0,\n  DsProcessor,\n  BaseCustomDataSource,\n  IEndpointConfig,\n} from '@subql/types-core';\nimport {\n  EthereumBlock,\n  EthereumBlockFilter,\n  EthereumLog,\n  EthereumLogFilter,\n  EthereumTransaction,\n  EthereumTransactionFilter,\n  LightEthereumLog,\n} from './ethereum';\nimport {ApiWrapper} from './interfaces';\n\nexport type RuntimeDatasourceTemplate = BaseTemplateDataSource<SubqlRuntimeDatasource>;\nexport type CustomDatasourceTemplate = BaseTemplateDataSource<SubqlCustomDatasource>;\n\nexport type EthereumProjectManifestV1_0_0 = ProjectManifestV1_0_0<SubqlRuntimeDatasource | SubqlCustomDatasource>;\n\n/**\n * Kind of Ethereum datasource.\n * @enum {string}\n */\nexport enum EthereumDatasourceKind {\n  /**\n   * The runtime kind of Ethereum datasource.\n   */\n  Runtime = 'ethereum/Runtime',\n}\n\n/**\n * Enum representing the kind of Ethereum handler.\n * @enum {string}\n */\nexport enum EthereumHandlerKind {\n  /**\n   * Handler for Ethereum blocks.\n   */\n  Block = 'ethereum/BlockHandler',\n  /**\n   * Handler for Ethereum transactions.\n   */\n  Call = 'ethereum/TransactionHandler',\n  /**\n   * Handler for Ethereum log events.\n   */\n  Event = 'ethereum/LogHandler',\n}\n\nexport type EthereumRuntimeHandlerInputMap = {\n  [EthereumHandlerKind.Block]: EthereumBlock;\n  [EthereumHandlerKind.Call]: EthereumTransaction;\n  [EthereumHandlerKind.Event]: EthereumLog | LightEthereumLog;\n};\n\ntype EthereumRuntimeFilterMap = {\n  [EthereumHandlerKind.Block]: EthereumBlockFilter;\n  [EthereumHandlerKind.Event]: EthereumLogFilter;\n  [EthereumHandlerKind.Call]: EthereumTransactionFilter;\n};\n\n/**\n * Represents a handler for Ethereum blocks.\n * @type {SubqlCustomHandler<EthereumHandlerKind.Block, EthereumBlockFilter>}\n */\nexport type SubqlBlockHandler = SubqlCustomHandler<EthereumHandlerKind.Block, EthereumBlockFilter>;\n/**\n * Represents a handler for Ethereum transactions.\n * @type {SubqlCustomHandler<EthereumHandlerKind.Call, EthereumTransactionFilter>}\n */\nexport type SubqlCallHandler = SubqlCustomHandler<EthereumHandlerKind.Call, EthereumTransactionFilter>;\n/**\n * Represents a handler for Ethereum logs.\n * @type {SubqlCustomHandler<EthereumHandlerKind.Event, EthereumLogFilter>}\n */\nexport type SubqlEventHandler = SubqlCustomHandler<EthereumHandlerKind.Event, EthereumLogFilter>;\n\n/**\n * Represents a generic custom handler for Ethereum.\n * @interface\n * @template K - The kind of the handler (default: string).\n * @template F - The filter type for the handler (default: Record<string, unknown>).\n */\nexport interface SubqlCustomHandler<K extends string = string, F = Record<string, unknown>> {\n  /**\n   * The kind of handler. For `ethereum/Runtime` datasources this is either `Block`, `Call` or `Event` kinds.\n   * The value of this will determine the filter options as well as the data provided to your handler function\n   * @type {EthereumHandlerKind.Block | EthereumHandlerKind.Call | EthereumHandlerKind.Event | string }\n   * @example\n   * kind: EthereumHandlerKind.Block // Defined with an enum, this is used for runtime datasources\n\n   */\n  kind: K;\n  /**\n   * The name of your handler function. This must be defined and exported from your code.\n   * @type {string}\n   * @example\n   * handler: 'handleBlock'\n   */\n  handler: string;\n  /**\n   * The filter for the handler. The handler kind will determine the possible filters (optional).\n   *\n   * @type {F}\n   */\n  filter?: F;\n}\n\n/**\n * Represents a runtime handler for Ethereum, which can be a block handler, transaction handler, or log handler.\n * @type {SubqlBlockHandler | SubqlCallHandler | SubqlEventHandler}\n */\nexport type SubqlRuntimeHandler = SubqlBlockHandler | SubqlCallHandler | SubqlEventHandler;\n\n/**\n * Represents a handler for Ethereum, which can be a runtime handler or a custom handler with unknown filter type.\n * @type {SubqlRuntimeHandler | SubqlCustomHandler<string, unknown>}\n */\nexport type SubqlHandler = SubqlRuntimeHandler | SubqlCustomHandler<string, unknown>;\n\n/**\n * Represents a filter for Ethereum runtime handlers, which can be a block filter, call filter, or event filter.\n * @type {EthereumBlockFilter | EthereumTransactionFilter | EthereumLogFilter}\n */\nexport type SubqlHandlerFilter = EthereumBlockFilter | EthereumTransactionFilter | EthereumLogFilter;\n\n/**\n * Represents a mapping for Ethereum handlers, extending FileReference.\n * @interface\n * @extends {FileReference}\n */\nexport interface SubqlMapping<T extends SubqlHandler = SubqlHandler> extends FileReference {\n  /**\n   * An array of handlers associated with the mapping.\n   * @type {T[]}\n   * @example\n   * handlers: [{\n        kind: EthereumHandlerKind.Call,\n        handler: 'handleTransfer',\n        filter: {\n          to: '0x220866B1A2219f40e72f5c628B65D54268cA3A9D',\n        }\n      }]\n   */\n  handlers: T[];\n}\n\nexport interface SubqlEthereumProcessorOptions {\n  /**\n   * The name of the abi that is provided in the assets\n   * This is the abi that will be used to decode transaction or log arguments\n   * @example\n   * abi: 'erc20',\n   * */\n  abi?: string;\n  /**\n   * The specific contract that this datasource should filter.\n   * Alternatively this can be left blank and a transaction to filter can be used instead\n   * @example\n   * address: '0x220866B1A2219f40e72f5c628B65D54268cA3A9D',\n   * */\n  address?: string;\n}\n\n/**\n * Represents a runtime datasource for Ethereum.\n * @interface\n * @template M - The mapping type for the datasource (default: SubqlMapping<SubqlRuntimeHandler>).\n */\nexport interface SubqlRuntimeDatasource<M extends SubqlMapping<SubqlRuntimeHandler> = SubqlMapping<SubqlRuntimeHandler>>\n  extends BaseDataSource<SubqlRuntimeHandler, M> {\n  /**\n   * The kind of the datasource, which is `ethereum/Runtime`.\n   * @type {EthereumDatasourceKind.Runtime}\n   */\n  kind: EthereumDatasourceKind.Runtime;\n  /**\n   * Options to specify details about the contract and its interface\n   * @example\n   * options: {\n   *   abi: 'erc20',\n   *   address: '0x220866B1A2219f40e72f5c628B65D54268cA3A9D',\n   * }\n   * */\n  options?: SubqlEthereumProcessorOptions;\n  /**\n   * ABI or contract artifact files that are used for decoding.\n   * These are used for codegen to generate handler inputs and contract interfaces\n   * @example\n   * assets: new Map([\n   *  ['erc721', { file: \"./abis/erc721.json\" }],\n   *  ['erc1155', { file: \"./abis/erc1155.json\" }],\n   * ])\n   * */\n  assets?: Map<string, FileReference>;\n}\n\nexport type SubqlDatasource = SubqlRuntimeDatasource | SubqlCustomDatasource;\n\nexport interface SubqlCustomDatasource<\n  K extends string = string,\n  M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>,\n  O = any\n> extends BaseCustomDataSource<SubqlHandler, M> /*ISubqlDatasource<M>*/ {\n  /**\n   * The kind of the datasource, which is `ethereum/Runtime`.\n   * @type {K}\n   */\n  kind: K;\n  /**\n   * Options to specify details about the contract and its interface\n   * @example\n   * options: {\n   *   abi: 'erc20',\n   *   address: '0x220866B1A2219f40e72f5c628B65D54268cA3A9D',\n   * }\n   * */\n  options?: SubqlEthereumProcessorOptions;\n  /**\n   * ABI or contract artifact files that are used for decoding.\n   * These are used for codegen to generate handler inputs and contract interfaces\n   * @example\n   * assets: new Map([\n   *  ['erc721', { file: \"./abis/erc721.json\" }],\n   *  ['erc1155', { file: \"./abis/erc1155.json\" }],\n   * ])\n   * */\n  assets?: Map<string, FileReference>;\n  /**\n   * @example\n   * processor: {\n   *    file: './node_modules/@subql/frontier-evm-processor/dist/bundle.js',\n   *    options: {\n   *      abi: 'erc20',\n   *      address: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\n   *    }\n   *  }\n   */\n  processor: Processor<O>;\n}\n\nexport type SecondLayerHandlerProcessor<\n  K extends EthereumHandlerKind,\n  F extends Record<string, unknown>, // EthereumRuntimeFilterMap?\n  E,\n  DS extends SubqlCustomDatasource = SubqlCustomDatasource\n> =\n  | SecondLayerHandlerProcessor_0_0_0<K, EthereumRuntimeHandlerInputMap, EthereumRuntimeFilterMap, F, E, DS, ApiWrapper>\n  | SecondLayerHandlerProcessor_1_0_0<\n      K,\n      EthereumRuntimeHandlerInputMap,\n      EthereumRuntimeFilterMap,\n      F,\n      E,\n      DS,\n      ApiWrapper\n    >;\n\nexport type SecondLayerHandlerProcessorArray<\n  K extends string,\n  F extends Record<string, unknown>,\n  T,\n  DS extends SubqlCustomDatasource<K> = SubqlCustomDatasource<K>\n> =\n  | SecondLayerHandlerProcessor<EthereumHandlerKind.Block, F, T, DS>\n  | SecondLayerHandlerProcessor<EthereumHandlerKind.Call, F, T, DS>\n  | SecondLayerHandlerProcessor<EthereumHandlerKind.Event, F, T, DS>;\n\nexport type SubqlDatasourceProcessor<\n  K extends string,\n  F extends Record<string, unknown>,\n  DS extends SubqlCustomDatasource<K> = SubqlCustomDatasource<K>,\n  P extends Record<string, SecondLayerHandlerProcessorArray<K, F, any, DS>> = Record<\n    string,\n    SecondLayerHandlerProcessorArray<K, F, any, DS>\n  >\n> = DsProcessor<DS, P, ApiWrapper>;\n\nexport interface IEthereumEndpointConfig extends IEndpointConfig {\n  /**\n   *  The JSON RPC batch size, if this is set to 0 it will not use batch requests\n   * */\n  batchSize?: number;\n}\n\n/**\n * Represents a Ethereum subquery network configuration, which is based on the CommonSubqueryNetworkConfig template.\n * @type {IProjectNetworkConfig}\n */\nexport type EthereumNetworkConfig = IProjectNetworkConfig<IEthereumEndpointConfig>;\n\n/**\n * Represents a Ethereum project configuration based on the CommonSubqueryProject template.\n * @type {CommonSubqueryProject<EthereumNetworkConfig, SubqlDatasource, RuntimeDatasourceTemplate | CustomDatasourceTemplate>}\n */\nexport type EthereumProject<DS extends SubqlDatasource = SubqlRuntimeDatasource> = CommonSubqueryProject<\n  EthereumNetworkConfig,\n  SubqlRuntimeDatasource | DS,\n  BaseTemplateDataSource<SubqlRuntimeDatasource> | BaseTemplateDataSource<DS>\n>;\n"]}