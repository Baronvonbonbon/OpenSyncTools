"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectManifestV1_0_0Impl = exports.DeploymentV1_0_0 = exports.ProjectNetworkV1_0_0 = exports.ProjectNetworkDeploymentV1_0_0 = exports.SubstrateRunnerSpecsImpl = exports.CustomDatasourceTemplateImpl = exports.RuntimeDatasourceTemplateImpl = exports.SubstrateCustomDataSourceImpl = exports.SubstrateRuntimeDataSourceImpl = exports.SubstrateRunnerNodeImpl = void 0;
const common_1 = require("@subql/common");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const models_1 = require("../../models");
const SUBSTRATE_NODE_NAME = `@subql/node`;
class SubstrateRunnerNodeImpl extends common_1.RunnerNodeImpl {
}
__decorate([
    (0, class_validator_1.Equals)(SUBSTRATE_NODE_NAME, { message: `Runner Substrate node name incorrect, suppose be '${SUBSTRATE_NODE_NAME}'` }),
    __metadata("design:type", String)
], SubstrateRunnerNodeImpl.prototype, "name", void 0);
exports.SubstrateRunnerNodeImpl = SubstrateRunnerNodeImpl;
function validateObject(object, errorMessage = 'failed to validate object.') {
    const errors = (0, class_validator_1.validateSync)(object, { whitelist: true, forbidNonWhitelisted: true });
    if (errors === null || errors === void 0 ? void 0 : errors.length) {
        const errorMsgs = errors.map((e) => e.toString()).join('\n');
        throw new Error(`${errorMessage}\n${errorMsgs}`);
    }
}
class SubstrateRuntimeDataSourceImpl extends models_1.RuntimeDataSourceBase {
    validate() {
        return validateObject(this, 'failed to validate runtime datasource.');
    }
}
exports.SubstrateRuntimeDataSourceImpl = SubstrateRuntimeDataSourceImpl;
class SubstrateCustomDataSourceImpl extends models_1.CustomDataSourceBase {
    validate() {
        return validateObject(this, 'failed to validate custom datasource.');
    }
}
exports.SubstrateCustomDataSourceImpl = SubstrateCustomDataSourceImpl;
class RuntimeDatasourceTemplateImpl extends SubstrateRuntimeDataSourceImpl {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], RuntimeDatasourceTemplateImpl.prototype, "name", void 0);
exports.RuntimeDatasourceTemplateImpl = RuntimeDatasourceTemplateImpl;
class CustomDatasourceTemplateImpl extends SubstrateCustomDataSourceImpl {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CustomDatasourceTemplateImpl.prototype, "name", void 0);
exports.CustomDatasourceTemplateImpl = CustomDatasourceTemplateImpl;
class SubstrateRunnerSpecsImpl {
}
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => SubstrateRunnerNodeImpl),
    __metadata("design:type", Object)
], SubstrateRunnerSpecsImpl.prototype, "node", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.RunnerQueryBaseModel),
    __metadata("design:type", Object)
], SubstrateRunnerSpecsImpl.prototype, "query", void 0);
exports.SubstrateRunnerSpecsImpl = SubstrateRunnerSpecsImpl;
class ProjectNetworkDeploymentV1_0_0 {
}
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_transformer_1.Transform)(({ value }) => value.trim()),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectNetworkDeploymentV1_0_0.prototype, "chainId", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.FileType),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", common_1.FileType)
], ProjectNetworkDeploymentV1_0_0.prototype, "chaintypes", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], ProjectNetworkDeploymentV1_0_0.prototype, "bypassBlocks", void 0);
exports.ProjectNetworkDeploymentV1_0_0 = ProjectNetworkDeploymentV1_0_0;
class ProjectNetworkV1_0_0 extends ProjectNetworkDeploymentV1_0_0 {
}
__decorate([
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], ProjectNetworkV1_0_0.prototype, "endpoint", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], ProjectNetworkV1_0_0.prototype, "dictionary", void 0);
exports.ProjectNetworkV1_0_0 = ProjectNetworkV1_0_0;
class DeploymentV1_0_0 {
}
__decorate([
    (0, class_transformer_1.Transform)((params) => {
        if (params.value.genesisHash && !params.value.chainId) {
            params.value.chainId = params.value.genesisHash;
        }
        return (0, class_transformer_1.plainToClass)(ProjectNetworkDeploymentV1_0_0, params.value);
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => ProjectNetworkDeploymentV1_0_0),
    __metadata("design:type", ProjectNetworkDeploymentV1_0_0)
], DeploymentV1_0_0.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], DeploymentV1_0_0.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => SubstrateRunnerSpecsImpl),
    __metadata("design:type", Object)
], DeploymentV1_0_0.prototype, "runner", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.FileType),
    __metadata("design:type", common_1.FileType)
], DeploymentV1_0_0.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => SubstrateCustomDataSourceImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: SubstrateRuntimeDataSourceImpl, name: 'substrate/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], DeploymentV1_0_0.prototype, "dataSources", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CustomDatasourceTemplateImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: RuntimeDatasourceTemplateImpl, name: 'substrate/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], DeploymentV1_0_0.prototype, "templates", void 0);
exports.DeploymentV1_0_0 = DeploymentV1_0_0;
class ProjectManifestV1_0_0Impl extends common_1.ProjectManifestBaseImpl {
    get deployment() {
        if (!this._deployment) {
            this._deployment = (0, class_transformer_1.plainToClass)(DeploymentV1_0_0, this);
            (0, class_validator_1.validateSync)(this._deployment, { whitelist: true });
        }
        return this._deployment;
    }
}
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    __metadata("design:type", String)
], ProjectManifestV1_0_0Impl.prototype, "specVersion", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => SubstrateCustomDataSourceImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: SubstrateRuntimeDataSourceImpl, name: 'substrate/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], ProjectManifestV1_0_0Impl.prototype, "dataSources", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => ProjectNetworkV1_0_0),
    __metadata("design:type", ProjectNetworkV1_0_0)
], ProjectManifestV1_0_0Impl.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestV1_0_0Impl.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestV1_0_0Impl.prototype, "version", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => common_1.FileType),
    __metadata("design:type", common_1.FileType)
], ProjectManifestV1_0_0Impl.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CustomDatasourceTemplateImpl, {
        discriminator: {
            property: 'kind',
            subTypes: [{ value: RuntimeDatasourceTemplateImpl, name: 'substrate/Runtime' }],
        },
        keepDiscriminatorProperty: true,
    }),
    __metadata("design:type", Array)
], ProjectManifestV1_0_0Impl.prototype, "templates", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => SubstrateRunnerSpecsImpl),
    __metadata("design:type", Object)
], ProjectManifestV1_0_0Impl.prototype, "runner", void 0);
exports.ProjectManifestV1_0_0Impl = ProjectManifestV1_0_0Impl;
//# sourceMappingURL=model.js.map