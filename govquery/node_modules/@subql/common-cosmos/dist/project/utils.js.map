{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/project/utils.ts"],"names":[],"mappings":";AAAA,iEAAiE;AACjE,mCAAmC;;;;;;;;;AAiBnC,4CAIC;AAED,8CAIC;AAID,0DAIC;AAED,sEAIC;AAED,8DAIC;AAED,0DAIC;AAED,8CAKC;AAzDD,sDAU6B;AAC7B,qDAAuG;AACvG,mCAA2B;AAE3B,SAAgB,gBAAgB,CAC9B,EAA+D;IAE/D,OAAO,EAAE,CAAC,IAAI,KAAK,mCAAoB,CAAC,OAAO,IAAI,CAAC,CAAE,EAAqC,CAAC,SAAS,CAAC;AACxG,CAAC;AAED,SAAgB,iBAAiB,CAC/B,EAA+D;IAE/D,OAAO,EAAE,CAAC,IAAI,KAAK,mCAAoB,CAAC,OAAO,CAAC;AAClD,CAAC;AAID,SAAgB,uBAAuB,CACrC,EAA+E;IAE/E,OAAO,EAAE,CAAC,eAAe,KAAK,gCAAiB,CAAC,KAAK,CAAC;AACxD,CAAC;AAED,SAAgB,6BAA6B,CAC3C,EAA+E;IAE/E,OAAO,EAAE,CAAC,eAAe,KAAK,gCAAiB,CAAC,WAAW,CAAC;AAC9D,CAAC;AAED,SAAgB,yBAAyB,CACvC,EAA+E;IAE/E,OAAO,EAAE,CAAC,eAAe,KAAK,gCAAiB,CAAC,OAAO,CAAC;AAC1D,CAAC;AAED,SAAgB,uBAAuB,CACrC,EAA+E;IAE/E,OAAO,EAAE,CAAC,eAAe,KAAK,gCAAiB,CAAC,KAAK,CAAC;AACxD,CAAC;AAED,SAAgB,iBAAiB,CAC/B,aAAkB,EAClB,WAAmB;IAEnB,OAAO,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAA,YAAG,EAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAClH,CAAC;AAGM,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,QAAQ,CAAC,KAAiC;QACxC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,aAA4B,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC;IACjH,CAAC;IACD,cAAc,CAAC,IAAyB;QACtC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC;IACtE,CAAC;IAEO,oBAAoB,CAAC,aAA4B;QACvD,OAAO,OAAO,aAAa,KAAK,QAAQ,IAAI,MAAM,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,CAAC;IAChH,CAAC;CACF,CAAA;AAdY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,qCAAmB,EAAC,EAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC;GAChD,gBAAgB,CAc5B","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {FileReference, BaseTemplateDataSource} from '@subql/types-core';\nimport {\n  SecondLayerHandlerProcessor,\n  CosmosCustomDatasource,\n  CosmosDatasource,\n  CosmosDatasourceKind,\n  CosmosHandlerKind,\n  CosmosRuntimeDatasource,\n  CustomDatasourceTemplate,\n  RuntimeDatasourceTemplate,\n  SecondLayerHandlerProcessorArray,\n} from '@subql/types-cosmos';\nimport {ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface} from 'class-validator';\nimport {gte} from 'semver';\n\nexport function isCustomCosmosDs(\n  ds: CosmosDatasource | BaseTemplateDataSource<CosmosDatasource>\n): ds is CosmosCustomDatasource<string> {\n  return ds.kind !== CosmosDatasourceKind.Runtime && !!(ds as CosmosCustomDatasource<string>).processor;\n}\n\nexport function isRuntimeCosmosDs(\n  ds: CosmosDatasource | BaseTemplateDataSource<CosmosDatasource>\n): ds is CosmosRuntimeDatasource {\n  return ds.kind === CosmosDatasourceKind.Runtime;\n}\n\ntype DefaultFilter = Record<string, unknown>;\n\nexport function isBlockHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessorArray<CosmosHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<CosmosHandlerKind.Block, DefaultFilter, E> {\n  return hp.baseHandlerKind === CosmosHandlerKind.Block;\n}\n\nexport function isTransactionHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessorArray<CosmosHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<CosmosHandlerKind.Transaction, DefaultFilter, E> {\n  return hp.baseHandlerKind === CosmosHandlerKind.Transaction;\n}\n\nexport function isMessageHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessorArray<CosmosHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<CosmosHandlerKind.Message, DefaultFilter, E> {\n  return hp.baseHandlerKind === CosmosHandlerKind.Message;\n}\n\nexport function isEventHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessorArray<CosmosHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<CosmosHandlerKind.Event, DefaultFilter, E> {\n  return hp.baseHandlerKind === CosmosHandlerKind.Event;\n}\n\nexport function isCosmosTemplates(\n  templatesData: any,\n  specVersion: string\n): templatesData is (RuntimeDatasourceTemplate | CustomDatasourceTemplate)[] {\n  return (isRuntimeCosmosDs(templatesData[0]) || isCustomCosmosDs(templatesData[0])) && gte(specVersion, '0.2.1');\n}\n\n@ValidatorConstraint({name: 'isFileReference', async: false})\nexport class FileReferenceImp implements ValidatorConstraintInterface {\n  validate(value: Map<string, FileReference>): boolean {\n    if (!value) {\n      return false;\n    }\n    return !!Object.values(value).find((fileReference: FileReference) => this.isValidFileReference(fileReference));\n  }\n  defaultMessage(args: ValidationArguments): string {\n    return `${JSON.stringify(args.value)} is not a valid assets format`;\n  }\n\n  private isValidFileReference(fileReference: FileReference): boolean {\n    return typeof fileReference === 'object' && 'file' in fileReference && typeof fileReference.file === 'string';\n  }\n}\n"]}