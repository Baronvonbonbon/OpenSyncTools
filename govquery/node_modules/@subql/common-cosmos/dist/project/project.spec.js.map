{"version":3,"file":"project.spec.js","sourceRoot":"","sources":["../../src/project/project.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport path from 'path';\nimport {getManifestPath, loadFromJsonOrYaml} from '@subql/common';\nimport {validateCosmosManifest} from '../codegen/util';\nimport {parseCosmosProjectManifest} from './load';\nimport {CosmosProjectManifestVersioned, VersionedProjectManifest} from './versioned';\n\nconst projectsDir = path.join(__dirname, '../../test');\n\nfunction loadCosmosProjectManifest(file: string): CosmosProjectManifestVersioned {\n  const doc = loadFromJsonOrYaml(getManifestPath(file));\n  const projectManifest = new CosmosProjectManifestVersioned(doc as VersionedProjectManifest);\n  projectManifest.validate();\n  return projectManifest;\n}\n\ndescribe('project.yaml', () => {\n  it('can validate a v1.0.0 project.yaml', () => {\n    expect(() => loadCosmosProjectManifest(path.join(projectsDir, 'project_1.0.0.yaml'))).not.toThrow();\n  });\n\n  it('can validate a v1.0.0 project.yaml with unsupported runner node', () => {\n    expect(() => loadCosmosProjectManifest(path.join(projectsDir, 'project_1.0.0_bad_runner.yaml'))).toThrow();\n  });\n  it('assets should be validated', () => {\n    expect(() =>\n      loadCosmosProjectManifest(path.join(projectsDir, 'protoTest1', 'cosmwasm-project.yaml'))\n    ).not.toThrow();\n  });\n  it('Should throw on invalid FileReference on asset', () => {\n    expect(() =>\n      loadCosmosProjectManifest(path.join(projectsDir, 'protoTest1', 'bad-abi-cosmos-project.yaml'))\n    ).toThrow('- property dataSources[0].assets has failed the following constraints: isFileReference');\n  });\n  it('Ensure correctness on Cosmos Manifest validate', () => {\n    const cosmosManifest = loadFromJsonOrYaml(path.join(projectsDir, './protoTest1', 'project.yaml')) as any;\n    const ethManifest = loadFromJsonOrYaml(path.join(projectsDir, 'project_1.0.0_bad_runner.yaml')) as any;\n    expect(validateCosmosManifest(cosmosManifest)).toBe(true);\n    expect(validateCosmosManifest(ethManifest)).toBe(false);\n  });\n  it('Validate incorrect chaintypes', () => {\n    const cosmosManifest = loadFromJsonOrYaml(\n      path.join(projectsDir, './protoTest1', 'bad-chaintypes-project.yaml')\n    ) as any;\n    expect(() => parseCosmosProjectManifest(cosmosManifest)).toThrow(\n      'Failed to parse project. Please see below for more information'\n    );\n  });\n  it('Ensure chaintypes existence on manifest deployment', () => {\n    const cosmosManifest = loadFromJsonOrYaml(path.join(projectsDir, './protoTest1', 'project.yaml')) as any;\n    const manifest = parseCosmosProjectManifest(cosmosManifest);\n    expect(manifest.asImpl.network.chaintypes?.size).toBeGreaterThan(0);\n  });\n});\n"]}