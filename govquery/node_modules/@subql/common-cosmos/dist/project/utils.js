"use strict";
// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileReferenceImp = void 0;
exports.isCustomCosmosDs = isCustomCosmosDs;
exports.isRuntimeCosmosDs = isRuntimeCosmosDs;
exports.isBlockHandlerProcessor = isBlockHandlerProcessor;
exports.isTransactionHandlerProcessor = isTransactionHandlerProcessor;
exports.isMessageHandlerProcessor = isMessageHandlerProcessor;
exports.isEventHandlerProcessor = isEventHandlerProcessor;
exports.isCosmosTemplates = isCosmosTemplates;
const types_cosmos_1 = require("@subql/types-cosmos");
const class_validator_1 = require("class-validator");
const semver_1 = require("semver");
function isCustomCosmosDs(ds) {
    return ds.kind !== types_cosmos_1.CosmosDatasourceKind.Runtime && !!ds.processor;
}
function isRuntimeCosmosDs(ds) {
    return ds.kind === types_cosmos_1.CosmosDatasourceKind.Runtime;
}
function isBlockHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_cosmos_1.CosmosHandlerKind.Block;
}
function isTransactionHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_cosmos_1.CosmosHandlerKind.Transaction;
}
function isMessageHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_cosmos_1.CosmosHandlerKind.Message;
}
function isEventHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_cosmos_1.CosmosHandlerKind.Event;
}
function isCosmosTemplates(templatesData, specVersion) {
    return (isRuntimeCosmosDs(templatesData[0]) || isCustomCosmosDs(templatesData[0])) && (0, semver_1.gte)(specVersion, '0.2.1');
}
let FileReferenceImp = class FileReferenceImp {
    validate(value) {
        if (!value) {
            return false;
        }
        return !!Object.values(value).find((fileReference) => this.isValidFileReference(fileReference));
    }
    defaultMessage(args) {
        return `${JSON.stringify(args.value)} is not a valid assets format`;
    }
    isValidFileReference(fileReference) {
        return typeof fileReference === 'object' && 'file' in fileReference && typeof fileReference.file === 'string';
    }
};
exports.FileReferenceImp = FileReferenceImp;
exports.FileReferenceImp = FileReferenceImp = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isFileReference', async: false })
], FileReferenceImp);
//# sourceMappingURL=utils.js.map