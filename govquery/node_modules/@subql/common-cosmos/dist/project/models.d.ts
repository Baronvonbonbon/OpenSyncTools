import { BaseDataSource } from '@subql/common';
import { FileReference, Processor } from '@subql/types-core';
import { CosmosEventFilter, CosmosHandlerKind, CosmosCustomHandler, CosmosMapping, CosmosHandler, CosmosRuntimeHandler, CosmosRuntimeDatasource, CosmosDatasourceKind, CosmosCustomDatasource, CustomDataSourceAsset, CosmosBlockFilter, CosmosBlockHandler, CosmosEventHandler, CosmosMessageFilter, CosmosTransactionHandler, CosmosMessageHandler, CustomModule, CosmosTxFilter } from '@subql/types-cosmos';
export declare class BlockFilter implements CosmosBlockFilter {
    modulo?: number;
    timestamp?: string;
}
export declare class TxFilter implements CosmosTxFilter {
    includeFailedTx?: boolean;
}
export declare class MessageFilter extends TxFilter implements CosmosMessageFilter {
    type: string;
    values?: {
        [key: string]: string;
    };
    contractCall?: string;
}
export declare class EventFilter implements CosmosEventFilter {
    type: string;
    messageFilter?: CosmosMessageFilter;
    attributes?: Record<string, string | number>;
}
export declare class BlockHandler implements CosmosBlockHandler {
    kind: CosmosHandlerKind.Block;
    handler: string;
    filter?: CosmosBlockFilter;
}
export declare class TransactionHandler implements CosmosTransactionHandler {
    kind: CosmosHandlerKind.Transaction;
    handler: string;
}
export declare class MessageHandler implements CosmosMessageHandler {
    kind: CosmosHandlerKind.Message;
    handler: string;
    filter?: CosmosMessageFilter;
}
export declare class EventHandler implements CosmosEventHandler {
    filter?: CosmosEventFilter;
    kind: CosmosHandlerKind.Event;
    handler: string;
}
export declare class CustomHandler implements CosmosCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class RuntimeMapping implements CosmosMapping {
    handlers: CosmosHandler[];
    file: string;
}
export declare class CustomMapping implements CosmosMapping<CosmosCustomHandler> {
    handlers: CosmosCustomHandler[];
    file: string;
}
export declare class CosmosProcessorOptions implements CosmosProcessorOptions {
    abi?: string;
}
export declare class CosmosRuntimeDataSourceBase<M extends CosmosMapping<CosmosRuntimeHandler>> extends BaseDataSource implements CosmosRuntimeDatasource<M> {
    kind: CosmosDatasourceKind.Runtime;
    mapping: M;
    assets?: Map<string, FileReference>;
    options?: CosmosProcessorOptions;
}
export declare class CosmosFileReferenceImpl implements FileReference {
    file: string;
}
export declare class CosmosCustomModuleImpl implements CustomModule {
    file: string;
    messages: string[];
}
export declare class CosmosCustomDataSourceBase<K extends string, M extends CosmosMapping = CosmosMapping<CosmosCustomHandler>, O = any> extends BaseDataSource implements CosmosCustomDatasource<K, M, O> {
    kind: K;
    mapping: M;
    assets: Map<string, CustomDataSourceAsset>;
    processor: Processor<O>;
}
