{"version":3,"file":"ProjectManifestVersioned.js","sourceRoot":"","sources":["../../../src/project/versioned/ProjectManifestVersioned.ts"],"names":[],"mappings":";AAAA,iEAAiE;AACjE,mCAAmC;;;AAiBnC,4CAEC;AAhBD,yDAAkD;AAElD,qCAAmD;AAInD,MAAM,kBAAkB,GAAG;IACzB,OAAO,EAAE,kCAAyB;CACnC,CAAC;AAMF,SAAgB,gBAAgB,CAAC,QAAgC;IAC/D,OAAO,QAAQ,CAAC,WAAW,KAAK,OAAO,CAAC;AAC1C,CAAC;AAED,MAAa,8BAA8B;IACjC,KAAK,CAAuB;IAEpC,YAAY,eAAyC;QACnD,MAAM,KAAK,GAAG,kBAAkB,CAAC,eAAe,CAAC,WAAuB,CAAC,CAAC;QAC1E,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,IAAA,mCAAe,EAAiD,KAAK,EAAE,eAAe,CAAC,CAAC;IACvG,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,WAAW,KAAK,OAAO,CAAC;IACtC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAkC,CAAC;IACjD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;IAChC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;IAC/B,CAAC;CACF;AAlDD,wEAkDC","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {CosmosDatasource} from '@subql/types-cosmos';\nimport {plainToInstance} from 'class-transformer';\nimport {ICosmosProjectManifest} from '../types';\nimport {ProjectManifestV1_0_0Impl} from './v1_0_0';\n\nexport type VersionedProjectManifest = {specVersion: string};\n\nconst SUPPORTED_VERSIONS = {\n  '1.0.0': ProjectManifestV1_0_0Impl,\n};\n\ntype Versions = keyof typeof SUPPORTED_VERSIONS;\n\nexport type ProjectManifestImpls = InstanceType<(typeof SUPPORTED_VERSIONS)[Versions]>;\n\nexport function manifestIsV1_0_0(manifest: ICosmosProjectManifest): manifest is ProjectManifestV1_0_0Impl {\n  return manifest.specVersion === '1.0.0';\n}\n\nexport class CosmosProjectManifestVersioned implements ICosmosProjectManifest {\n  private _impl: ProjectManifestImpls;\n\n  constructor(projectManifest: VersionedProjectManifest) {\n    const klass = SUPPORTED_VERSIONS[projectManifest.specVersion as Versions];\n    if (!klass) {\n      throw new Error('specVersion not supported for project manifest file');\n    }\n    this._impl = plainToInstance<ProjectManifestImpls, VersionedProjectManifest>(klass, projectManifest);\n  }\n\n  get asImpl(): ProjectManifestImpls {\n    return this._impl;\n  }\n\n  get isV1_0_0(): boolean {\n    return this.specVersion === '1.0.0';\n  }\n\n  get asV1_0_0(): ProjectManifestV1_0_0Impl {\n    return this._impl as ProjectManifestV1_0_0Impl;\n  }\n\n  toDeployment(): string {\n    return this._impl.deployment.toYaml();\n  }\n\n  validate(): void {\n    return this._impl.validate();\n  }\n\n  get dataSources(): CosmosDatasource[] {\n    return this._impl.dataSources;\n  }\n\n  get schema(): string {\n    return this._impl.schema.file;\n  }\n\n  get specVersion(): string {\n    return this._impl.specVersion;\n  }\n\n  get description(): string | undefined {\n    return this._impl.description;\n  }\n\n  get repository(): string | undefined {\n    return this._impl.repository;\n  }\n}\n"]}