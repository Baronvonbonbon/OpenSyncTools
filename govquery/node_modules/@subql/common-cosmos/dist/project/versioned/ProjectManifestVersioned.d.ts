import { CosmosDatasource } from '@subql/types-cosmos';
import { ICosmosProjectManifest } from '../types';
import { ProjectManifestV1_0_0Impl } from './v1_0_0';
export type VersionedProjectManifest = {
    specVersion: string;
};
declare const SUPPORTED_VERSIONS: {
    '1.0.0': typeof ProjectManifestV1_0_0Impl;
};
type Versions = keyof typeof SUPPORTED_VERSIONS;
export type ProjectManifestImpls = InstanceType<(typeof SUPPORTED_VERSIONS)[Versions]>;
export declare function manifestIsV1_0_0(manifest: ICosmosProjectManifest): manifest is ProjectManifestV1_0_0Impl;
export declare class CosmosProjectManifestVersioned implements ICosmosProjectManifest {
    private _impl;
    constructor(projectManifest: VersionedProjectManifest);
    get asImpl(): ProjectManifestImpls;
    get isV1_0_0(): boolean;
    get asV1_0_0(): ProjectManifestV1_0_0Impl;
    toDeployment(): string;
    validate(): void;
    get dataSources(): CosmosDatasource[];
    get schema(): string;
    get specVersion(): string;
    get description(): string | undefined;
    get repository(): string | undefined;
}
export {};
