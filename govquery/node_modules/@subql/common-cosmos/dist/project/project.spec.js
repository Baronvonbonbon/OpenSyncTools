"use strict";
// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const common_1 = require("@subql/common");
const util_1 = require("../codegen/util");
const load_1 = require("./load");
const versioned_1 = require("./versioned");
const projectsDir = path_1.default.join(__dirname, '../../test');
function loadCosmosProjectManifest(file) {
    const doc = (0, common_1.loadFromJsonOrYaml)((0, common_1.getManifestPath)(file));
    const projectManifest = new versioned_1.CosmosProjectManifestVersioned(doc);
    projectManifest.validate();
    return projectManifest;
}
describe('project.yaml', () => {
    it('can validate a v1.0.0 project.yaml', () => {
        expect(() => loadCosmosProjectManifest(path_1.default.join(projectsDir, 'project_1.0.0.yaml'))).not.toThrow();
    });
    it('can validate a v1.0.0 project.yaml with unsupported runner node', () => {
        expect(() => loadCosmosProjectManifest(path_1.default.join(projectsDir, 'project_1.0.0_bad_runner.yaml'))).toThrow();
    });
    it('assets should be validated', () => {
        expect(() => loadCosmosProjectManifest(path_1.default.join(projectsDir, 'protoTest1', 'cosmwasm-project.yaml'))).not.toThrow();
    });
    it('Should throw on invalid FileReference on asset', () => {
        expect(() => loadCosmosProjectManifest(path_1.default.join(projectsDir, 'protoTest1', 'bad-abi-cosmos-project.yaml'))).toThrow('- property dataSources[0].assets has failed the following constraints: isFileReference');
    });
    it('Ensure correctness on Cosmos Manifest validate', () => {
        const cosmosManifest = (0, common_1.loadFromJsonOrYaml)(path_1.default.join(projectsDir, './protoTest1', 'project.yaml'));
        const ethManifest = (0, common_1.loadFromJsonOrYaml)(path_1.default.join(projectsDir, 'project_1.0.0_bad_runner.yaml'));
        expect((0, util_1.validateCosmosManifest)(cosmosManifest)).toBe(true);
        expect((0, util_1.validateCosmosManifest)(ethManifest)).toBe(false);
    });
    it('Validate incorrect chaintypes', () => {
        const cosmosManifest = (0, common_1.loadFromJsonOrYaml)(path_1.default.join(projectsDir, './protoTest1', 'bad-chaintypes-project.yaml'));
        expect(() => (0, load_1.parseCosmosProjectManifest)(cosmosManifest)).toThrow('Failed to parse project. Please see below for more information');
    });
    it('Ensure chaintypes existence on manifest deployment', () => {
        const cosmosManifest = (0, common_1.loadFromJsonOrYaml)(path_1.default.join(projectsDir, './protoTest1', 'project.yaml'));
        const manifest = (0, load_1.parseCosmosProjectManifest)(cosmosManifest);
        expect(manifest.asImpl.network.chaintypes?.size).toBeGreaterThan(0);
    });
});
//# sourceMappingURL=project.spec.js.map