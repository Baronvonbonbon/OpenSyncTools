{"version":3,"file":"codegen-controller.js","sourceRoot":"","sources":["../../src/codegen/codegen-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport cosmwasmCodegen from '@cosmwasm/ts-codegen';\nimport {makeTempDir} from '@subql/common';\nimport {ProjectManifestV1_0_0} from '@subql/types-core/dist/project/versioned/v1_0_0/types';\nimport {\n  CosmosChaintypes,\n  CustomModule,\n  CosmosRuntimeDatasource,\n  CosmosProjectManifestV1_0_0,\n} from '@subql/types-cosmos';\nimport telescope from '@subql/x-cosmology-telescope';\nimport {Data} from 'ejs';\nimport {copySync} from 'fs-extra';\nimport {upperFirst} from 'lodash';\nimport {IDLObject} from 'wasm-ast-types';\nimport {isRuntimeCosmosDs} from '../project';\nimport {COSMWASM_OPTS, TELESCOPE_OPTS} from './constants';\nimport {loadCosmwasmAbis, tmpProtoDir, validateCosmosManifest} from './util';\n\nconst TYPE_ROOT_DIR = 'src/types';\n\n// Proto to ts\nconst PROTO_INTERFACES_ROOT_DIR = 'src/types/proto-interfaces';\nconst PROTO_INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../../templates/proto-interface.ts.ejs');\n\n// CosmWasm to ts\nconst COSMWASM_INTERFACES_ROOT_DIR = 'src/types/cosmwasm-interfaces';\nconst COSMWASM_INTERFACE_WRAPPER_PATH = '/src/types/cosmwasm-interface-wrappers';\nconst COSMWASM_INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../../templates/cosmwasm-interfaces.ts.ejs');\n\ninterface ProtobufRenderProps {\n  /**\n   * The dot notation format of the path without PROTO dir\n   * @exmaple\n   * 'cosmos.auth.v1beta1.tx'\n   * */\n  namespace: string;\n  /**\n   * The camel case format of the path without PROTO dir\n   * @example\n   * 'CosmosAuthV1Beta1Tx'\n   * */\n  name: string;\n  messageNames: string[]; // all messages\n  path: string; // should process the file Path and concat with PROTO dir\n}\ntype CosmosChainTypeDataType = CosmosChaintypes | Record<string, CustomModule>;\n\ninterface CosmwasmRenderJobType {\n  contract: string;\n  messages: Record<string, string>;\n}\n\nexport function processProtoFilePath(path: string): string {\n  // removes `./proto` and `.proto` suffix, converts all `.` to `/`\n  // should be able to accept more paths, not just from `proto directory`\n  return `./proto-interfaces/${path.replace(/^\\.\\/proto\\/|\\.proto$/g, '').replace(/\\./g, '/')}`;\n}\n\nfunction pathToNamespace(path: string): string {\n  return path\n    .replace(/^\\.\\/proto\\/|\\.proto$/g, '')\n    .split(/(?<=\\\\\\\\)\\/|(?<!\\\\)\\//)\n    .join('.');\n}\n\nfunction pathToName(path: string): string {\n  return pathToNamespace(path)\n    .split('.')\n    .map((p) => upperFirst(p))\n    .join('');\n}\n\nexport function isProtoPath(filePath: string, projectPath: string): boolean {\n  // check if the protobuf files are under ./proto directory\n  return !!path.join(projectPath, filePath).startsWith(path.join(projectPath, './proto/'));\n}\n\nexport function prepareCosmwasmJobs(\n  sortedAssets: Record<string, string>,\n  loadReadAbi: (filePath: string) => IDLObject,\n  upperFirst: (input?: string) => string\n): CosmwasmRenderJobType[] {\n  return Object.keys(sortedAssets).map((key) => {\n    const value = sortedAssets[key];\n    const readContract = loadReadAbi(value);\n    const msgObject: Record<string, string> = {\n      MsgInstantiateContract: upperFirst(readContract.instantiate?.title),\n      MsgMigrateContract: upperFirst(readContract.migrate?.title),\n      MsgExecuteContract: upperFirst(readContract.execute?.title),\n    };\n\n    const cleanObject: Record<string, string> = {};\n\n    for (const key in msgObject) {\n      if (msgObject[key]) {\n        cleanObject[key] = msgObject[key];\n      }\n    }\n\n    return {\n      contract: upperFirst(key),\n      messages: cleanObject,\n    };\n  });\n}\n\nexport function prepareSortedAssets(\n  datasources: CosmosRuntimeDatasource[],\n  projectPath: string\n): Record<string, string> {\n  const sortedAssets: Record<string, string> = {};\n  datasources\n    .filter((d) => !!d?.assets && isRuntimeCosmosDs(d))\n    .forEach((d) => {\n      if (!d.assets) return;\n      Object.entries(d.assets).map(([name, value]) => {\n        const filePath = path.join(projectPath, value.file);\n        if (!fs.existsSync(filePath)) {\n          throw new Error(`Error: Asset ${name}, file ${value.file} does not exist`);\n        }\n        // using name provided in assets\n        sortedAssets[name] = filePath;\n      });\n    });\n  return sortedAssets;\n}\n\nexport async function generateCosmwasm(\n  datasources: CosmosRuntimeDatasource[],\n  projectPath: string,\n  prepareDirPath: (path: string, recreate: boolean) => Promise<void>,\n  upperFirst: (input?: string) => string,\n  renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>\n): Promise<void> {\n  const sortedAssets = prepareSortedAssets(datasources, projectPath);\n\n  if (Object.keys(sortedAssets).length === 0) {\n    return prepareDirPath(path.join(projectPath, COSMWASM_INTERFACES_ROOT_DIR), false);\n  }\n  await Promise.all([\n    prepareDirPath(path.join(projectPath, COSMWASM_INTERFACES_ROOT_DIR), true),\n    prepareDirPath(path.join(projectPath, COSMWASM_INTERFACE_WRAPPER_PATH), true),\n  ]);\n\n  try {\n    await cosmwasmCodegen(\n      COSMWASM_OPTS(\n        path.join(projectPath, COSMWASM_INTERFACES_ROOT_DIR),\n        Object.entries(sortedAssets).map(([name, dir]) => ({name, dir: path.dirname(dir)}))\n      )\n    );\n    const renderJobs = prepareCosmwasmJobs(sortedAssets, loadCosmwasmAbis, upperFirst);\n\n    await Promise.all(\n      renderJobs.map((job) => {\n        console.log('Cosmwasm types generated');\n        return renderTemplate(\n          COSMWASM_INTERFACE_TEMPLATE_PATH,\n          path.join(projectPath, COSMWASM_INTERFACE_WRAPPER_PATH, `${job.contract}MsgWrapper.ts`),\n          {\n            props: {abi: job},\n            helper: {upperFirst},\n          }\n        );\n      })\n    );\n  } catch (e: any) {\n    console.error(\n      `! Unable to generate from provided cosmwasm interface. ${e.message}\\n` +\n        'Please check the path of your abi path in the project.yaml'\n    );\n  }\n}\n\nexport function prepareProtobufRenderProps(\n  chaintypes: (CosmosChainTypeDataType | undefined)[] | undefined,\n  projectPath: string\n): ProtobufRenderProps[] {\n  if (!chaintypes) {\n    return [];\n  }\n  return chaintypes\n    .filter((v) => v !== undefined)\n    .flatMap((chaintype) => {\n      return Object.entries(chaintype)\n        .map(([key, value]) => {\n          const filePath = path.join(projectPath, value.file);\n          if (!fs.existsSync(filePath)) {\n            throw new Error(`Error: chainType ${key}, file ${value.file} does not exist`);\n          }\n          if (!isProtoPath(value.file, projectPath)) {\n            console.error(\n              `Codegen will not apply for this file: ${value.file} Please ensure it is under the ./proto directory if you want to run codegen on it`\n            );\n          }\n\n          // We only need to generate for RPC messages that are always prefixed with Msg\n          const messages = value.messages.filter((m: string) => m.indexOf('Msg') === 0);\n          if (!messages.length) return;\n\n          return {\n            messageNames: messages,\n            namespace: pathToNamespace(value.file),\n            name: pathToName(value.file),\n            path: processProtoFilePath(value.file),\n          };\n        })\n        .filter((v) => v !== undefined);\n    });\n}\n\n/**\n * Makes a temporaray directory and populates it with some core protobufs used by all projects, then copies over the projects protobufs\n * */\nexport async function tempProtoDir(projectPath: string): Promise<string> {\n  const tmpDir = await makeTempDir();\n  const userProto = path.join(projectPath, './proto');\n  const commonProtoPaths = [\n    require('@protobufs/amino'),\n    require('@protobufs/confio'),\n    require('@protobufs/cosmos'),\n    require('@protobufs/cosmos_proto'),\n    require('@protobufs/cosmwasm'),\n    require('@protobufs/gogoproto'),\n    require('@protobufs/google'),\n    require('@protobufs/ibc'),\n    require('@protobufs/tendermint'),\n  ];\n\n  commonProtoPaths.forEach((p) => {\n    // ensure output format is a dir\n    copySync(p, tmpProtoDir(tmpDir, p));\n  });\n  copySync(userProto, tmpDir, {overwrite: true});\n  return tmpDir;\n}\n\nexport async function generateProto(\n  chaintypes: CosmosChainTypeDataType[],\n  projectPath: string,\n  prepareDirPath: (path: string, recreate: boolean) => Promise<void>,\n  renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>,\n  upperFirst: (string?: string) => string\n): Promise<void> {\n  let tmpPath = '';\n  try {\n    tmpPath = await tempProtoDir(projectPath);\n    const protobufRenderProps = prepareProtobufRenderProps(chaintypes, projectPath);\n    const outputPath = path.join(projectPath, PROTO_INTERFACES_ROOT_DIR);\n    await prepareDirPath(path.join(projectPath, PROTO_INTERFACES_ROOT_DIR), true);\n\n    await telescope({\n      protoDirs: [tmpPath],\n      outPath: outputPath,\n      options: TELESCOPE_OPTS,\n    });\n    console.log('* Protobuf types generated !');\n\n    await renderTemplate(\n      PROTO_INTERFACE_TEMPLATE_PATH,\n      path.join(projectPath, TYPE_ROOT_DIR, 'CosmosMessageTypes.ts'),\n      {\n        props: {proto: protobufRenderProps},\n        helper: {upperFirst},\n      }\n    );\n    console.log('* Cosmos message wrappers generated !');\n  } catch (e: any) {\n    const errorMessage = e.message.startsWith('Dependency')\n      ? `Please add the missing protobuf file to ./proto directory`\n      : '';\n    console.log('ERRROR', e);\n    throw new Error(`Failed to generate from protobufs. ${e.message}, ${errorMessage}`);\n  } finally {\n    if (tmpPath !== '') {\n      fs.rmSync(tmpPath, {recursive: true, force: true});\n    }\n  }\n}\n\n/**\n * Generates typescript interfaces from proto files and cosmwasm abis\n * @param manifest\n * @param projectPath\n * @param prepareDirPath\n * @param renderTemplate\n * @param upperFirst\n * @param datasources\n */\nexport async function projectCodegen(\n  manifest: ProjectManifestV1_0_0[],\n  projectPath: string,\n  prepareDirPath: (path: string, recreate: boolean) => Promise<void>,\n  renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>,\n  upperFirst: (string?: string) => string,\n  datasources: CosmosRuntimeDatasource[]\n): Promise<void> {\n  const chainTypes = getChaintypes(manifest);\n  if (chainTypes.length) {\n    await generateProto(chainTypes, projectPath, prepareDirPath, renderTemplate, upperFirst);\n  }\n  await generateCosmwasm(datasources, projectPath, prepareDirPath, upperFirst, renderTemplate);\n}\n\nfunction getChaintypes(manifest: ProjectManifestV1_0_0[]): CosmosChainTypeDataType[] {\n  return manifest\n    .filter((m) => validateCosmosManifest(m))\n    .map((m) => (m as CosmosProjectManifestV1_0_0).network.chaintypes)\n    .filter((value) => value !== undefined)\n    .filter((value) => Object.keys(value).length !== 0);\n}\n"]}