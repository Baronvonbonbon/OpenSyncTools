{"version":3,"file":"codegen-controller.spec.js","sourceRoot":"","sources":["../../src/codegen/codegen-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// // Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {CosmosRuntimeDatasource} from '@subql/types-cosmos';\nimport ejs from 'ejs';\nimport {upperFirst} from 'lodash';\nimport rimraf from 'rimraf';\nimport {\n  isProtoPath,\n  prepareCosmwasmJobs,\n  prepareProtobufRenderProps,\n  prepareSortedAssets,\n  processProtoFilePath,\n  tempProtoDir,\n} from './codegen-controller';\nimport {loadCosmwasmAbis, tmpProtoDir} from './util';\n\nconst PROJECT_PATH = path.join(__dirname, '../../test/protoTest1');\nconst describeIf = (condition: boolean, ...args: Parameters<typeof describe>) =>\n  // eslint-disable-next-line jest/valid-describe-callback, jest/valid-title, jest/no-disabled-tests\n  condition ? describe(...args) : describe.skip(...args);\n\ndescribe('Codegen cosmos', () => {\n  describe('Protobuf to ts', () => {\n    it('process protobuf file paths', () => {\n      const p = './proto/cosmos/osmosis/poolmanager/v1beta1/swap_route.proto';\n      expect(processProtoFilePath(p)).toBe('./proto-interfaces/cosmos/osmosis/poolmanager/v1beta1/swap_route');\n    });\n    it('should output correct protobuf render props', () => {\n      const mockChainTypes = [\n        {\n          'osmosis.gamm.v1beta1': {\n            file: './proto/osmosis/gamm/v1beta1/tx.proto',\n\n            messages: ['MsgSwapExactAmountIn'],\n          },\n        },\n        {\n          'osmosis.poolmanager.v1beta1': {\n            file: './proto/osmosis/poolmanager/v1beta1/swap_route.proto',\n            messages: ['MsgSwapAmountInRoute'],\n          },\n        },\n      ] as any;\n      expect(prepareProtobufRenderProps(mockChainTypes, PROJECT_PATH)).toStrictEqual([\n        {\n          messageNames: ['MsgSwapExactAmountIn'],\n          namespace: 'osmosis.gamm.v1beta1.tx',\n          name: 'OsmosisGammV1beta1Tx',\n          path: './proto-interfaces/osmosis/gamm/v1beta1/tx',\n        },\n        {\n          messageNames: ['MsgSwapAmountInRoute'],\n          namespace: 'osmosis.poolmanager.v1beta1.swap_route',\n          name: 'OsmosisPoolmanagerV1beta1Swap_route',\n          path: './proto-interfaces/osmosis/poolmanager/v1beta1/swap_route',\n        },\n      ]);\n    });\n    it('prepareProtobufRenderProps should handle undefined and array undefined', () => {\n      const mixedMockChainTypes = [\n        {\n          'osmosis.poolmanager.v1beta1': {\n            file: './proto/osmosis/poolmanager/v1beta1/swap_route.proto',\n            messages: ['MsgSwapAmountInRoute'],\n          },\n        },\n        undefined,\n      ];\n      expect(prepareProtobufRenderProps(mixedMockChainTypes, PROJECT_PATH)).toStrictEqual([\n        {\n          messageNames: ['MsgSwapAmountInRoute'],\n          name: 'OsmosisPoolmanagerV1beta1Swap_route',\n          namespace: 'osmosis.poolmanager.v1beta1.swap_route',\n          path: './proto-interfaces/osmosis/poolmanager/v1beta1/swap_route',\n        },\n      ]);\n      expect(prepareProtobufRenderProps(undefined, PROJECT_PATH)).toStrictEqual([]);\n      expect(prepareProtobufRenderProps([undefined], PROJECT_PATH)).toStrictEqual([]);\n    });\n    it('Should throw if path to protobuf does not exist', () => {\n      const mockChainTypes = [\n        {\n          'osmosis.gamm.v1beta1': {\n            file: './protato/osmosis/gamm/v1beta1/tx.proto',\n            messages: ['MsgSwapExactAmountIn'],\n          },\n        },\n      ];\n      expect(() => prepareProtobufRenderProps(mockChainTypes, PROJECT_PATH)).toThrow(\n        'Error: chainType osmosis.gamm.v1beta1, file ./protato/osmosis/gamm/v1beta1/tx.proto does not exist'\n      );\n    });\n    it('ensure correct regex for protoPath', () => {\n      let p = './proto/cosmos/osmosis/gamm/v1beta1/tx.proto';\n      expect(isProtoPath(p, PROJECT_PATH)).toBe(true);\n      p = 'proto/cosmos/osmosis/gamm/v1beta1/tx.proto';\n      expect(isProtoPath(p, PROJECT_PATH)).toBe(true);\n      p = '../proto/cosmos/osmosis/gamm/v1beta1/tx.proto';\n      expect(isProtoPath(p, PROJECT_PATH)).toBe(false);\n      p = './protos/cosmos/osmosis/gamm/v1beta1/tx.proto';\n      expect(isProtoPath(p, PROJECT_PATH)).toBe(false);\n    });\n    it('User provided common protos should only overwrite the provided .proto file', async () => {\n      const tp = await tempProtoDir(PROJECT_PATH);\n      const v = await fs.promises.readFile(path.join(tp, './cosmos/base/v1beta1/coin.proto'));\n      expect(v.toString()).toBe('fake proto');\n      await promisify(rimraf)(tp);\n    });\n\n    it('renders correct codegen from ejs', async () => {\n      const job = {\n        props: {\n          proto: [\n            {\n              messageNames: ['MsgSwapExactAmountIn'],\n              namespace: 'osmosis.gamm.v1beta1.tx',\n              name: 'OsmosisGammV1beta1Tx',\n              path: './proto-interfaces/osmosis/gamm/v1beta1/tx',\n            },\n            {\n              messageNames: ['SwapAmountInRoute'],\n              namespace: 'osmosis.poolmanager.v1beta1.swap_route',\n              name: 'OsmosisPoolmanagerV1beta1Swap_route',\n              path: './proto-interfaces/osmosis/poolmanager/v1beta1/swap_route',\n            },\n          ],\n        },\n        helper: {upperFirst},\n      };\n\n      const output = await ejs.renderFile(path.resolve(__dirname, '../../templates/proto-interface.ts.ejs'), job);\n\n      // await fs.promises.writeFile(path.join(PROJECT_PATH, 'test.ts'), data);\n      const expectCodegen = `// SPDX-License-Identifier: Apache-2.0\n\n// Auto-generated , DO NOT EDIT\nimport {CosmosMessage} from \"@subql/types-cosmos\";\n\nimport * as OsmosisGammV1beta1Tx from \"./proto-interfaces/osmosis/gamm/v1beta1/tx\";\n\nimport * as OsmosisPoolmanagerV1beta1Swap_route from \"./proto-interfaces/osmosis/poolmanager/v1beta1/swap_route\";\n\n\nexport namespace osmosis.gamm.v1beta1.tx {\n\n  export type MsgSwapExactAmountInMessage = CosmosMessage<OsmosisGammV1beta1Tx.MsgSwapExactAmountIn>;\n}\n\nexport namespace osmosis.poolmanager.v1beta1.swap_route {\n\n  export type SwapAmountInRouteMessage = CosmosMessage<OsmosisPoolmanagerV1beta1Swap_route.SwapAmountInRoute>;\n}\n\n`;\n\n      expect(output).toEqual(expectCodegen);\n      // const output = await fs.promises.readFile(path.join(PROJECT_PATH, 'test.ts'));\n      // expect(output.toString()).toMatch(expectCodegen);\n      // await promisify(rimraf)(path.join(PROJECT_PATH, 'test.ts'));\n    });\n  });\n\n  describe('CosmWasm codegen', () => {\n    it('ensure prepareSortedAssets', () => {\n      const cosmosDs = {\n        kind: 'cosmos/Runtime',\n        startBlock: 6000000,\n        options: {abi: 'cw20'},\n        assets: {cw20: {file: './cosmwasm-contract/cw20/schema/cw20.json'}} as unknown as Map<string, {file: string}>,\n        mapping: {\n          file: './dist/index.js',\n          handlers: [\n            {\n              handler: 'handleMessage',\n              kind: 'cosmos/MessageHandler',\n              filter: {type: '/cosmwasm.wasm.v1.MsgExecuteContract'},\n            },\n          ],\n        },\n      } as CosmosRuntimeDatasource;\n      const expectedOutput = {cw20: path.join(PROJECT_PATH, 'cosmwasm-contract/cw20/schema/cw20.json')};\n\n      expect(prepareSortedAssets([cosmosDs], PROJECT_PATH)).toStrictEqual(expectedOutput);\n    });\n    it('sortedAssets should only be of cosmosDs', () => {\n      const notCosmosDs = {\n        kind: 'ethereum/Runtime',\n        startBlock: 6000000,\n        options: {abi: 'cw20'},\n        assets: {cw20: {file: './cosmwasm-contract/cw20/schema/cw20.json'}} as unknown as Map<string, {file: string}>,\n        mapping: {\n          file: './dist/index.js',\n          handlers: [\n            {\n              handler: 'handleMessage',\n              kind: 'cosmos/MessageHandler',\n              filter: {type: '/cosmwasm.wasm.v1.MsgExecuteContract'},\n            },\n          ],\n        },\n      } as any;\n\n      expect(prepareSortedAssets([notCosmosDs], PROJECT_PATH)).toStrictEqual({});\n    });\n    it('Correct output on processCosmwasm render jobs', () => {\n      const mockSortedAssets = {\n        cw20: path.join(PROJECT_PATH, 'cosmwasm-contract/cw20/schema/cw20.json'),\n      };\n      expect(prepareCosmwasmJobs(mockSortedAssets, loadCosmwasmAbis, upperFirst)).toStrictEqual([\n        {\n          contract: 'Cw20',\n          messages: {\n            MsgInstantiateContract: 'InstantiateMsg',\n            MsgExecuteContract: 'ExecuteMsg',\n          },\n        },\n      ]);\n    });\n    it('renders correct codegen from ejs', async () => {\n      const mockJob = {\n        contract: 'Cw20',\n        messages: {\n          MsgInstantiateContract: 'InstantiateMsg',\n          MsgExecuteContract: 'ExecuteMsg',\n        },\n      };\n\n      const data = await ejs.renderFile(path.resolve(__dirname, '../../templates/cosmwasm-interfaces.ts.ejs'), {\n        props: {abi: mockJob},\n        helper: {upperFirst},\n      });\n      await fs.promises.writeFile(path.join(PROJECT_PATH, 'test.ts'), data);\n      const expectCodegen =\n        '' +\n        '// SPDX-License-Identifier: Apache-2.0\\n' +\n        '\\n' +\n        '// Auto-generated, DO NOT EDIT\\n' +\n        'import { CosmosMessage, MsgInstantiateContract,MsgExecuteContract } from \"@subql/types-cosmos\";\\n' +\n        '\\n' +\n        'import { InstantiateMsg, ExecuteMsg } from \"../cosmwasm-interfaces/Cw20.types\";\\n' +\n        '\\n' +\n        '\\n' +\n        'export type Cw20InstantiateMsg = CosmosMessage<MsgInstantiateContract<InstantiateMsg>>;\\n' +\n        '\\n' +\n        'export type Cw20ExecuteMsg = CosmosMessage<MsgExecuteContract<ExecuteMsg>>;\\n';\n\n      const output = await fs.promises.readFile(path.join(PROJECT_PATH, 'test.ts'));\n      expect(output.toString()).toMatch(expectCodegen);\n      await promisify(rimraf)(path.join(PROJECT_PATH, 'test.ts'));\n    });\n  });\n  it('ensure correct protoDir on macos', () => {\n    const protoPath = '/Users/ben/subql-workspace/node/subql/node_modules/@protobufs/amino';\n    const tmpDir = '/var/folders/ks/720tmlnn3fj6m4sg91c7spjm0000gn/T/wS0Gob';\n    const macosPath = path.join(tmpDir, `${protoPath.replace(path.dirname(protoPath), '')}`);\n    expect(tmpProtoDir(tmpDir, protoPath)).toEqual(macosPath);\n  });\n  describeIf(os.platform() === 'win32', 'ensure correct protoDir on windowsOs', () => {\n    it('correct pathing on windows', () => {\n      const winProtoPath = 'C:\\\\Users\\\\zzz\\\\subql\\\\subql\\\\node_modules@protobufs\\\\amino';\n      const winTmpDir = 'C:\\\\Users\\\\zzz\\\\AppData\\\\Local\\\\Temp\\\\GZTuPZ';\n\n      expect(tmpProtoDir(winTmpDir, winProtoPath)).toEqual('C:\\\\Users\\\\zzz\\\\AppData\\\\Local\\\\Temp\\\\GZTuPZ\\\\amino');\n    });\n  });\n});\n"]}