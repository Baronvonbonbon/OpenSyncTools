import { ProjectManifestV1_0_0 } from '@subql/types-core/dist/project/versioned/v1_0_0/types';
import { CosmosChaintypes, CustomModule, CosmosRuntimeDatasource } from '@subql/types-cosmos';
import { Data } from 'ejs';
import { IDLObject } from 'wasm-ast-types';
interface ProtobufRenderProps {
    /**
     * The dot notation format of the path without PROTO dir
     * @exmaple
     * 'cosmos.auth.v1beta1.tx'
     * */
    namespace: string;
    /**
     * The camel case format of the path without PROTO dir
     * @example
     * 'CosmosAuthV1Beta1Tx'
     * */
    name: string;
    messageNames: string[];
    path: string;
}
type CosmosChainTypeDataType = CosmosChaintypes | Record<string, CustomModule>;
interface CosmwasmRenderJobType {
    contract: string;
    messages: Record<string, string>;
}
export declare function processProtoFilePath(path: string): string;
export declare function isProtoPath(filePath: string, projectPath: string): boolean;
export declare function prepareCosmwasmJobs(sortedAssets: Record<string, string>, loadReadAbi: (filePath: string) => IDLObject, upperFirst: (input?: string) => string): CosmwasmRenderJobType[];
export declare function prepareSortedAssets(datasources: CosmosRuntimeDatasource[], projectPath: string): Record<string, string>;
export declare function generateCosmwasm(datasources: CosmosRuntimeDatasource[], projectPath: string, prepareDirPath: (path: string, recreate: boolean) => Promise<void>, upperFirst: (input?: string) => string, renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>): Promise<void>;
export declare function prepareProtobufRenderProps(chaintypes: (CosmosChainTypeDataType | undefined)[] | undefined, projectPath: string): ProtobufRenderProps[];
/**
 * Makes a temporaray directory and populates it with some core protobufs used by all projects, then copies over the projects protobufs
 * */
export declare function tempProtoDir(projectPath: string): Promise<string>;
export declare function generateProto(chaintypes: CosmosChainTypeDataType[], projectPath: string, prepareDirPath: (path: string, recreate: boolean) => Promise<void>, renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>, upperFirst: (string?: string) => string): Promise<void>;
/**
 * Generates typescript interfaces from proto files and cosmwasm abis
 * @param manifest
 * @param projectPath
 * @param prepareDirPath
 * @param renderTemplate
 * @param upperFirst
 * @param datasources
 */
export declare function projectCodegen(manifest: ProjectManifestV1_0_0[], projectPath: string, prepareDirPath: (path: string, recreate: boolean) => Promise<void>, renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>, upperFirst: (string?: string) => string, datasources: CosmosRuntimeDatasource[]): Promise<void>;
export {};
