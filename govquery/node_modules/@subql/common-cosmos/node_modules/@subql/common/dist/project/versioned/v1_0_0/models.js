"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonProjectNetworkV1_0_0 = exports.CommonEndpointConfig = exports.CommonRunnerSpecsImpl = exports.CommonProjectManifestV1_0_0Impl = exports.ParentProjectModel = exports.BlockFilterImpl = exports.RunnerNodeOptionsModel = exports.RunnerNodeImpl = exports.RunnerQueryBaseModel = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const utils_1 = require("../../utils");
const base_1 = require("../base");
class RunnerQueryBaseModel {
    name;
    // @Matches(RUNNER_REGEX)
    version;
}
exports.RunnerQueryBaseModel = RunnerQueryBaseModel;
__decorate([
    (0, class_validator_1.IsIn)(['@subql/query', '@subql/query-subgraph']),
    __metadata("design:type", String)
], RunnerQueryBaseModel.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Validate)(utils_1.SemverVersionValidator)
    // @Matches(RUNNER_REGEX)
    ,
    __metadata("design:type", String)
], RunnerQueryBaseModel.prototype, "version", void 0);
class RunnerNodeImpl {
    name;
    // @Matches(RUNNER_REGEX,{message: 'runner version is not correct'})
    version;
    options;
}
exports.RunnerNodeImpl = RunnerNodeImpl;
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], RunnerNodeImpl.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Validate)(utils_1.SemverVersionValidator)
    // @Matches(RUNNER_REGEX,{message: 'runner version is not correct'})
    ,
    __metadata("design:type", String)
], RunnerNodeImpl.prototype, "version", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => RunnerNodeOptionsModel),
    __metadata("design:type", Object)
], RunnerNodeImpl.prototype, "options", void 0);
class RunnerNodeOptionsModel {
    historical;
    unsafe;
    unfinalizedBlocks;
    skipTransactions;
}
exports.RunnerNodeOptionsModel = RunnerNodeOptionsModel;
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)(),
    __metadata("design:type", Boolean)
], RunnerNodeOptionsModel.prototype, "historical", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)(),
    __metadata("design:type", Boolean)
], RunnerNodeOptionsModel.prototype, "unsafe", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)(),
    __metadata("design:type", Boolean)
], RunnerNodeOptionsModel.prototype, "unfinalizedBlocks", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)(),
    __metadata("design:type", Boolean)
], RunnerNodeOptionsModel.prototype, "skipTransactions", void 0);
class BlockFilterImpl {
    modulo;
    timestamp;
}
exports.BlockFilterImpl = BlockFilterImpl;
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], BlockFilterImpl.prototype, "modulo", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], BlockFilterImpl.prototype, "timestamp", void 0);
class ParentProjectModel {
    block;
    untilBlock;
    reference;
}
exports.ParentProjectModel = ParentProjectModel;
__decorate([
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.ValidateIf)((obj, value) => value !== null || obj.unitlBlock === null || obj.untilBlock === undefined),
    __metadata("design:type", Number)
], ParentProjectModel.prototype, "block", void 0);
__decorate([
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.ValidateIf)((obj, value) => value !== null || obj.block === null || obj.block === undefined),
    __metadata("design:type", Number)
], ParentProjectModel.prototype, "untilBlock", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ParentProjectModel.prototype, "reference", void 0);
// Use for generic project validation only
class CommonProjectManifestV1_0_0Impl {
    definitions;
    description;
    repository;
    specVersion;
    // To be validated in specific manifest type
    dataSources;
    network;
    name;
    version;
    schema;
    templates;
    runner;
    parent;
    deployment;
}
exports.CommonProjectManifestV1_0_0Impl = CommonProjectManifestV1_0_0Impl;
__decorate([
    (0, class_validator_1.Allow)(),
    __metadata("design:type", Object)
], CommonProjectManifestV1_0_0Impl.prototype, "definitions", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CommonProjectManifestV1_0_0Impl.prototype, "description", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CommonProjectManifestV1_0_0Impl.prototype, "repository", void 0);
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    __metadata("design:type", String)
], CommonProjectManifestV1_0_0Impl.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], CommonProjectManifestV1_0_0Impl.prototype, "dataSources", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CommonProjectNetworkV1_0_0),
    __metadata("design:type", Object)
], CommonProjectManifestV1_0_0Impl.prototype, "network", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CommonProjectManifestV1_0_0Impl.prototype, "name", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CommonProjectManifestV1_0_0Impl.prototype, "version", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => base_1.FileType),
    __metadata("design:type", base_1.FileType)
], CommonProjectManifestV1_0_0Impl.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], CommonProjectManifestV1_0_0Impl.prototype, "templates", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => CommonRunnerSpecsImpl),
    __metadata("design:type", Object)
], CommonProjectManifestV1_0_0Impl.prototype, "runner", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    (0, class_transformer_1.Type)(() => ParentProjectModel),
    __metadata("design:type", Object)
], CommonProjectManifestV1_0_0Impl.prototype, "parent", void 0);
class CommonRunnerSpecsImpl {
    node;
    query;
}
exports.CommonRunnerSpecsImpl = CommonRunnerSpecsImpl;
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => RunnerNodeImpl),
    __metadata("design:type", Object)
], CommonRunnerSpecsImpl.prototype, "node", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => RunnerQueryBaseModel),
    __metadata("design:type", Object)
], CommonRunnerSpecsImpl.prototype, "query", void 0);
class CommonEndpointConfig {
    // Class validator doesn't have any way of validating records
    headers;
}
exports.CommonEndpointConfig = CommonEndpointConfig;
__decorate([
    (0, class_validator_1.IsOptional)()
    // Class validator doesn't have any way of validating records
    ,
    __metadata("design:type", Object)
], CommonEndpointConfig.prototype, "headers", void 0);
class CommonProjectNetworkV1_0_0 {
    endpoint;
    dictionary;
    chainId;
    chaintypes; // ensure lowercase to keep consistency
    bypassBlocks;
}
exports.CommonProjectNetworkV1_0_0 = CommonProjectNetworkV1_0_0;
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, utils_1.IsNetworkEndpoint)(CommonEndpointConfig),
    __metadata("design:type", Object)
], CommonProjectNetworkV1_0_0.prototype, "endpoint", void 0);
__decorate([
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], CommonProjectNetworkV1_0_0.prototype, "dictionary", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_transformer_1.Transform)(({ value }) => value.trim()),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], CommonProjectNetworkV1_0_0.prototype, "chainId", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Object)
], CommonProjectNetworkV1_0_0.prototype, "chaintypes", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], CommonProjectNetworkV1_0_0.prototype, "bypassBlocks", void 0);
//# sourceMappingURL=models.js.map