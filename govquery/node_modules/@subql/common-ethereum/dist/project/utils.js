"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOT_NULL_FILTER = exports.DEFAULT_ABI_DIR = void 0;
exports.isBlockHandlerProcessor = isBlockHandlerProcessor;
exports.isEventHandlerProcessor = isEventHandlerProcessor;
exports.isCallHandlerProcessor = isCallHandlerProcessor;
exports.isCustomDs = isCustomDs;
exports.isRuntimeDs = isRuntimeDs;
exports.isEthereumOrZilliqaAddress = isEthereumOrZilliqaAddress;
exports.IsEthereumOrZilliqaAddress = IsEthereumOrZilliqaAddress;
exports.getAbiInterface = getAbiInterface;
const path_1 = __importDefault(require("path"));
const common_1 = require("@subql/common");
const types_ethereum_1 = require("@subql/types-ethereum");
const crypto_1 = require("@zilliqa-js/crypto");
const class_validator_1 = require("class-validator");
const utils_1 = require("ethers/lib/utils");
// Todo, this aligns with cli/src/generate-controller, but we should move this to common in next version
exports.DEFAULT_ABI_DIR = '/abis';
exports.NOT_NULL_FILTER = '!null';
function isBlockHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_ethereum_1.EthereumHandlerKind.Block;
}
function isEventHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_ethereum_1.EthereumHandlerKind.Event;
}
function isCallHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_ethereum_1.EthereumHandlerKind.Call;
}
function isCustomDs(ds) {
    return ds.kind !== types_ethereum_1.EthereumDatasourceKind.Runtime && !!ds.processor;
}
function isRuntimeDs(ds) {
    return ds.kind === types_ethereum_1.EthereumDatasourceKind.Runtime;
}
function isEthereumOrZilliqaAddress(address) {
    try {
        const ethFormat = (0, crypto_1.fromBech32Address)(address);
        return (0, class_validator_1.isEthereumAddress)(ethFormat);
    }
    catch (e) {
        return (0, class_validator_1.isEthereumAddress)(address);
    }
}
function IsEthereumOrZilliqaAddress(validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'isEthereumOrZilliqaAddress',
        validator: {
            validate: (value, args) => isEthereumOrZilliqaAddress(value),
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix) => `${eachPrefix}$property must be a Zilliqa address`, validationOptions),
        },
    }, validationOptions);
}
function getAbiInterface(projectPath, abiFileName) {
    const abi = (0, common_1.loadFromJsonOrYaml)(path_1.default.join(projectPath, exports.DEFAULT_ABI_DIR, abiFileName));
    if (!Array.isArray(abi)) {
        if (!abi.abi) {
            throw new Error(`Provided ABI is not a valid ABI or Artifact`);
        }
        return new utils_1.Interface(abi.abi);
    }
    else {
        return new utils_1.Interface(abi);
    }
}
//# sourceMappingURL=utils.js.map