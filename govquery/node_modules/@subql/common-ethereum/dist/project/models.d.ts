import { BaseDataSource } from '@subql/common';
import { FileReference } from '@subql/types-core';
import { EthereumHandlerKind, EthereumDatasourceKind, EthereumLogFilter, SubqlCustomHandler, SubqlMapping, SubqlHandler, SubqlRuntimeHandler, SubqlRuntimeDatasource, SubqlCustomDatasource, EthereumBlockFilter, SubqlBlockHandler, SubqlEventHandler, SubqlCallHandler, EthereumTransactionFilter } from '@subql/types-ethereum';
import { ValidationOptions } from 'class-validator';
import { SubqlEthereumProcessorOptions } from './types';
export declare class BlockFilter implements EthereumBlockFilter {
    modulo?: number;
    timestamp?: string;
}
export declare class LogFilter implements EthereumLogFilter {
    topics?: string[];
}
export declare class TransactionFilter implements EthereumTransactionFilter {
    from?: string;
    to?: string;
    function?: string | null;
    type?: `0x${string}`;
}
export declare function forbidNonWhitelisted(keys: any, validationOptions?: ValidationOptions): (object: object, propertyName: string) => void;
export declare class BlockHandler implements SubqlBlockHandler {
    filter?: BlockFilter;
    kind: EthereumHandlerKind.Block;
    handler: string;
}
export declare class CallHandler implements SubqlCallHandler {
    filter?: EthereumTransactionFilter;
    kind: EthereumHandlerKind.Call;
    handler: string;
}
export declare class EventHandler implements SubqlEventHandler {
    filter?: EthereumLogFilter;
    kind: EthereumHandlerKind.Event;
    handler: string;
}
export declare class CustomHandler implements SubqlCustomHandler {
    kind: string;
    handler: string;
    filter?: Record<string, unknown>;
}
export declare class EthereumMapping implements SubqlMapping {
    handlers: SubqlHandler[];
    file: string;
}
export declare class CustomMapping implements SubqlMapping<SubqlCustomHandler> {
    handlers: CustomHandler[];
    file: string;
}
export declare class EthereumProcessorOptions implements SubqlEthereumProcessorOptions {
    abi?: string;
    address?: string;
}
export declare class RuntimeDataSourceBase<M extends SubqlMapping<SubqlRuntimeHandler>> extends BaseDataSource implements SubqlRuntimeDatasource<M> {
    kind: EthereumDatasourceKind.Runtime;
    mapping: M;
    assets?: Map<string, FileReference>;
    options?: EthereumProcessorOptions;
}
export declare class FileReferenceImpl implements FileReference {
    file: string;
}
export declare class CustomDataSourceBase<K extends string, M extends SubqlMapping = SubqlMapping<SubqlCustomHandler>> extends BaseDataSource implements SubqlCustomDatasource<K, M> {
    kind: K;
    mapping: M;
    assets: Map<string, FileReference>;
    processor: FileReference;
    options?: EthereumProcessorOptions;
}
