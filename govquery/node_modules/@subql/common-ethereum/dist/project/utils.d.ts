import { SecondLayerHandlerProcessor, SubqlCustomDatasource, SubqlDatasource, EthereumHandlerKind, SubqlRuntimeDatasource, SecondLayerHandlerProcessorArray, SubqlCustomHandler, SubqlMapping } from '@subql/types-ethereum';
import { ValidationOptions } from 'class-validator';
import { Interface } from 'ethers/lib/utils';
export declare const DEFAULT_ABI_DIR = "/abis";
export declare const NOT_NULL_FILTER = "!null";
type DefaultFilter = Record<string, unknown>;
export declare function isBlockHandlerProcessor<E>(hp: SecondLayerHandlerProcessorArray<EthereumHandlerKind, DefaultFilter, unknown>): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Block, DefaultFilter, E>;
export declare function isEventHandlerProcessor<E>(hp: SecondLayerHandlerProcessorArray<EthereumHandlerKind, DefaultFilter, unknown>): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Event, DefaultFilter, E>;
export declare function isCallHandlerProcessor<E>(hp: SecondLayerHandlerProcessorArray<EthereumHandlerKind, DefaultFilter, unknown>): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Call, DefaultFilter, E>;
export declare function isCustomDs<F extends SubqlMapping<SubqlCustomHandler>>(ds: SubqlDatasource): ds is SubqlCustomDatasource<string, F>;
export declare function isRuntimeDs(ds: SubqlDatasource): ds is SubqlRuntimeDatasource;
export declare function isEthereumOrZilliqaAddress(address: string): boolean;
export declare function IsEthereumOrZilliqaAddress(validationOptions?: ValidationOptions): PropertyDecorator;
export declare function getAbiInterface(projectPath: string, abiFileName: string): Interface;
export {};
