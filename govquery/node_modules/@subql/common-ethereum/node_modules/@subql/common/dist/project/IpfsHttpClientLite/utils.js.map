{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/project/IpfsHttpClientLite/utils.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;;;AAInC,8BAmBC;AArBD,kDAA0B;AAEnB,KAAK,SAAS,CAAC,CAAC,SAAS,CAAC,OAAe,EAAE,OAAe;IAC/D,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,OAAO,oBAAoB,CAAC,CAAC;IACpD,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAExC,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC,IAAI,CAC1B,GAAG,CAAC,QAAQ,EAAE,EACd,EAAE,EACF;YACE,YAAY,EAAE,QAAQ;SACvB,CACF,CAAC;QACF,yCAAyC;QACzC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,0CAA0C,OAAO,EAAE,CAAC,CAAC;IACvE,CAAC;AACH,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport axios from 'axios';\n\nexport async function* streamCat(baseUrl: string, ipfsCID: string): AsyncIterable<Uint8Array> {\n  const url = new URL(`${baseUrl}/cat?progress=true`);\n  url.searchParams.append('arg', ipfsCID);\n\n  try {\n    const res = await axios.post(\n      url.toString(),\n      {},\n      {\n        responseType: 'stream',\n      }\n    );\n    // Iterate over the stream and yield data\n    for await (const chunk of res.data) {\n      yield chunk;\n    }\n  } catch (error) {\n    throw new Error(`Failed to fetch data from IPFS for CID ${ipfsCID}`);\n  }\n}\n"]}