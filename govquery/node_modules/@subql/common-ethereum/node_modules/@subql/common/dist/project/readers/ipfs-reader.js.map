{"version":3,"file":"ipfs-reader.js","sourceRoot":"","sources":["../../../src/project/readers/ipfs-reader.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;;;;AAGnC,sDAA2B;AAE3B,+CAAmD;AACnD,8DAAyD;AAEzD,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC;AACrD,MAAM,KAAK,GAAG,IAAI,MAAM,CACtB,yGAAyG,CAC1G,CAAC;AAEF,MAAa,UAAU;IAKV;IAJH,IAAI,CAAqB;IACzB,KAAK,GAAoC,EAAE,CAAC;IAEpD,YACW,GAAW,EACpB,OAAgB;QADP,QAAG,GAAH,GAAG,CAAQ;QAGpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,uCAAkB,CAAC,EAAC,GAAG,EAAE,OAAO,IAAI,8BAAkB,EAAC,CAAC,CAAC;IAC3E,CAAC;IAED,IAAI,IAAI;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,4DAA4D;IAC5D,KAAK,CAAC,MAAM;QACV,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjD,OAAO,iBAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,QAAgB;QAC5B,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE,CAAC;gBACvC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACzD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC9E,CAAC;YACD,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,mCAAmC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAChE,MAAM,IAAI,KAAK,CAAC,mCAAmC,QAAQ,EAAE,EAAE,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,GAA8B;QACzD,MAAM,iBAAiB,GAAiB,EAAE,CAAC;QAC3C,IAAI,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;YAC5B,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC1F,CAAC;CACF;AAhDD,gCAgDC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {Reader} from '@subql/types-core';\nimport yaml from 'js-yaml';\nimport type {IPackageJson} from 'package-json-type';\nimport {IPFS_NODE_ENDPOINT} from '../../constants';\nimport {IPFSHTTPClientLite} from '../IpfsHttpClientLite';\n\nconst CIDv0 = new RegExp(/Qm[1-9A-Za-z]{44}[^OIl]/i);\nconst CIDv1 = new RegExp(\n  /Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,}/i\n);\n\nexport class IPFSReader implements Reader {\n  private ipfs: IPFSHTTPClientLite;\n  private cache: Record<string, Promise<string>> = {};\n\n  constructor(\n    readonly cid: string,\n    gateway?: string\n  ) {\n    if (!CIDv0.test(cid) && !CIDv1.test(cid)) {\n      throw new Error('IPFS project path CID is not valid');\n    }\n    this.ipfs = new IPFSHTTPClientLite({url: gateway ?? IPFS_NODE_ENDPOINT});\n  }\n\n  get root(): undefined {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getPkg(): Promise<IPackageJson> {\n    throw new Error(\"IPFS Reader doesn't support reading package.json\");\n  }\n\n  async getProjectSchema(): Promise<unknown> {\n    const projectYaml = await this.getFile(this.cid);\n    return yaml.load(projectYaml);\n  }\n\n  async getFile(fileName: string): Promise<string> {\n    try {\n      if (this.cache[fileName] === undefined) {\n        const resolvedFileName = fileName.replace('ipfs://', '');\n        this.cache[fileName] = this.resultToBuffer(this.ipfs.cat(resolvedFileName));\n      }\n      return await this.cache[fileName];\n    } catch (e) {\n      console.error(`Failed to fetch file from IPFS: ${fileName}`, e);\n      throw new Error(`Failed to fetch file from IPFS: ${fileName}`, {cause: e});\n    }\n  }\n\n  private async resultToBuffer(req: AsyncIterable<Uint8Array>): Promise<string> {\n    const scriptBufferArray: Uint8Array[] = [];\n    for await (const res of req) {\n      scriptBufferArray.push(res);\n    }\n    return Buffer.concat(scriptBufferArray.map((u8a) => Buffer.from(u8a))).toString('utf8');\n  }\n}\n"]}