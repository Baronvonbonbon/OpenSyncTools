"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReaderFactory = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../constants");
const project_1 = require("../../project");
const github_reader_1 = require("./github-reader");
const ipfs_reader_1 = require("./ipfs-reader");
const local_reader_1 = require("./local-reader");
class ReaderFactory {
    // eslint-disable-next-line @typescript-eslint/require-await
    static async create(location, options) {
        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
        const githubMatch = location.match(/https:\/\/github.com\/([\w-_]+\/[\w-_]+)/i);
        if (githubMatch) {
            return new github_reader_1.GithubReader(githubMatch[1]);
        }
        const ipfsMatch = location.match(constants_1.IPFS_REGEX);
        if (ipfsMatch) {
            return new ipfs_reader_1.IPFSReader(location.replace('ipfs://', ''), options?.ipfs);
        }
        //local mode
        if (fs_1.default.existsSync(location)) {
            const project = (0, project_1.getProjectRootAndManifest)(location);
            if (project.manifests.length > 1) {
                throw new Error(`Mulitple manifests found, expected only one`);
            }
            return new local_reader_1.LocalReader(project.root, path_1.default.join(project.root, project.manifests[0]));
        }
        throw new Error(`unknown location: ${location}`);
    }
}
exports.ReaderFactory = ReaderFactory;
//# sourceMappingURL=reader.js.map