import { FileReference, IEndpointConfig, ProjectRootAndManifest } from '@subql/types-core';
import { ClassConstructor } from 'class-transformer';
import { ValidationArguments, ValidationOptions, ValidatorConstraintInterface } from 'class-validator';
import Pino from 'pino';
import { Package } from 'update-notifier';
export declare const DEFAULT_MULTICHAIN_MANIFEST = "subquery-multichain.yaml";
export declare const DEFAULT_MULTICHAIN_TS_MANIFEST = "subquery-multichain.ts";
export declare const DEFAULT_MANIFEST = "project.yaml";
export declare const DEFAULT_TS_MANIFEST = "project.ts";
export declare const DEFAULT_ENV = ".env";
export declare const DEFAULT_ENV_DEVELOP = ".env.develop";
export declare const DEFAULT_ENV_LOCAL = ".env.local";
export declare const DEFAULT_ENV_DEVELOP_LOCAL = ".env.develop.local";
export declare const DEFAULT_GIT_IGNORE = ".gitignore";
export declare function isFileReference(value: any): value is FileReference;
export declare function handleCreateSubqueryProjectError(err: Error, pjson: any, rawManifest: any, logger: Pino.Logger): void;
export declare function makeTempDir(): Promise<string>;
export declare function getProjectRootAndManifest(subquery: string): ProjectRootAndManifest;
export declare function getMultichainManifestPath(subquery: string): string | undefined;
export declare function validateSemver(current: string, required: string): boolean;
export declare class SemverVersionValidator implements ValidatorConstraintInterface {
    validate(value: string | null | undefined): boolean;
    defaultMessage(args: ValidationArguments): string;
}
export declare function delay(sec: number): Promise<void>;
export declare function validateObject(object: any, errorMessage?: string): void;
export declare function extensionIsTs(ext: string): boolean;
export declare function extensionIsYamlOrJSON(ext: string): boolean;
export declare function forbidNonWhitelisted(keys: any, validationOptions?: ValidationOptions): (object: object, propertyName: string) => void;
export declare function IsNetworkEndpoint<T extends object>(cls: ClassConstructor<T>, validationOptions?: ValidationOptions): (object: object, propertyName: string) => void;
export declare function normalizeNetworkEndpoints<T extends IEndpointConfig = IEndpointConfig>(input: string | string[] | Record<string, T>, defaultConfig?: T): Record<string, T>;
export declare function notifyUpdates(pjson: Package, logger: Pino.Logger): void;
export declare function toJsonObject(object: unknown): unknown;
export declare function mapToObject(map: Map<string | number, unknown>): Record<string | number, unknown>;
export declare class FileReferenceImp<T> implements ValidatorConstraintInterface {
    validate(value: Map<string, T>): boolean;
    defaultMessage(args: ValidationArguments): string;
    private isValidFileReference;
}
export declare const tsProjectYamlPath: (tsManifestEntry: string) => string;
export declare class IsEndBlockGreater implements ValidatorConstraintInterface {
    validate(endBlock: number, args: ValidationArguments): boolean;
    defaultMessage(args: ValidationArguments): string;
}
