{"version":3,"file":"load.js","sourceRoot":"","sources":["../../src/project/load.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {ProjectManifestV1_0_0} from '@subql/types-core';\nimport {plainToClass} from 'class-transformer';\nimport {validateSync} from 'class-validator';\nimport yaml from 'js-yaml';\nimport {gte} from 'semver';\nimport {CommonProjectManifestV1_0_0Impl} from '../';\nimport {NETWORK_FAMILY, runnerMapping} from '../constants';\nimport {DEFAULT_MANIFEST, DEFAULT_TS_MANIFEST, extensionIsYamlOrJSON} from './utils';\nexport function loadFromJsonOrYaml(file: string): unknown {\n  const {ext} = path.parse(file);\n  if (!extensionIsYamlOrJSON(ext)) {\n    throw new Error(`Extension ${ext} not supported`);\n  }\n  const rawContent = fs.readFileSync(file, 'utf-8');\n  return yaml.load(rawContent);\n}\n\nexport function getManifestPath(manifestDir: string, fileName?: string): string {\n  let manifestPath = manifestDir;\n  if (fs.existsSync(manifestDir) && fs.lstatSync(manifestDir).isDirectory()) {\n    const tsFilePath = path.join(manifestDir, fileName ?? DEFAULT_TS_MANIFEST);\n    const yamlFilePath = path.join(manifestDir, fileName ?? DEFAULT_MANIFEST);\n    const jsonFilePath = path.join(manifestDir, fileName ?? 'project.json');\n    if (fs.existsSync(tsFilePath)) {\n      manifestPath = tsFilePath;\n    } else if (fs.existsSync(yamlFilePath)) {\n      manifestPath = yamlFilePath;\n    } else if (fs.existsSync(jsonFilePath)) {\n      manifestPath = jsonFilePath;\n    } else {\n      throw new Error(`Could not find project manifest under dir ${manifestDir}`);\n    }\n  }\n  return manifestPath;\n}\n\nexport function getSchemaPath(manifestDir: string, fileName?: string): string {\n  const rawProject = loadFromJsonOrYaml(getManifestPath(manifestDir, fileName));\n  if ((rawProject as any).specVersion === '0.0.1') {\n    return path.join(manifestDir, (rawProject as any).schema);\n  }\n  const project = rawProject as ProjectManifestV1_0_0;\n  if (!project.schema) {\n    throw new Error(`Can't get schema in yaml file`);\n  }\n  if (!project.schema.file) {\n    throw new Error(`schemaPath expect to be schema.file`);\n  }\n  return path.join(manifestDir, project.schema.file);\n}\n\n// Only work for manifest specVersion >= 1.0.0\nexport function getProjectNetwork(rawManifest: unknown): NETWORK_FAMILY {\n  if (gte((rawManifest as any).specVersion, '1.0.0')) {\n    const network = runnerMapping[(rawManifest as any).runner.node.name as keyof typeof runnerMapping];\n    if (network === undefined) {\n      throw new Error(`Can not identify project network with runner node ${(rawManifest as any).runner.node.name}`);\n    }\n    return network;\n  } else {\n    throw new Error('Can not identify project network under spec version 1.0.0');\n  }\n}\n\n/**\n * @param path path to the file\n * @param identifier name to be used for logging purpose\n * @returns file content\n */\nexport function getFileContent(path: string, identifier: string): string {\n  if (!fs.existsSync(path)) {\n    const err_msg = `${identifier} file ${path} is does not exist`;\n    throw new Error(err_msg);\n  }\n\n  try {\n    return fs.readFileSync(path).toString();\n  } catch (error) {\n    const err_msg = `Failed to load ${identifier} file, ${error}`;\n    throw new Error(err_msg);\n  }\n}\n\n//  Validate generic/common section for project manifest\nexport function validateCommonProjectManifest(raw: unknown): void {\n  const projectManifest = plainToClass<CommonProjectManifestV1_0_0Impl, unknown>(CommonProjectManifestV1_0_0Impl, raw);\n  const errors = validateSync(projectManifest, {whitelist: true});\n  if (errors?.length) {\n    // TODO: print error details\n    const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n    throw new Error(`project validation failed.\\n${errorMsgs}`);\n  }\n}\n"]}