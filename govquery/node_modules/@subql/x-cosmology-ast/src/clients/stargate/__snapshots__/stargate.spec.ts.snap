// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createStargateClient 1`] = `
"export const getSigningOsmosisClient = async ({
  rpcEndpoint,
  signer,
  defaultTypes = defaultRegistryTypes
}: {
  rpcEndpoint: string | HttpEndpoint;
  signer: OfflineSigner;
  defaultTypes?: ReadonlyArray<[string, GeneratedType]>;
}) => {
  const {
    registry,
    aminoTypes
  } = getSigningOsmosisClientOptions({
    defaultTypes
  });
  const client = await SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {
    registry: (registry as any),
    aminoTypes
  });
  return client;
};"
`;

exports[`createStargateClient 2`] = `
{
  "AminoTypes": true,
  "GeneratedType": true,
  "HttpEndpoint": true,
  "OfflineSigner": true,
  "Registry": true,
  "SigningStargateClient": true,
  "defaultRegistryTypes": true,
}
`;

exports[`createStargateClient w/o defaults 1`] = `
"export const getSigningOsmosisClient = async ({
  rpcEndpoint,
  signer
}: {
  rpcEndpoint: string | HttpEndpoint;
  signer: OfflineSigner;
}) => {
  const {
    registry,
    aminoTypes
  } = getSigningOsmosisClientOptions();
  const client = await SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {
    registry: (registry as any),
    aminoTypes
  });
  return client;
};"
`;

exports[`createStargateClient w/o defaults 2`] = `
"export const getOsmosisTxRpcClient = async ({
  rpcEndpoint,
  signer
}: SigningClientParams) => {
  let txRpc = (await createRpcClient(rpcEndpoint) as TxRpc);
  const signingClient = await getSigningOsmosisClient({
    rpcEndpoint,
    signer
  });
  txRpc.signAndBroadcast = (signerAddress: string, messages: EncodeObject[], fee: number | StdFee | "auto", memo?: string) => {
    return (signingClient.signAndBroadcast(signerAddress, messages, fee, memo) as Promise<DeliverTxResponse>);
  };
  return txRpc;
};"
`;

exports[`createStargateClient w/o defaults 3`] = `
"export const getSigningOsmosisClientOptions = (): {
  registry: Registry;
  aminoTypes: AminoTypes;
} => {
  const registry = new Registry([...protoTypeRegistry]);
  const aminoTypes = new AminoTypes({
    ...aminoConverters
  });
  return {
    registry,
    aminoTypes
  };
};"
`;

exports[`createStargateClient w/o defaults 4`] = `
{
  "AminoTypes": true,
  "DeliverTxResponse": true,
  "EncodeObject": true,
  "GeneratedType": true,
  "HttpEndpoint": true,
  "OfflineSigner": true,
  "Registry": true,
  "SigningClientParams": true,
  "SigningStargateClient": true,
  "StdFee": true,
  "TxRpc": true,
  "createRpcClient": true,
}
`;

exports[`createStargateClientAminoRegistry 1`] = `
"export const aminoConverters = {
  ...somepackage1.gamm.v1beta1.AminoConverter,
  ...somepackage1.superfluid.v1beta1.AminoConverter,
  ...somepackage1.lockup.AminoConverter
};"
`;

exports[`createStargateClientAminoRegistry 2`] = `{}`;

exports[`createStargateClientOptions 1`] = `
"export const getSigningOsmosisClientOptions = ({
  defaultTypes = defaultRegistryTypes
}: {
  defaultTypes?: ReadonlyArray<[string, GeneratedType]>;
} = {}): {
  registry: Registry;
  aminoTypes: AminoTypes;
} => {
  const registry = new Registry([...defaultTypes, ...protoTypeRegistry]);
  const aminoTypes = new AminoTypes({
    ...aminoConverters
  });
  return {
    registry,
    aminoTypes
  };
};"
`;

exports[`createStargateClientOptions 2`] = `
{
  "AminoTypes": true,
  "GeneratedType": true,
  "Registry": true,
  "SigningStargateClient": true,
  "defaultRegistryTypes": true,
}
`;

exports[`createStargateClientProtoRegistry 1`] = `"export const protoTypeRegistry: ReadonlyArray<[string, GeneratedType]> = [...somepackage1.gamm.v1beta1.registry, ...somepackage1.superfluid.v1beta1.registry, ...somepackage1.lockup.registry];"`;

exports[`createStargateClientProtoRegistry 2`] = `
{
  "GeneratedType": true,
}
`;
