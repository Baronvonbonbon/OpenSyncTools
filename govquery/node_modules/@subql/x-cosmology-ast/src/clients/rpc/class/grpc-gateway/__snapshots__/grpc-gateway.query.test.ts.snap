// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GRPC-Gateway Query Client 1`] = `
"export class Query {
  /** Balance queries the balance of a single coin for a single account. */
  static balance(request: QueryBalanceRequest, initRequest?: fm.InitReq): Promise<QueryBalanceResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/balances/\${request["address"]}/by_denom?\${fm.renderURLSearchParams({
      ...request
    }, ["address"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** AllBalances queries the balance of all coins for a single account. */
  static allBalances(request: QueryAllBalancesRequest, initRequest?: fm.InitReq): Promise<QueryAllBalancesResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/balances/\${request["address"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["address"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * SpendableBalances queries the spenable balance of all coins for a single
   * account.
   */
  static spendableBalances(request: QuerySpendableBalancesRequest, initRequest?: fm.InitReq): Promise<QuerySpendableBalancesResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/spendable_balances/\${request["address"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["address"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** TotalSupply queries the total supply of all coins. */
  static totalSupply(request: QueryTotalSupplyRequest, initRequest?: fm.InitReq): Promise<QueryTotalSupplyResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/supply?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** SupplyOf queries the supply of a single coin. */
  static supplyOf(request: QuerySupplyOfRequest, initRequest?: fm.InitReq): Promise<QuerySupplyOfResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/supply/by_denom?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Params queries the parameters of x/bank module. */
  static params(request: QueryParamsRequest, initRequest?: fm.InitReq): Promise<QueryParamsResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/params?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** DenomsMetadata queries the client metadata of a given coin denomination. */
  static denomMetadata(request: QueryDenomMetadataRequest, initRequest?: fm.InitReq): Promise<QueryDenomMetadataResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denoms_metadata/\${request["denom"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["denom"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * DenomsMetadata queries the client metadata for all registered coin
   * denominations.
   */
  static denomsMetadata(request: QueryDenomsMetadataRequest, initRequest?: fm.InitReq): Promise<QueryDenomsMetadataResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denoms_metadata?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * DenomOwners queries for all account addresses that own a particular token
   * denomination.
   */
  static denomOwners(request: QueryDenomOwnersRequest, initRequest?: fm.InitReq): Promise<QueryDenomOwnersResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denom_owners/\${request["denom"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["denom"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
}"
`;

exports[`GRPC-Gateway Query Client 2`] = `
"export class QueryClientImpl {
  private readonly url: string;
  constructor(url: string) {
    this.url = url;
  }
  /** Balance queries the balance of a single coin for a single account. */
  async balance(req: QueryBalanceRequest, headers?: HeadersInit): Promise<QueryBalanceResponse> {
    return Query.balance(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** AllBalances queries the balance of all coins for a single account. */
  async allBalances(req: QueryAllBalancesRequest, headers?: HeadersInit): Promise<QueryAllBalancesResponse> {
    return Query.allBalances(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * SpendableBalances queries the spenable balance of all coins for a single
   * account.
   */
  async spendableBalances(req: QuerySpendableBalancesRequest, headers?: HeadersInit): Promise<QuerySpendableBalancesResponse> {
    return Query.spendableBalances(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** TotalSupply queries the total supply of all coins. */
  async totalSupply(req: QueryTotalSupplyRequest, headers?: HeadersInit): Promise<QueryTotalSupplyResponse> {
    return Query.totalSupply(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** SupplyOf queries the supply of a single coin. */
  async supplyOf(req: QuerySupplyOfRequest, headers?: HeadersInit): Promise<QuerySupplyOfResponse> {
    return Query.supplyOf(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Params queries the parameters of x/bank module. */
  async params(req: QueryParamsRequest, headers?: HeadersInit): Promise<QueryParamsResponse> {
    return Query.params(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** DenomsMetadata queries the client metadata of a given coin denomination. */
  async denomMetadata(req: QueryDenomMetadataRequest, headers?: HeadersInit): Promise<QueryDenomMetadataResponse> {
    return Query.denomMetadata(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * DenomsMetadata queries the client metadata for all registered coin
   * denominations.
   */
  async denomsMetadata(req: QueryDenomsMetadataRequest, headers?: HeadersInit): Promise<QueryDenomsMetadataResponse> {
    return Query.denomsMetadata(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * DenomOwners queries for all account addresses that own a particular token
   * denomination.
   */
  async denomOwners(req: QueryDenomOwnersRequest, headers?: HeadersInit): Promise<QueryDenomOwnersResponse> {
    return Query.denomOwners(req, {
      headers,
      pathPrefix: this.url
    });
  }
}"
`;

exports[`GRPC-Gateway Query Client with 2 params 1`] = `
"export class Query {
  /** Validators queries all validators that match the given status. */
  static validators(request: QueryValidatorsRequest, initRequest?: fm.InitReq): Promise<QueryValidatorsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Validator queries validator info for given validator address. */
  static validator(request: QueryValidatorRequest, initRequest?: fm.InitReq): Promise<QueryValidatorResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators/\${request["validator_addr"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["validator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** ValidatorDelegations queries delegate info for given validator. */
  static validatorDelegations(request: QueryValidatorDelegationsRequest, initRequest?: fm.InitReq): Promise<QueryValidatorDelegationsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators/\${request["validator_addr"]}/delegations?\${fm.renderURLSearchParams({
      ...request
    }, ["validator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** ValidatorUnbondingDelegations queries unbonding delegations of a validator. */
  static validatorUnbondingDelegations(request: QueryValidatorUnbondingDelegationsRequest, initRequest?: fm.InitReq): Promise<QueryValidatorUnbondingDelegationsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators/\${request["validator_addr"]}/unbonding_delegations?\${fm.renderURLSearchParams({
      ...request
    }, ["validator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Delegation queries delegate info for given validator delegator pair. */
  static delegation(request: QueryDelegationRequest, initRequest?: fm.InitReq): Promise<QueryDelegationResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators/\${request["validator_addr"]}/delegations/\${request["delegator_addr"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["validator_addr", "delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * UnbondingDelegation queries unbonding info for given validator delegator
   * pair.
   */
  static unbondingDelegation(request: QueryUnbondingDelegationRequest, initRequest?: fm.InitReq): Promise<QueryUnbondingDelegationResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/validators/\${request["validator_addr"]}/delegations/\${request["delegator_addr"]}/unbonding_delegation?\${fm.renderURLSearchParams({
      ...request
    }, ["validator_addr", "delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** DelegatorDelegations queries all delegations of a given delegator address. */
  static delegatorDelegations(request: QueryDelegatorDelegationsRequest, initRequest?: fm.InitReq): Promise<QueryDelegatorDelegationsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/delegations/\${request["delegator_addr"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * DelegatorUnbondingDelegations queries all unbonding delegations of a given
   * delegator address.
   */
  static delegatorUnbondingDelegations(request: QueryDelegatorUnbondingDelegationsRequest, initRequest?: fm.InitReq): Promise<QueryDelegatorUnbondingDelegationsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/delegators/\${request["delegator_addr"]}/unbonding_delegations?\${fm.renderURLSearchParams({
      ...request
    }, ["delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Redelegations queries redelegations of given address. */
  static redelegations(request: QueryRedelegationsRequest, initRequest?: fm.InitReq): Promise<QueryRedelegationsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/delegators/\${request["delegator_addr"]}/redelegations?\${fm.renderURLSearchParams({
      ...request
    }, ["delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * DelegatorValidators queries all validators info for given delegator
   * address.
   */
  static delegatorValidators(request: QueryDelegatorValidatorsRequest, initRequest?: fm.InitReq): Promise<QueryDelegatorValidatorsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/delegators/\${request["delegator_addr"]}/validators?\${fm.renderURLSearchParams({
      ...request
    }, ["delegator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * DelegatorValidator queries validator info for given delegator validator
   * pair.
   */
  static delegatorValidator(request: QueryDelegatorValidatorRequest, initRequest?: fm.InitReq): Promise<QueryDelegatorValidatorResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/delegators/\${request["delegator_addr"]}/validators/\${request["validator_addr"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["delegator_addr", "validator_addr"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** HistoricalInfo queries the historical info for given height. */
  static historicalInfo(request: QueryHistoricalInfoRequest, initRequest?: fm.InitReq): Promise<QueryHistoricalInfoResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/historical_info/\${request["height"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["height"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Pool queries the pool info. */
  static pool(request: QueryPoolRequest, initRequest?: fm.InitReq): Promise<QueryPoolResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/pool?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** Parameters queries the staking parameters. */
  static params(request: QueryParamsRequest, initRequest?: fm.InitReq): Promise<QueryParamsResponse> {
    return fm.fetchReq(\`/cosmos/staking/v1beta1/params?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
}"
`;

exports[`GRPC-Gateway Query Client with 2 params 2`] = `
"export class QueryClientImpl {
  private readonly url: string;
  constructor(url: string) {
    this.url = url;
  }
  /** Validators queries all validators that match the given status. */
  async validators(req: QueryValidatorsRequest, headers?: HeadersInit): Promise<QueryValidatorsResponse> {
    return Query.validators(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Validator queries validator info for given validator address. */
  async validator(req: QueryValidatorRequest, headers?: HeadersInit): Promise<QueryValidatorResponse> {
    return Query.validator(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** ValidatorDelegations queries delegate info for given validator. */
  async validatorDelegations(req: QueryValidatorDelegationsRequest, headers?: HeadersInit): Promise<QueryValidatorDelegationsResponse> {
    return Query.validatorDelegations(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** ValidatorUnbondingDelegations queries unbonding delegations of a validator. */
  async validatorUnbondingDelegations(req: QueryValidatorUnbondingDelegationsRequest, headers?: HeadersInit): Promise<QueryValidatorUnbondingDelegationsResponse> {
    return Query.validatorUnbondingDelegations(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Delegation queries delegate info for given validator delegator pair. */
  async delegation(req: QueryDelegationRequest, headers?: HeadersInit): Promise<QueryDelegationResponse> {
    return Query.delegation(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * UnbondingDelegation queries unbonding info for given validator delegator
   * pair.
   */
  async unbondingDelegation(req: QueryUnbondingDelegationRequest, headers?: HeadersInit): Promise<QueryUnbondingDelegationResponse> {
    return Query.unbondingDelegation(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** DelegatorDelegations queries all delegations of a given delegator address. */
  async delegatorDelegations(req: QueryDelegatorDelegationsRequest, headers?: HeadersInit): Promise<QueryDelegatorDelegationsResponse> {
    return Query.delegatorDelegations(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * DelegatorUnbondingDelegations queries all unbonding delegations of a given
   * delegator address.
   */
  async delegatorUnbondingDelegations(req: QueryDelegatorUnbondingDelegationsRequest, headers?: HeadersInit): Promise<QueryDelegatorUnbondingDelegationsResponse> {
    return Query.delegatorUnbondingDelegations(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Redelegations queries redelegations of given address. */
  async redelegations(req: QueryRedelegationsRequest, headers?: HeadersInit): Promise<QueryRedelegationsResponse> {
    return Query.redelegations(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * DelegatorValidators queries all validators info for given delegator
   * address.
   */
  async delegatorValidators(req: QueryDelegatorValidatorsRequest, headers?: HeadersInit): Promise<QueryDelegatorValidatorsResponse> {
    return Query.delegatorValidators(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * DelegatorValidator queries validator info for given delegator validator
   * pair.
   */
  async delegatorValidator(req: QueryDelegatorValidatorRequest, headers?: HeadersInit): Promise<QueryDelegatorValidatorResponse> {
    return Query.delegatorValidator(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** HistoricalInfo queries the historical info for given height. */
  async historicalInfo(req: QueryHistoricalInfoRequest, headers?: HeadersInit): Promise<QueryHistoricalInfoResponse> {
    return Query.historicalInfo(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Pool queries the pool info. */
  async pool(req: QueryPoolRequest, headers?: HeadersInit): Promise<QueryPoolResponse> {
    return Query.pool(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** Parameters queries the staking parameters. */
  async params(req: QueryParamsRequest, headers?: HeadersInit): Promise<QueryParamsResponse> {
    return Query.params(req, {
      headers,
      pathPrefix: this.url
    });
  }
}"
`;

exports[`GRPC-Gateway Service Client 1`] = `
"export class Service {
  /** Simulate simulates executing a transaction for estimating gas usage. */
  static simulate(request: SimulateRequest, initRequest?: fm.InitReq): Promise<SimulateResponse> {
    return fm.fetchReq(\`/cosmos/tx/v1beta1/simulate\`, {
      ...initRequest,
      method: "POST",
      body: JSON.stringify(request, fm.replacer)
    });
  }
  /** GetTx fetches a tx by hash. */
  static getTx(request: GetTxRequest, initRequest?: fm.InitReq): Promise<GetTxResponse> {
    return fm.fetchReq(\`/cosmos/tx/v1beta1/txs/\${request["hash"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["hash"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /** BroadcastTx broadcast transaction. */
  static broadcastTx(request: BroadcastTxRequest, initRequest?: fm.InitReq): Promise<BroadcastTxResponse> {
    return fm.fetchReq(\`/cosmos/tx/v1beta1/txs\`, {
      ...initRequest,
      method: "POST",
      body: JSON.stringify(request, fm.replacer)
    });
  }
  /** GetTxsEvent fetches txs by event. */
  static getTxsEvent(request: GetTxsEventRequest, initRequest?: fm.InitReq): Promise<GetTxsEventResponse> {
    return fm.fetchReq(\`/cosmos/tx/v1beta1/txs?\${fm.renderURLSearchParams({
      ...request
    }, [])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
  /**
   * GetBlockWithTxs fetches a block with decoded txs.
   * 
   * Since: cosmos-sdk 0.45.2
   */
  static getBlockWithTxs(request: GetBlockWithTxsRequest, initRequest?: fm.InitReq): Promise<GetBlockWithTxsResponse> {
    return fm.fetchReq(\`/cosmos/tx/v1beta1/txs/block/\${request["height"]}?\${fm.renderURLSearchParams({
      ...request
    }, ["height"])}\`, {
      ...initRequest,
      method: "GET"
    });
  }
}"
`;

exports[`GRPC-Gateway Service Client 2`] = `
"export class ServiceClientImpl {
  private readonly url: string;
  constructor(url: string) {
    this.url = url;
  }
  /** Simulate simulates executing a transaction for estimating gas usage. */
  async simulate(req: SimulateRequest, headers?: HeadersInit): Promise<SimulateResponse> {
    return Service.simulate(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** GetTx fetches a tx by hash. */
  async getTx(req: GetTxRequest, headers?: HeadersInit): Promise<GetTxResponse> {
    return Service.getTx(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** BroadcastTx broadcast transaction. */
  async broadcastTx(req: BroadcastTxRequest, headers?: HeadersInit): Promise<BroadcastTxResponse> {
    return Service.broadcastTx(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /** GetTxsEvent fetches txs by event. */
  async getTxsEvent(req: GetTxsEventRequest, headers?: HeadersInit): Promise<GetTxsEventResponse> {
    return Service.getTxsEvent(req, {
      headers,
      pathPrefix: this.url
    });
  }
  /**
   * GetBlockWithTxs fetches a block with decoded txs.
   * 
   * Since: cosmos-sdk 0.45.2
   */
  async getBlockWithTxs(req: GetBlockWithTxsRequest, headers?: HeadersInit): Promise<GetBlockWithTxsResponse> {
    return Service.getBlockWithTxs(req, {
      headers,
      pathPrefix: this.url
    });
  }
}"
`;
