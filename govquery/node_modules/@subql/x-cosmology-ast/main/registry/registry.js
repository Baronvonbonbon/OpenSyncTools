"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRegistryLoader = exports.createTypeRegistry = exports.createTypeRegistryObject = void 0;
const t = __importStar(require("@babel/types"));
const utils_1 = require("../utils");
const createTypeRegistryObject = (mutation) => {
    return t.objectProperty(t.stringLiteral(mutation.typeUrl), t.identifier(mutation.TypeName));
};
exports.createTypeRegistryObject = createTypeRegistryObject;
const createTypeRegistry = (context, mutations) => {
    const useTelescopeGeneratedType = context.pluginValue('prototypes.typingsFormat.useTelescopeGeneratedType');
    let generatedTypeExpr;
    if (useTelescopeGeneratedType) {
        context.addUtil('TelescopeGeneratedType');
        generatedTypeExpr = t.tsTypeReference(t.identifier('TelescopeGeneratedType'), t.tsTypeParameterInstantiation([
            t.tsAnyKeyword(),
            t.tsAnyKeyword(),
            t.tsAnyKeyword()
        ]));
    }
    else {
        context.addUtil('GeneratedType');
        generatedTypeExpr = t.tsTypeReference(t.identifier('GeneratedType'));
    }
    return t.exportNamedDeclaration(t.variableDeclaration('const', [
        t.variableDeclarator((0, utils_1.identifier)('registry', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('ReadonlyArray'), t.tsTypeParameterInstantiation([
            t.tsTupleType([
                t.tsStringKeyword(),
                generatedTypeExpr
            ])
        ])))), t.arrayExpression([
            ...mutations.map(mutation => t.arrayExpression([
                t.stringLiteral(mutation.typeUrl),
                t.identifier(mutation.TypeName)
            ]))
        ]))
    ]));
};
exports.createTypeRegistry = createTypeRegistry;
const createRegistryLoader = (context) => {
    context.addUtil('Registry');
    return t.exportNamedDeclaration(t.variableDeclaration('const', [
        t.variableDeclarator(t.identifier('load'), t.arrowFunctionExpression([
            (0, utils_1.identifier)('protoRegistry', t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Registry'))))
        ], t.blockStatement([
            t.expressionStatement(t.callExpression(t.memberExpression(t.identifier('registry'), t.identifier('forEach')), [
                t.arrowFunctionExpression([
                    t.arrayPattern([
                        t.identifier('typeUrl'),
                        t.identifier('mod')
                    ])
                ], t.blockStatement([
                    t.expressionStatement(t.callExpression(t.memberExpression(t.identifier('protoRegistry'), t.identifier('register')), [
                        t.identifier('typeUrl'),
                        t.identifier('mod')
                    ]))
                ]))
            ]))
        ])))
    ]));
};
exports.createRegistryLoader = createRegistryLoader;
