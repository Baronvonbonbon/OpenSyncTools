"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSDKMethod = exports.toSDKMethodFields = void 0;
const t = __importStar(require("@babel/types"));
const __1 = require("..");
const utils_1 = require("../../../utils");
const utils_2 = require("./utils");
const needsImplementation = (name, field) => {
    throw new Error(`need to implement toSDK (${field.type} rules[${field.rule}] name[${name}])`);
};
const toSDKMethodFields = (context, name, proto) => {
    const oneOfs = (0, __1.getOneOfs)(proto);
    const fields = Object.keys(proto.fields ?? {}).reduce((m, fieldName) => {
        const field = {
            name: fieldName,
            ...proto.fields[fieldName]
        };
        const isOneOf = oneOfs.includes(fieldName);
        const isOptional = (0, __1.getFieldOptionality)(context, field, isOneOf);
        const args = {
            context,
            field,
            isOptional
        };
        if (field.rule === 'repeated') {
            switch (field.type) {
                case 'string':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.string())];
                case 'bytes':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.bytes(args))];
                case 'bool':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.bool())];
                case 'double':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.double())];
                case 'float':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.float())];
                case 'int32':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.int32())];
                case 'sint32':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.sint32())];
                case 'uint32':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.uint32())];
                case 'fixed32':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.fixed32())];
                case 'sfixed32':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.sfixed32())];
                case 'int64':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.int64(args))];
                case 'sint64':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.sint64(args))];
                case 'uint64':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.uint64(args))];
                case 'fixed64':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.fixed64(args))];
                case 'sfixed64':
                    return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.sfixed64(args))];
                default:
                    switch (field.parsedType.type) {
                        case 'Enum':
                            return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.enum(args))];
                        case 'Type':
                            return [...m, utils_2.toSDK.array(args, utils_2.arrayTypes.type(args))];
                    }
                    return needsImplementation(fieldName, field);
            }
        }
        if (field.keyType) {
            switch (field.keyType) {
                case 'string':
                case 'int32':
                case 'sint32':
                case 'uint32':
                case 'fixed32':
                case 'sfixed32':
                case 'int64':
                case 'sint64':
                case 'uint64':
                case 'fixed64':
                case 'sfixed64':
                    return [...m, ...utils_2.toSDK.keyHash(args)];
                default:
                    return needsImplementation(fieldName, field);
            }
        }
        switch (field.type) {
            case 'string':
                return [...m, utils_2.toSDK.string(args)];
            case 'double':
                return [...m, utils_2.toSDK.double(args)];
            case 'float':
                return [...m, utils_2.toSDK.float(args)];
            case 'bytes':
                return [...m, utils_2.toSDK.bytes(args)];
            case 'bool':
                return [...m, utils_2.toSDK.bool(args)];
            case 'int32':
                return [...m, utils_2.toSDK.int32(args)];
            case 'sint32':
                return [...m, utils_2.toSDK.sint32(args)];
            case 'uint32':
                return [...m, utils_2.toSDK.uint32(args)];
            case 'fixed32':
                return [...m, utils_2.toSDK.fixed32(args)];
            case 'sfixed32':
                return [...m, utils_2.toSDK.sfixed32(args)];
            case 'int64':
                return [...m, utils_2.toSDK.int64(args)];
            case 'sint64':
                return [...m, utils_2.toSDK.sint64(args)];
            case 'uint64':
                return [...m, utils_2.toSDK.uint64(args)];
            case 'fixed64':
                return [...m, utils_2.toSDK.fixed64(args)];
            case 'sfixed64':
                return [...m, utils_2.toSDK.sfixed64(args)];
            case 'google.protobuf.Duration':
            case 'Duration':
                return [...m, utils_2.toSDK.duration(args)];
            case 'google.protobuf.Timestamp':
            case 'Timestamp':
                return [...m, utils_2.toSDK.timestamp(args)];
            default:
                switch (field.parsedType.type) {
                    case 'Enum':
                        return [...m, utils_2.toSDK.enum(args)];
                    case 'Type':
                        return [...m, utils_2.toSDK.type(args)];
                }
                return needsImplementation(fieldName, field);
        }
    }, []);
    return fields;
};
exports.toSDKMethodFields = toSDKMethodFields;
const toSDKMethod = (context, name, proto) => {
    const fields = (0, exports.toSDKMethodFields)(context, name, proto);
    let varName = 'message';
    if (!fields.length) {
        varName = '_';
    }
    const SDKTypeName = [name, 'SDKType']
        .filter(Boolean).join('');
    return (0, utils_1.objectMethod)('method', t.identifier('toSDK'), [
        (0, utils_1.identifier)(varName, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))))
    ], t.blockStatement([
        t.variableDeclaration('const', [
            t.variableDeclarator((0, utils_1.identifier)('obj', t.tsTypeAnnotation(t.tsAnyKeyword())), t.objectExpression([]))
        ]),
        ...fields,
        // RETURN 
        t.returnStatement(t.identifier('obj'))
    ]), false, false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(SDKTypeName))));
};
exports.toSDKMethod = toSDKMethod;
