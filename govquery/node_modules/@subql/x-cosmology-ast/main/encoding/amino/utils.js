"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.protoFieldsToArray = exports.arrayTypeNDim = exports.getAminoTypeName = exports.getTypeUrl = exports.getTypeUrlWithPkgAndName = void 0;
const t = __importStar(require("@babel/types"));
var x_cosmology_utils_1 = require("@subql/x-cosmology-utils");
Object.defineProperty(exports, "getTypeUrlWithPkgAndName", { enumerable: true, get: function () { return x_cosmology_utils_1.getTypeUrlWithPkgAndName; } });
Object.defineProperty(exports, "getTypeUrl", { enumerable: true, get: function () { return x_cosmology_utils_1.getTypeUrl; } });
Object.defineProperty(exports, "getAminoTypeName", { enumerable: true, get: function () { return x_cosmology_utils_1.getAminoTypeName; } });
const arrayTypeNDim = (body, n) => {
    if (!n || n <= 1)
        return t.tsArrayType(body);
    return t.tsArrayType((0, exports.arrayTypeNDim)(body, n - 1));
};
exports.arrayTypeNDim = arrayTypeNDim;
const protoFieldsToArray = (proto) => {
    return Object.keys(proto.fields).map(name => {
        return {
            name,
            ...proto.fields[name]
        };
    });
};
exports.protoFieldsToArray = protoFieldsToArray;
