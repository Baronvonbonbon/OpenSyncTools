"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayTypes = exports.fromAmino = void 0;
const t = __importStar(require("@babel/types"));
const utils_1 = require("../../../utils");
const index_1 = require("./index");
const utils_2 = require("../utils");
const proto_1 = require("../../proto");
exports.fromAmino = {
    defaultType(args) {
        if (args.field.name === args.context.aminoCaseField(args.field) && args.scope.length === 1) {
            return (0, utils_1.shorthandProperty)(args.field.name);
        }
        return t.objectProperty(t.identifier(args.field.name), (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField));
    },
    string(args) {
        if (args.field.name === args.context.aminoCaseField(args.field) && args.scope.length === 1) {
            return (0, utils_1.shorthandProperty)(args.field.name);
        }
        return t.objectProperty(t.identifier(args.field.name), (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField));
    },
    rawBytes(args) {
        args.context.addUtil('toUtf8');
        return t.objectProperty(t.identifier(args.field.name), t.callExpression(t.identifier('toUtf8'), [
            t.callExpression(t.memberExpression(t.identifier('JSON'), t.identifier('stringify')), [
                (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
            ])
        ]));
    },
    wasmByteCode(args) {
        args.context.addUtil('fromBase64');
        return t.objectProperty(t.identifier(args.field.name), t.callExpression(t.identifier('fromBase64'), [
            (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
        ]));
    },
    long(args) {
        utils_1.TypeLong.addUtil(args.context);
        return t.objectProperty(t.identifier(args.field.name), t.callExpression(utils_1.TypeLong.getFromString(args.context), [
            (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
        ]));
    },
    duration(args) {
        const durationFormat = args.context.pluginValue('prototypes.typingsFormat.duration');
        switch (durationFormat) {
            case 'duration':
            // TODO duration amino type
            case 'string':
            default:
                return exports.fromAmino.durationString(args);
        }
    },
    durationString(args) {
        utils_1.TypeLong.addUtil(args.context);
        const value = t.objectExpression([
            t.objectProperty(t.identifier('seconds'), t.callExpression(utils_1.TypeLong.getFromNumber(args.context), [
                t.callExpression(t.memberExpression(t.identifier('Math'), t.identifier('floor')), [
                    t.binaryExpression('/', t.callExpression(t.identifier('parseInt'), [
                        (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
                    ]), utils_1.BILLION)
                ])
            ])),
            t.objectProperty(t.identifier('nanos'), t.binaryExpression('%', t.callExpression(t.identifier('parseInt'), [
                (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
            ]), utils_1.BILLION))
        ]);
        return t.objectProperty(t.identifier(args.field.name), value);
    },
    height(args) {
        utils_1.TypeLong.addUtil(args.context);
        const longType = utils_1.TypeLong.getType(args.context);
        let revisionHeightArgs = [
            t.logicalExpression('||', t.memberExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField), t.identifier(args.context.aminoCasingFn('revision_height'))), t.stringLiteral('0'))
        ];
        let revisionNumberArgs = [
            t.logicalExpression('||', t.memberExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField), t.identifier(args.context.aminoCasingFn('revision_number'))), t.stringLiteral('0'))
        ];
        if (longType == 'Long') {
            revisionHeightArgs.push(t.booleanLiteral(true));
            revisionNumberArgs.push(t.booleanLiteral(true));
        }
        return t.objectProperty(t.identifier(args.field.name), t.conditionalExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField), t.objectExpression([
            t.objectProperty(t.identifier('revisionHeight'), t.callExpression(utils_1.TypeLong.getFromString(args.context), revisionHeightArgs)),
            t.objectProperty(t.identifier('revisionNumber'), t.callExpression(utils_1.TypeLong.getFromString(args.context), revisionNumberArgs))
        ]), t.identifier('undefined')));
    },
    enum({ context, field, currentProtoPath, scope, fieldPath, nested, isOptional }) {
        const enumFunction = context.lookupEnumFromJson(field, currentProtoPath);
        const value = t.callExpression(t.identifier(enumFunction), [
            (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(fieldPath, context.aminoCaseField)
        ]);
        return t.objectProperty(t.identifier(field.name), value);
    },
    enumArray({ context, field, currentProtoPath, scope, fieldPath, nested, isOptional }) {
        const enumFunction = context.lookupEnumFromJson(field, currentProtoPath);
        const value = t.callExpression(t.memberExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(fieldPath, context.aminoCaseField), t.identifier('map')), [
            t.arrowFunctionExpression([
                t.identifier('el')
            ], t.callExpression(t.identifier(enumFunction), [
                t.identifier('el')
            ]))
        ]);
        return t.objectProperty(t.identifier(field.name), value);
    },
    type({ context, field, currentProtoPath, scope, fieldPath, nested, isOptional }) {
        const parentField = field;
        const Type = context.getTypeFromCurrentPath(field, currentProtoPath);
        const oneOfs = (0, proto_1.getOneOfs)(Type);
        const properties = (0, utils_2.protoFieldsToArray)(Type).map(field => {
            const isOneOf = oneOfs.includes(field.name);
            const isOptional = (0, proto_1.getFieldOptionality)(context, field, isOneOf);
            if (parentField.import)
                currentProtoPath = parentField.import;
            return (0, index_1.fromAminoParseField)({
                context,
                field,
                currentProtoPath,
                scope: [...scope],
                fieldPath: [...fieldPath],
                nested: nested + 1,
                isOptional // TODO how to handle nested optionality?
            });
        });
        return t.objectProperty(t.identifier(field.name), t.objectExpression(properties));
    },
    arrayFrom(args) {
        return t.objectProperty(t.identifier(args.field.name), t.callExpression(t.memberExpression(t.identifier('Array'), t.identifier('from')), [
            (0, utils_1.memberExpressionOrIdentifierAminoCaseField)(args.fieldPath, args.context.aminoCaseField)
        ]));
    },
    typeArray({ context, field, currentProtoPath, scope, fieldPath, nested, isOptional }) {
        //////
        const variable = 'el' + nested;
        const f = JSON.parse(JSON.stringify(field)); // clone
        const varProto = {
            ...f
        };
        varProto.name = variable;
        varProto.options['(telescope:orig)'] = variable;
        varProto.options['(telescope:name)'] = variable;
        varProto.options['(telescope:camel)'] = variable;
        //////
        const parentField = field;
        const Type = context.getTypeFromCurrentPath(field, currentProtoPath);
        const oneOfs = (0, proto_1.getOneOfs)(Type);
        const properties = (0, utils_2.protoFieldsToArray)(Type).map(field => {
            const isOneOf = oneOfs.includes(field.name);
            const isOptional = (0, proto_1.getFieldOptionality)(context, field, isOneOf);
            if (parentField.import)
                currentProtoPath = parentField.import;
            return (0, index_1.fromAminoParseField)({
                context,
                field,
                currentProtoPath,
                scope: [variable],
                fieldPath: [varProto],
                nested: nested + 1,
                isOptional // TODO how to handle nested optionality?
            });
        });
        const expr = t.callExpression(t.memberExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(fieldPath, context.aminoCaseField), t.identifier('map')), [
            t.arrowFunctionExpression([
                t.identifier(variable)
            ], t.objectExpression(properties))
        ]);
        return t.objectProperty(t.identifier(field.name), expr);
    },
    scalarArray({ context, field, currentProtoPath, scope, fieldPath, nested, isOptional }, arrayTypeAstFunc) {
        const variable = 'el' + nested;
        const expr = t.callExpression(t.memberExpression((0, utils_1.memberExpressionOrIdentifierAminoCaseField)(fieldPath, context.aminoCaseField), t.identifier('map')), [
            t.arrowFunctionExpression([
                t.identifier(variable)
            ], arrayTypeAstFunc(variable, context))
        ]);
        return t.objectProperty(t.identifier(field.name), expr);
    },
    pubkey(args) {
        args.context.addUtil('encodePubkey');
        return t.objectProperty(t.identifier(args.field.name), t.callExpression(t.identifier('encodePubkey'), [
            t.identifier('pubkey')
        ]));
    }
};
exports.arrayTypes = {
    long(varname, ctx) {
        utils_1.TypeLong.addUtil(ctx);
        return t.callExpression(utils_1.TypeLong.getFromString(ctx), [
            t.identifier(varname)
        ]);
    }
};
