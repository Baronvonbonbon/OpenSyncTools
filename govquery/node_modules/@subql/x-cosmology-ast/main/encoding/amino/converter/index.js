"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAminoConverter = exports.createAminoConverterItem = void 0;
const t = __importStar(require("@babel/types"));
const to_amino_json_1 = require("../to-amino-json");
const from_amino_json_1 = require("../from-amino-json");
const utils_1 = require("../utils");
const createAminoConverterItem = ({ root, context, proto }) => {
    const typeUrl = (0, utils_1.getTypeUrl)(root, proto);
    const aminoType = (0, utils_1.getAminoTypeName)(context, root, proto);
    const toAmino = !context.options.aminoEncoding.useLegacyInlineEncoding ?
        t.memberExpression(t.identifier(proto.name), t.identifier('toAmino')) : (0, to_amino_json_1.toAminoJsonMethod)({
        context,
        proto
    });
    const fromAmino = !context.options.aminoEncoding.useLegacyInlineEncoding ?
        t.memberExpression(t.identifier(proto.name), t.identifier('fromAmino')) : (0, from_amino_json_1.fromAminoJsonMethod)({
        context,
        proto
    });
    return t.objectProperty(t.stringLiteral(typeUrl), t.objectExpression([
        t.objectProperty(t.identifier('aminoType'), t.stringLiteral(aminoType)),
        t.objectProperty(t.identifier('toAmino'), toAmino),
        t.objectProperty(t.identifier('fromAmino'), fromAmino)
    ]));
};
exports.createAminoConverterItem = createAminoConverterItem;
const createAminoConverter = ({ name, root, context, protos }) => {
    const items = protos.map(proto => {
        return (0, exports.createAminoConverterItem)({
            context,
            root,
            proto
        });
    });
    return t.exportNamedDeclaration(t.variableDeclaration('const', [
        t.variableDeclarator(t.identifier(name), t.objectExpression(items))
    ]));
};
exports.createAminoConverter = createAminoConverter;
