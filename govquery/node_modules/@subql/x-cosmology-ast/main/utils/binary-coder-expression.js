"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryCoder = void 0;
const t = __importStar(require("@babel/types"));
exports.BinaryCoder = {
    addUtil: (ctx, type) => {
        if (!ctx) {
            return;
        }
        const longLib = ctx.pluginValue('prototypes.typingsFormat.num64');
        type = type?.trim().toLowerCase();
        switch (longLib) {
            case 'long':
                ctx.addUtil('_m0');
                break;
            case 'bigint':
                if (!type || type === 'both' || type === 'reader') {
                    ctx.addUtil('BinaryReader');
                }
                if (!type || type === 'both' || type === 'writer') {
                    ctx.addUtil('BinaryWriter');
                }
                break;
        }
    },
    getNode: (ctx, mappings) => {
        const longLib = ctx.pluginValue('prototypes.typingsFormat.num64');
        return mappings[longLib] ?? mappings['long'];
    },
    readerMemberExp: {
        bigint: t.identifier('BinaryReader'),
        long: t.memberExpression(t.identifier('_m0'), t.identifier('Reader'))
    },
    writerMemberExp: {
        bigint: t.identifier('BinaryWriter'),
        long: t.memberExpression(t.identifier('_m0'), t.identifier('Writer'))
    },
    readerTypeRef: {
        bigint: t.tsTypeReference(t.identifier('BinaryReader')),
        long: t.tsTypeReference(t.tsQualifiedName(t.identifier('_m0'), t.identifier('Reader')), null)
    },
    writerTypeRef: {
        bigint: t.tsTypeReference(t.identifier('BinaryWriter')),
        long: t.tsTypeReference(t.tsQualifiedName(t.identifier('_m0'), t.identifier('Writer')), null)
    },
    getReaderMemberExp: (ctx) => {
        return exports.BinaryCoder.getNode(ctx, exports.BinaryCoder.readerMemberExp);
    },
    getWriterMemberExp: (ctx) => {
        return exports.BinaryCoder.getNode(ctx, exports.BinaryCoder.writerMemberExp);
    },
    getReaderTypeRef: (ctx) => {
        return exports.BinaryCoder.getNode(ctx, exports.BinaryCoder.readerTypeRef);
    },
    getWriterTypeRef: (ctx) => {
        return exports.BinaryCoder.getNode(ctx, exports.BinaryCoder.writerTypeRef);
    }
};
