"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.documentRpcClientsReadme = exports.documentRpcClients = exports.documentRpcClient = void 0;
const utils_1 = require("../utils");
const generator_1 = __importDefault(require("@babel/generator"));
const t = __importStar(require("@babel/types"));
const x_cosmology_utils_1 = require("@subql/x-cosmology-utils");
const x_cosmology_utils_2 = require("@subql/x-cosmology-utils");
const documentRpcClient = (context, service) => {
    const methods = Object.entries(service.svc.methods).reduce((m, [key, method]) => {
        const variable = t.variableDeclaration('const', [
            t.variableDeclarator((0, utils_1.identifier)('request', t.tsTypeAnnotation(t.tsTypeReference(t.identifier(method.requestType)))))
        ]);
        if (method.comment) {
            variable.leadingComments = [(0, utils_1.makeCommentBlock)(method.comment)];
        }
        else {
            variable.leadingComments = [(0, utils_1.makeCommentBlock)(method.name)];
        }
        const methodName = context.pluginValue('rpcClients.camelCase') ? (0, x_cosmology_utils_1.camel)(method.name) : method.name;
        return [
            ...m,
            {
                service,
                method,
                methodName,
                asts: [
                    variable,
                    //
                    t.variableDeclaration('const', [
                        t.variableDeclarator(t.identifier('result'), t.awaitExpression(t.callExpression((0, utils_1.memberExpressionOrIdentifier)([methodName, ...service.ref.proto.package.split('.').reverse()]), [t.identifier('request')])))
                    ])
                ]
            }
        ];
    }, []);
    return methods;
};
exports.documentRpcClient = documentRpcClient;
const documentRpcClients = (context, services) => {
    const svcs = Object.entries(services).reduce((m, [pkg, refs]) => {
        const res = refs.reduce((m2, ref) => {
            const proto = (0, x_cosmology_utils_2.getNestedProto)(ref.proto);
            // TODO generic service types...
            if (proto.Query) {
                return [
                    ...m2, { svc: proto.Query, ref }
                ];
            }
            if (proto.Service) {
                return [
                    ...m2, { svc: proto.Service, ref }
                ];
            }
            return m2;
        }, []);
        return [...m, ...res];
    }, []);
    //////
    return svcs.reduce((m, svc) => {
        return [...m, ...(0, exports.documentRpcClient)(context, svc)];
    }, []);
};
exports.documentRpcClients = documentRpcClients;
const replaceChars = (str) => {
    return str.split(' ').map(s => {
        return s.replace(/\W/g, '');
    }).join('-').toLowerCase();
};
const documentRpcClientsReadme = (context, services) => {
    const results = (0, exports.documentRpcClients)(context, services);
    const toc = results.map(res => {
        const pkg = res.service.ref.proto.package;
        const slug = replaceChars(`${pkg}.${res.methodName} RPC`);
        return `[\`${pkg}.${res.methodName}()\` RPC](#${slug})`;
    });
    const lines = results.map(res => {
        const pkg = res.service.ref.proto.package;
        const ast = t.program(res.asts);
        const code = (0, generator_1.default)(ast).code;
        return `##### \`${pkg}.${res.methodName}()\` RPC

${res.method.name}

\`\`\`js
${code}
\`\`\`
`;
    });
    const pkg = results[0].service.ref.proto.package;
    return `
## Table of Contents

${toc.join('\n')}

### \`${pkg}\` RPC

${lines.join('\n')}
`;
};
exports.documentRpcClientsReadme = documentRpcClientsReadme;
