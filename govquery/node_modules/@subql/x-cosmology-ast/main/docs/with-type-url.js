"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.documentWithTypeUrlReadme = exports.documentWithTypeUrl = void 0;
const utils_1 = require("../utils");
const t = __importStar(require("@babel/types"));
const generator_1 = __importDefault(require("@babel/generator"));
const x_cosmology_utils_1 = require("@subql/x-cosmology-utils");
const documentWithTypeUrl = (mutations) => {
    const path = mutations[0].package.split('.');
    return t.variableDeclaration('const', [
        t.variableDeclarator(t.objectPattern(mutations.map(mutation => {
            const obj = t.objectProperty(t.identifier((0, x_cosmology_utils_1.camel)(mutation.methodName)), t.identifier((0, x_cosmology_utils_1.camel)(mutation.methodName)), false, true);
            // typeUrl: `/${mutation.package}.${mutation.message}`,
            obj.leadingComments = mutation.comment ? [(0, utils_1.makeCommentBlock)(mutation.comment)] : [];
            return obj;
        })), (0, utils_1.memberExpressionOrIdentifier)([
            'withTypeUrl', 'MessageComposer', ...(path.reverse())
        ]))
    ]);
};
exports.documentWithTypeUrl = documentWithTypeUrl;
const documentWithTypeUrlReadme = (mutations) => {
    const ast = (0, exports.documentWithTypeUrl)(mutations);
    const code = (0, generator_1.default)(ast).code;
    return `
#### \`${mutations[0].package}\` messages

\`\`\`js
${code}
\`\`\`
    `;
};
exports.documentWithTypeUrlReadme = documentWithTypeUrlReadme;
