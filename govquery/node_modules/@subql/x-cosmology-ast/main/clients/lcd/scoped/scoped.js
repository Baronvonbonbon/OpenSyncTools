"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScopedLCDFactory = exports.lcdNestedImportObject = exports.lcdRecursiveObjectProps = exports.lcdNewAwaitImport = exports.lcdClassArguments = exports.lcdFuncArguments = exports.lcdArguments = void 0;
const t = __importStar(require("@babel/types"));
const utils_1 = require("../../../utils");
const lcdArguments = () => {
    return [
        t.objectProperty(t.identifier('requestClient'), t.identifier('requestClient'), false, true)
    ];
};
exports.lcdArguments = lcdArguments;
const lcdFuncArguments = () => {
    return [
        (0, utils_1.objectPattern)([
            t.objectProperty(t.identifier('restEndpoint'), t.identifier('restEndpoint'), false, true)
        ], t.tsTypeAnnotation(t.tsTypeLiteral([
            t.tsPropertySignature(t.identifier('restEndpoint'), t.tsTypeAnnotation(t.tsStringKeyword()))
        ])))
    ];
};
exports.lcdFuncArguments = lcdFuncArguments;
const lcdClassArguments = () => {
    return [
        t.objectExpression((0, exports.lcdArguments)())
    ];
};
exports.lcdClassArguments = lcdClassArguments;
const lcdNewAwaitImport = (path, className, _arguments) => {
    return t.newExpression(t.memberExpression(t.awaitExpression(t.callExpression(t.import(), [
        t.stringLiteral(path)
    ])), t.identifier(className), false), _arguments);
};
exports.lcdNewAwaitImport = lcdNewAwaitImport;
const lcdRecursiveObjectProps = (names, leaf) => {
    const [name, ...rest] = names;
    let baseComponent;
    if (names.length === 1) {
        baseComponent = leaf ? leaf : t.identifier(name);
    }
    else {
        baseComponent = (0, exports.lcdRecursiveObjectProps)(rest, leaf);
    }
    return t.objectExpression([
        t.objectProperty(t.identifier(name), baseComponent)
    ]);
};
exports.lcdRecursiveObjectProps = lcdRecursiveObjectProps;
const lcdNestedImportObject = (obj, className, _arguments) => {
    if (typeof obj === 'string') {
        return (0, exports.lcdNewAwaitImport)(obj, className, _arguments);
    }
    const keys = Object.keys(obj);
    return t.objectExpression(keys.map(name => {
        return t.objectProperty(t.identifier(name), (0, exports.lcdNestedImportObject)(obj[name], className, _arguments));
    }));
};
exports.lcdNestedImportObject = lcdNestedImportObject;
const createScopedLCDFactory = (context, obj, identifier, className) => {
    context.addUtil('LCDClient');
    return t.exportNamedDeclaration(t.variableDeclaration('const', [
        t.variableDeclarator(t.identifier(identifier), t.arrowFunctionExpression((0, exports.lcdFuncArguments)(), 
        //
        t.blockStatement([
            t.variableDeclaration('const', [
                t.variableDeclarator(t.identifier('requestClient'), t.newExpression(t.identifier('LCDClient'), [
                    t.objectExpression([
                        t.objectProperty(t.identifier('restEndpoint'), t.identifier('restEndpoint'), false, true)
                    ])
                ]))
            ]),
            ////
            t.returnStatement((0, exports.lcdNestedImportObject)(obj, className, (0, exports.lcdClassArguments)())),
        ]), 
        // lcdNestedImportObject(
        //     obj,
        //     className,
        //     lcdClassArguments()
        // ),
        true))
    ]));
};
exports.createScopedLCDFactory = createScopedLCDFactory;
