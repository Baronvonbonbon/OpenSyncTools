"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScopedGrpcGatewayFactory = exports.grpcGatewayClientScaffold = void 0;
const t = __importStar(require("@babel/types"));
const grpc_web_1 = require("./grpc-web");
// endpoint = endpoint.replace(/\/*$/g, "");
const grpcGatewayClientScaffold = () => {
    return [
        t.expressionStatement(t.assignmentExpression("=", t.identifier('endpoint'), t.callExpression(t.memberExpression(t.identifier('endpoint'), t.identifier('replace')), [
            t.regExpLiteral("\\/*$", "g"),
            t.stringLiteral("")
        ])))
    ];
};
exports.grpcGatewayClientScaffold = grpcGatewayClientScaffold;
const grpcGatewayNewAwaitImport = (path, className) => {
    return t.newExpression(t.memberExpression(t.awaitExpression(t.callExpression(t.import(), [
        t.stringLiteral(path)
    ])), t.identifier(className), false), [
        t.identifier('endpoint')
    ]);
};
const grpcGatewayNestedImportObject = (obj, className) => {
    //make className dynamic based on object
    if (typeof obj === 'string') {
        const serviceType = obj.split(".").pop();
        switch (serviceType) {
            case "Query":
                className = 'QueryClientImpl';
                //   console.log("This is a Query RPC.");          
                break;
            case "Service":
                className = 'ServiceClientImpl';
                //   console.log("This is a Service RPC.");
                break;
            case "msg":
                className = 'MsgClientImpl';
                //   console.log("This is a Message RPC.");
                break;
            default:
                console.log("grpc service error!! This should not happend. Undefined service type");
        }
        return grpcGatewayNewAwaitImport(obj, className);
    }
    const keys = Object.keys(obj);
    return t.objectExpression(keys.map(name => {
        return t.objectProperty(t.identifier(name), grpcGatewayNestedImportObject(obj[name], className));
    }));
};
const createScopedGrpcGatewayFactory = (context, obj, identifier) => {
    return t.exportNamedDeclaration(t.variableDeclaration('const', [
        t.variableDeclarator(
        // createGrpcGatewayQueryClient
        t.identifier(identifier), t.arrowFunctionExpression((0, grpc_web_1.grpcFuncArguments)(), t.blockStatement((0, exports.grpcGatewayClientScaffold)().concat(t.returnStatement(grpcGatewayNestedImportObject(obj, 'Query' //doesn't really matter here, remove if not prove useful
        )))), true))
    ]));
};
exports.createScopedGrpcGatewayFactory = createScopedGrpcGatewayFactory;
