"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTelescopeOptions = exports.TelescopeLogLevel = void 0;
const aminos_1 = require("./aminos");
const case_1 = require("case");
var TelescopeLogLevel;
(function (TelescopeLogLevel) {
    TelescopeLogLevel[TelescopeLogLevel["None"] = 0] = "None";
    TelescopeLogLevel[TelescopeLogLevel["Info"] = 1] = "Info";
    TelescopeLogLevel[TelescopeLogLevel["Warn"] = 2] = "Warn";
    TelescopeLogLevel[TelescopeLogLevel["Error"] = 3] = "Error";
    TelescopeLogLevel[TelescopeLogLevel["Debug"] = 4] = "Debug";
})(TelescopeLogLevel = exports.TelescopeLogLevel || (exports.TelescopeLogLevel = {}));
exports.defaultTelescopeOptions = {
    // global options (can be overridden through plugins)
    env: 'default',
    removeUnusedImports: true,
    classesUseArrowFunctions: false,
    useSDKTypes: true,
    includeExternalHelpers: false,
    logLevel: TelescopeLogLevel.None,
    interfaces: {
        enabled: true,
        useByDefault: true,
        useByDefaultRpc: true,
        useUnionTypes: false,
    },
    prototypes: {
        enabled: true,
        parser: {
            keepCase: false,
            alternateCommentMode: true,
            preferTrailingComment: false
        },
        methods: {
            encode: true,
            decode: true,
            fromJSON: false,
            toJSON: false,
            fromPartial: true,
            toSDK: false,
            fromSDK: false,
            fromSDKJSON: false,
            toAmino: true,
            fromAmino: true,
            toProto: true,
            fromProto: true,
        },
        strictNullCheckForPrototypeMethods: false,
        includePackageVar: false,
        fieldDefaultIsOptional: false,
        allowUndefinedTypes: false,
        useOptionalNullable: true,
        addTypeUrlToObjects: true,
        addAminoTypeToObjects: false,
        addTypeUrlToDecoders: true,
        enableRegistryLoader: true,
        enableMessageComposer: true,
        optionalQueryParams: false,
        optionalPageRequests: false,
        typingsFormat: {
            customTypes: {
                useCosmosSDKDec: true
            },
            num64: 'bigint',
            useDeepPartial: false,
            useExact: false,
            timestamp: 'date',
            duration: 'duration',
            updatedDuration: false,
            setDefaultEnumToUnrecognized: true,
        },
    },
    bundle: {
        enabled: true
    },
    tsDisable: {
        files: [],
        patterns: [],
        disableAll: false
    },
    eslintDisable: {
        files: [],
        patterns: [],
        disableAll: false
    },
    stargateClients: {
        enabled: true,
        includeCosmosDefaultTypes: true
    },
    aminoEncoding: {
        enabled: true,
        customTypes: {
            useCosmosSDKDec: false
        },
        casingFn: case_1.snake,
        exceptions: {
            ...aminos_1.DEFAULT_AMINO_EXCEPTIONS
        },
    },
    lcdClients: {
        bundle: true,
        enabled: true,
        scopedIsExclusive: true
    },
    rpcClients: {
        type: 'tendermint',
        enabled: true,
        extensions: true,
        inline: false,
        bundle: true,
        camelCase: true,
        enabledServices: [
            'Msg',
            'Query',
            'Service'
        ],
        scopedIsExclusive: true
    },
    reactQuery: {
        enabled: false,
        include: {
            patterns: [],
            packages: [],
            protos: []
        },
    },
    mobx: {
        enabled: false,
        include: {
            patterns: [],
            packages: [],
            protos: []
        }
    },
    pinia: {
        enabled: false,
        include: {
            patterns: [],
            packages: [],
            protos: []
        }
    },
    // packages
    packages: {
        cosmos: {
            stargateClients: {
                enabled: true,
                includeCosmosDefaultTypes: false
            }
        },
        osmosis: {
            aminoEncoding: {
                casingFn: case_1.camel
            }
        }
    }
};
