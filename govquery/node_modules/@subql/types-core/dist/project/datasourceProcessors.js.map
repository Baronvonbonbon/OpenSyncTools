{"version":3,"file":"datasourceProcessors.js","sourceRoot":"","sources":["../../src/project/datasourceProcessors.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {DictionaryQueryEntry} from './types';\nimport {BaseCustomDataSource} from './versioned';\n\n/**\n * Maps a handler kind to the data type\n * @example {\n * 'block': BlockType,\n * 'transaction': TransactionType,\n * 'event': EventType,\n * }*/\nexport type HandlerInputMap = Record<string, any>;\n\nexport interface HandlerInputTransformer_0_0_0<\n  Input,\n  DS extends BaseCustomDataSource,\n  API,\n  E, // Output type\n> {\n  (input: Input, ds: DS, api: API, assets?: Record<string, string>): Promise<E>;\n}\n\nexport interface HandlerInputTransformer_1_0_0<\n  Input,\n  DS extends BaseCustomDataSource,\n  API,\n  F extends Record<string, unknown>,\n  E, // Output type\n> {\n  (params: {input: Input; ds: DS; api: API; filter?: F; assets?: Record<string, string>}): Promise<E[]>;\n}\n\ninterface SecondLayerHandlerProcessorBase<\n  BaseFilterMap extends HandlerInputMap,\n  K extends keyof BaseFilterMap,\n  F extends Record<string, unknown>,\n  DS extends BaseCustomDataSource,\n> {\n  baseHandlerKind: K;\n  baseFilter: BaseFilterMap[K] | BaseFilterMap[K][];\n  filterValidator: (filter?: F) => void;\n  dictionaryQuery?: (filter: F, ds: DS) => DictionaryQueryEntry | undefined;\n}\n\n// only allow one custom handler for each baseHandler kind\nexport interface SecondLayerHandlerProcessor_0_0_0<\n  InputKinds extends string | symbol,\n  HandlerInput extends Record<InputKinds, any>,\n  BaseHandlerFilters extends Record<InputKinds, any>,\n  F extends Record<string, unknown>,\n  E,\n  DS extends BaseCustomDataSource,\n  API,\n> extends SecondLayerHandlerProcessorBase<BaseHandlerFilters, InputKinds, F, DS> {\n  specVersion: undefined;\n  transformer: HandlerInputTransformer_0_0_0<HandlerInput[InputKinds], DS, API, E>;\n  filterProcessor: (filter: F | undefined, input: HandlerInput[InputKinds], ds: DS) => boolean;\n}\n\nexport interface SecondLayerHandlerProcessor_1_0_0<\n  InputKinds extends string | symbol,\n  HandlerInput extends Record<InputKinds, any>,\n  BaseHandlerFilters extends Record<InputKinds, any>,\n  F extends Record<string, unknown>,\n  E,\n  DS extends BaseCustomDataSource,\n  API,\n> extends SecondLayerHandlerProcessorBase<BaseHandlerFilters, InputKinds, F, DS> {\n  specVersion: '1.0.0';\n  transformer: HandlerInputTransformer_1_0_0<HandlerInput[InputKinds], DS, API, F, E>;\n  filterProcessor: (params: {filter: F | undefined; input: HandlerInput[InputKinds]; ds: DS}) => boolean;\n}\n\nexport type SecondLayerHandlerProcessor<\n  InputKinds extends string | symbol,\n  HandlerInput extends Record<InputKinds, any>,\n  BaseHandlerFilters extends Record<InputKinds, any>,\n  F extends Record<string, unknown>,\n  E,\n  DS extends BaseCustomDataSource,\n  API,\n> =\n  | SecondLayerHandlerProcessor_0_0_0<InputKinds, HandlerInput, BaseHandlerFilters, F, E, DS, API>\n  | SecondLayerHandlerProcessor_1_0_0<InputKinds, HandlerInput, BaseHandlerFilters, F, E, DS, API>;\n"]}