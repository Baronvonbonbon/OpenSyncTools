{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/project/versioned/v1_0_0/types.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {IProjectNetworkConfig} from '../../types';\nimport {BaseDataSource, BaseTemplateDataSource} from '../base';\n\n/**\n * Represents specifications for an indexer runner.\n * @interface\n */\nexport interface RunnerSpecs {\n  /**\n   * The specifications for a node.\n   * @type {NodeSpec}\n   */\n  node: NodeSpec;\n\n  /**\n   * The specifications for a query.\n   * @type {QuerySpec}\n   */\n  query: QuerySpec;\n}\n\n/**\n * Represents specifications for a node.\n * @interface\n * @example\n * // Example of a substrate based NodeSpec\n * const nodeSpec = {\n *   name: '@subql/node'\n *   version: '^2.15.0'\n *   options: {\n *     historical: true\n *   }\n * }\n */\nexport interface NodeSpec {\n  /**\n   * The name of the indexer node.\n   * @type {string}\n   */\n  name: string;\n\n  /**\n   * The version number of the indexer node.\n   * @type {string}\n   * @default \"*\"\n   */\n  version: string;\n\n  /**\n   * Additional options for the node (optional).\n   * @type {NodeOptions}\n   */\n  options?: NodeOptions;\n}\n\n/**\n * Represents specifications for a query.\n * @interface\n */\nexport interface QuerySpec {\n  /**\n   * The name of the query service.\n   * @type {string}\n   * @default \"@subql/query\"\n   */\n  name: string;\n  /**\n   * The version number of the query service.\n   * @type {string}\n   * @default \"*\"\n   */\n  version: string;\n}\n\n/**\n * Represents optional configuration options for a node.\n * @interface\n */\nexport interface NodeOptions {\n  /**\n   * Indicates whether historical state tracking is enabled for the indexer (optional).\n   * @type {boolean}\n   * @default \"true\"\n   */\n  historical?: boolean;\n\n  /**\n   * Indicates whether unsafe mode are allowed for the indexer (optional).\n   *\n   * Unsafe mode controls various features that compromise the determinsm of a SubQuery project.\n   * Unsafe allows any imports which greatly increases functionality with the tradeoff of decreased security\n   * @type {boolean}\n   * @default \"false\"\n   */\n  unsafe?: boolean;\n\n  /**\n   * Indicates whether unfinalized blocks are supported by the indexer (optional).\n   *\n   * This allows you to index blocks before they become finalized.\n   * It can be very useful if you want the most up-to-date data possible.\n   * It will detect any forks and remove any blocks that don't become finalized.\n   * @type {boolean}\n   * @default \"false\"\n   */\n  unfinalizedBlocks?: boolean;\n\n  /**\n   * Indicates whether transaction skipping is enabled for the indexer. (optional).\n   * If this is enabled and the project only contains event handlers then it wont fetch transactions reducing memory footprint and RPC requests. This can lead to faster indexing.\n   * @type {boolean}\n   */\n  skipTransactions?: boolean;\n}\n\n/**\n * Represents a parent project configuration.\n * @interface\n */\nexport interface ParentProject {\n  /**\n   * The block height at which to switch from the parent project to this project.\n   * @deprecated Please use `untilBlock` instead\n   * @type {number}\n   * @description The block height to switch from the parent project to this project.\n   */\n  block: number;\n\n  /**\n   * The block height at which to switch from the parent project to this project.\n   * @type {number}\n   * @description The block height to switch from the parent project to this project.\n   */\n  untilBlock: number;\n\n  /**\n   * The IPFS CID (Content Identifier) referencing the parent project.\n   * @type {string}\n   * @description The IPFS CID to the parent project.\n   */\n  reference: string;\n}\n\nexport interface ProjectManifestV1_0_0<\n  D extends BaseDataSource = BaseDataSource,\n  T extends BaseTemplateDataSource<D> = BaseTemplateDataSource<D>,\n  C extends IProjectNetworkConfig = IProjectNetworkConfig,\n> {\n  name?: string;\n  version: string;\n  schema: {\n    file: string;\n  };\n  specVersion: string;\n  repository?: string;\n  description?: string;\n  templates?: T[];\n  dataSources: D[];\n  runner: RunnerSpecs;\n  network: C;\n  parent?: ParentProject;\n}\n\nexport interface BlockFilter {\n  /**\n   * The modulo value for filtering blocks (optional).\n   * @type {number}\n   * @example\n   * modulo: 5, // every 5 blocks will be indexed\n   */\n  modulo?: number;\n\n  /**\n   * A cron expression will index blocks at an interval (optional).\n   * @type {string}\n   * @example\n   * timestamp: \"\\*\\/5 * * * *\"\n   */\n  timestamp?: string;\n}\n"]}