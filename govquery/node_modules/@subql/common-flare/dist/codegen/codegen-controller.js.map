{"version":3,"file":"codegen-controller.js","sourceRoot":"","sources":["../../src/codegen/codegen-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport {Interface, EventFragment, FunctionFragment} from '@ethersproject/abi';\nimport {FileReference} from '@subql/types-core';\nimport {EthereumHandlerKind, SubqlRuntimeDatasource} from '@subql/types-flare';\nimport {Data} from 'ejs';\nimport {runTypeChain, glob, parseContractPath} from 'typechain';\nimport {isCustomDs, isRuntimeDs} from '../project';\nimport {CUSTOM_EVM_HANDLERS} from './constants';\nimport {loadReadAbi} from './utils';\n\nconst RECONSTRUCTED_FACTORIES_TS = path.resolve(__dirname, '../../templates/factories-index.ts.ejs');\nconst RECONSTRUCTED_CONTRACTS_TS = path.resolve(__dirname, '../../templates/contracts-index.ts.ejs');\nconst ABI_INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../../templates/abi-interface.ts.ejs');\nconst ABI_INTERFACES_ROOT_DIR = 'src/types/abi-interfaces';\nconst CONTRACTS_DIR = 'src/types/contracts'; //generated\nconst FACTORIES_DIR = path.join(CONTRACTS_DIR, 'factories'); // generated\nconst TYPECHAIN_TARGET = 'ethers-v5';\n\nexport interface AbiRenderProps {\n  name: string;\n  events: string[];\n  functions: {typeName: string; functionName: string}[];\n}\nexport interface AbiInterface {\n  name: string;\n  type: 'event' | 'function';\n  inputs: AbiInput[];\n}\ntype AbiInput = {\n  internalType: string;\n  components?: AbiInput[];\n  name: string;\n  type: string;\n};\n\nfunction validateCustomDsDs(d: {kind: string}): boolean {\n  return CUSTOM_EVM_HANDLERS.includes(d.kind);\n}\n\nfunction validateAbi(datasources: SubqlRuntimeDatasource[], projectPath: string) {\n  const issues: string[] = [];\n  for (const datasource of datasources) {\n    if (!datasource.options?.abi) {\n      // No ABI to validate\n      continue;\n    }\n    const abiName = datasource.options.abi;\n    const topicIssues: string[] = [];\n    const funcIssues: string[] = [];\n    const abi = datasource.assets.get(abiName);\n    let data = '';\n    try {\n      data = fs.readFileSync(path.join(projectPath, abi.file), 'utf8');\n    } catch (e) {\n      issues.push(`Asset: \"${abiName}\" not found in project`);\n      continue;\n    }\n    let abiObj = JSON.parse(data);\n    if (!Array.isArray(abiObj) && abiObj.abi) {\n      abiObj = (abiObj as {abi: string[]}).abi;\n    }\n\n    const iface = new Interface(abiObj);\n    const abiFunctions = Object.values(iface.functions).map((func) => func.format());\n    const abiEvents = Object.values(iface.events).map((event) => event.format());\n\n    for (const mappingHandler of datasource.mapping.handlers) {\n      if (!mappingHandler?.filter) continue;\n\n      if (mappingHandler.kind === EthereumHandlerKind.Event) {\n        const notMatch = mappingHandler.filter.topics.find(\n          (topic) => !abiEvents.includes(EventFragment.fromString(topic).format())\n        );\n\n        if (notMatch) topicIssues.push(notMatch);\n      }\n\n      if (mappingHandler.kind === EthereumHandlerKind.Call) {\n        const functionFormat = FunctionFragment.fromString(mappingHandler.filter.function).format();\n        if (!abiFunctions.includes(functionFormat)) funcIssues.push(mappingHandler.filter.function);\n      }\n    }\n\n    if (topicIssues.length) {\n      issues.push(\n        `Topic: \"${topicIssues.join(\n          ', '\n        )}\" not found in ${abiName} contract interface, supported topics: ${abiEvents.join(', ')}`\n      );\n    }\n    if (funcIssues.length) {\n      issues.push(\n        `Function: \"${funcIssues.join(\n          ', '\n        )}\" not found in ${abiName} contract interface, supported functions: ${abiFunctions.join(', ')}`\n      );\n    }\n  }\n\n  assert(issues.length === 0, issues.join('\\n'));\n}\n\nexport function joinInputAbiName(abiObject: AbiInterface): string {\n  // example: \"TextChanged_bytes32_string_string_string_Event\", Event name/Function type name will be joined in ejs\n  const inputToSnake = abiObject.inputs.map((obj) => obj.type.replace(/\\[\\]/g, '_arr').toLowerCase()).join('_');\n  return `${abiObject.name}_${inputToSnake}_`;\n}\n\nfunction inputsToArgs(inputs: AbiInput[]): string {\n  const args = inputs\n    .map((input) => {\n      if (input.components) {\n        const inner = inputsToArgs(input.components);\n        if (input.type === 'tuple[]') {\n          return `${inner}[]`;\n        }\n        return inner;\n      }\n\n      return input.type.toLowerCase();\n    })\n    .join(',');\n  return `(${args})`;\n}\n\nexport function prepareSortedAssets(\n  datasources: SubqlRuntimeDatasource[],\n  projectPath: string\n): Record<string, string> {\n  const sortedAssets: Record<string, string> = {};\n  datasources\n    .filter((d) => !!d?.assets && (isRuntimeDs(d) || isCustomDs(d) || validateCustomDsDs(d)))\n    .forEach((d) => {\n      const addAsset = (name: string, value: FileReference) => {\n        // should do if covert to absolute\n        // if value.file is not absolute, the\n        const filePath = path.join(projectPath, value.file);\n        if (!fs.existsSync(filePath)) {\n          throw new Error(`Error: Asset ${name}, file ${value.file} does not exist`);\n        }\n        // We use actual abi file name instead on name provided in assets\n        // This is aligning with files in './ethers-contracts'\n        sortedAssets[parseContractPath(filePath).name] = value.file;\n      };\n\n      if (d.assets instanceof Map) {\n        for (const [name, value] of d.assets.entries()) {\n          addAsset(name, value);\n        }\n      } else {\n        Object.entries(d.assets).map(([name, value]) => {\n          addAsset(name, value as FileReference);\n        });\n      }\n    });\n  return sortedAssets;\n}\n\n// maybe refactor to use fragments ? ( can do that after the v6 migrate\nexport function prepareAbiJob(\n  sortedAssets: Record<string, string>,\n  projectPath: string,\n  loadReadAbi: (filePath: string) => AbiInterface[] | {abi: AbiInterface[]}\n): AbiRenderProps[] {\n  const renderInterfaceJobs: AbiRenderProps[] = [];\n  Object.entries(sortedAssets).forEach(([key, value]) => {\n    const renderProps: AbiRenderProps = {name: key, events: [], functions: []};\n    const readAbi = loadReadAbi(path.join(projectPath, value));\n    // We need to use for loop instead of map, due to events/function name could be duplicate,\n    // because they have different input, and following ether typegen rules, name also changed\n    // we need to find duplicates, and update its name rather than just unify them.\n\n    let abiArray: AbiInterface[] = [];\n\n    if (!Array.isArray(readAbi)) {\n      if (!readAbi.abi) {\n        throw new Error(`Provided ABI is not a valid ABI or Artifact`);\n      }\n      abiArray = readAbi.abi;\n    } else {\n      abiArray = readAbi;\n    }\n\n    if (!abiArray.length) {\n      throw new Error(`Invalid abi is provided at asset: ${key}, ${value}, ${abiArray.length}`);\n    }\n\n    const duplicateEventNames = abiArray\n      .filter((abiObject) => abiObject.type === 'event')\n      .map((obj) => obj.name)\n      .filter((name, index, arr) => arr.indexOf(name) !== index);\n    const duplicateFunctionNames = abiArray\n      .filter((abiObject) => abiObject.type === 'function')\n      .map((obj) => obj.name)\n      .filter((name, index, arr) => arr.indexOf(name) !== index);\n    abiArray.map((abiObject) => {\n      if (abiObject.type === 'function') {\n        let typeName = abiObject.name;\n        let functionName = abiObject.name;\n        if (duplicateFunctionNames.includes(abiObject.name)) {\n          functionName = `${abiObject.name}${inputsToArgs(abiObject.inputs)}`;\n          typeName = joinInputAbiName(abiObject);\n        }\n        renderProps.functions.push({typeName, functionName});\n      }\n      if (abiObject.type === 'event') {\n        let name = abiObject.name;\n        if (duplicateEventNames.includes(abiObject.name)) {\n          name = joinInputAbiName(abiObject);\n        }\n        renderProps.events.push(name);\n      }\n    });\n    // avoid empty json\n    if (!!renderProps.events || !!renderProps.functions) {\n      renderInterfaceJobs.push(renderProps);\n    }\n  });\n  return renderInterfaceJobs;\n}\n\nexport function getAbiNames(files: string[]): string[] {\n  return files\n    .filter((filename) => filename !== 'index.ts')\n    .map((fileName) => path.parse(fileName).name.replace('__factory', ''));\n}\n\nexport async function generateAbis(\n  datasources: SubqlRuntimeDatasource[],\n  projectPath: string,\n  prepareDirPath: (path: string, recreate: boolean) => Promise<void>,\n  upperFirst: (input?: string) => string,\n  renderTemplate: (templatePath: string, outputPath: string, templateData: Data) => Promise<void>\n): Promise<void> {\n  // @subql/cli package calls this function with datasources as an array of objects\n  datasources = datasources.map((d) => ({\n    ...d,\n    assets: d?.assets ? (d.assets instanceof Map ? d.assets : new Map(Object.entries(d.assets))) : undefined,\n  })) as SubqlRuntimeDatasource[];\n\n  validateAbi(datasources, projectPath);\n\n  const sortedAssets = prepareSortedAssets(datasources, projectPath);\n\n  if (Object.keys(sortedAssets).length === 0) {\n    return prepareDirPath(path.join(projectPath, ABI_INTERFACES_ROOT_DIR), false);\n  }\n\n  await prepareDirPath(path.join(projectPath, ABI_INTERFACES_ROOT_DIR), true);\n  try {\n    const allFiles = glob(projectPath, Object.values(sortedAssets));\n    // Typechain generate interfaces under CONTRACTS_DIR\n    // Run typechain for individual paths, if provided glob paths are the same,\n    // it will generate incorrect file structures, and fail to generate contracts for certain abis\n    await Promise.all(\n      allFiles.map((file) =>\n        runTypeChain({\n          cwd: projectPath,\n          filesToProcess: [file],\n          allFiles: [file],\n          outDir: CONTRACTS_DIR,\n          target: TYPECHAIN_TARGET,\n        })\n      )\n    );\n    const factoryFiles = fs.readdirSync(path.join(projectPath, FACTORIES_DIR));\n    const abiNames = getAbiNames(factoryFiles);\n    // factories index\n    await Promise.all([\n      // Restructure factories/index.ts\n      renderTemplate(RECONSTRUCTED_FACTORIES_TS, path.join(projectPath, FACTORIES_DIR, 'index.ts'), {\n        props: {abiNames},\n      }),\n      // Restructure contracts/index.ts\n      renderTemplate(RECONSTRUCTED_CONTRACTS_TS, path.join(projectPath, CONTRACTS_DIR, 'index.ts'), {\n        props: {abiNames},\n      }),\n    ]);\n\n    // Iterate here as we have to make sure type chain generated successful,\n    // also avoid duplicate generate same abi interfaces\n    const renderAbiJobs = prepareAbiJob(sortedAssets, projectPath, loadReadAbi);\n    await Promise.all(\n      renderAbiJobs.map((renderProps) => {\n        console.log(`* Abi Interface ${renderProps.name} generated`);\n        return renderTemplate(\n          ABI_INTERFACE_TEMPLATE_PATH,\n          path.join(projectPath, ABI_INTERFACES_ROOT_DIR, `${renderProps.name}.ts`),\n          {\n            props: {abi: renderProps},\n            helper: {upperFirst},\n          }\n        );\n      })\n    );\n  } catch (e) {\n    console.error(`! Unable to generate abi interface. ${e.message}`);\n  }\n}\n"]}