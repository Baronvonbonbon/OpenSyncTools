{"version":3,"file":"codegen-controller.spec.js","sourceRoot":"","sources":["../../src/codegen/codegen-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {EthereumDatasourceKind, EthereumHandlerKind, SubqlRuntimeDatasource} from '@subql/types-flare';\nimport ejs from 'ejs';\nimport {upperFirst} from 'lodash';\nimport rimraf from 'rimraf';\nimport {\n  AbiInterface,\n  generateAbis,\n  getAbiNames,\n  joinInputAbiName,\n  prepareAbiJob,\n  prepareSortedAssets,\n} from './codegen-controller';\n\ndescribe('Codegen spec', () => {\n  const PROJECT_PATH = path.join(__dirname, '../../test/abiTest');\n\n  it('ensure correct output when input does not contain []', () => {\n    const mockAbiInterface = {\n      type: 'function',\n      name: 'initialize',\n      inputs: [\n        {\n          name: '__name',\n          type: 'STRING',\n        },\n      ],\n    } as AbiInterface;\n    expect(joinInputAbiName(mockAbiInterface)).toMatch('initialize_string_');\n  });\n  it('should replace [] in input abi name', () => {\n    const mockAbiInterface = {\n      type: 'function',\n      name: 'initialize',\n      inputs: [\n        {\n          name: '__name',\n          type: 'string',\n        },\n        {\n          name: '__symbol',\n          type: 'string',\n        },\n        {\n          name: '__baseURI',\n          type: 'string',\n        },\n        {\n          name: 'admins',\n          type: 'address[]',\n        },\n      ],\n    } as AbiInterface;\n    expect(joinInputAbiName(mockAbiInterface)).toMatch('initialize_string_string_string_address_arr_');\n  });\n\n  it('json is object without abi field or empty abi json, should throw', () => {\n    const artifactAssetObj: Record<string, string> = {\n      artifact: './abis/bad-erc20.json',\n    };\n\n    expect(() => prepareAbiJob(artifactAssetObj, PROJECT_PATH, (fp) => require(fp))).toThrow(\n      'Provided ABI is not a valid ABI or Artifact'\n    );\n  });\n  it('Empty abi json, should throw', () => {\n    const projectPath = path.join(__dirname, '../../test/abiTest2');\n\n    const artifactAssetObj = {\n      artifact: './artifact.json',\n    };\n\n    expect(() => prepareAbiJob(artifactAssetObj, projectPath, () => [])).toThrow(\n      'Invalid abi is provided at asset: artifact'\n    );\n  });\n  it('Should sort assets', () => {\n    const ds = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'erc20',\n        address: '',\n      },\n      assets: new Map([['erc20', {file: './abis/erc20.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Call,\n          },\n        ],\n      },\n    };\n    expect(prepareSortedAssets([ds], PROJECT_PATH)).toStrictEqual({Erc20: './abis/erc20.json'});\n  });\n\n  it('Should sort assets with object', () => {\n    const ds = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'erc20',\n        address: '',\n      },\n      assets: new Map([['erc20', {file: './abis/erc20.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Call,\n          },\n        ],\n      },\n    };\n    expect(prepareSortedAssets([ds], PROJECT_PATH)).toStrictEqual({Erc20: './abis/erc20.json'});\n  });\n\n  it('read artifact abis', () => {\n    const projectPath = path.join(__dirname, '../../test/abiTest');\n    const abisAssetObj = {\n      Erc20: './abis/erc20.json',\n    };\n\n    const artifactAssetObj = {\n      artifactErc20: './abis/Erc20.sol/Erc20.json',\n    };\n\n    const abisRendered = prepareAbiJob(abisAssetObj, projectPath, (fp) => require(fp));\n    const artifactRendered = prepareAbiJob(artifactAssetObj, projectPath, (fp) => require(fp));\n\n    // exclude name field\n    artifactRendered.map((e) => {\n      e.name = expect.any(String);\n    });\n    expect(abisRendered).toStrictEqual(expect.objectContaining(artifactRendered));\n  });\n\n  it('render correct codegen from ejs', async () => {\n    const mockJob = {\n      name: 'Erc20',\n      events: ['Approval'],\n      functions: [\n        {\n          typename: 'approve',\n          functionName: 'approve',\n        },\n      ],\n    };\n\n    const data = await ejs.renderFile(path.resolve(__dirname, '../../templates/abi-interface.ts.ejs'), {\n      props: {abi: mockJob},\n      helper: {upperFirst},\n    });\n    await fs.promises.writeFile(path.join(PROJECT_PATH, 'test.ts'), data);\n    const expectedCodegen =\n      '' +\n      '// SPDX-License-Identifier: Apache-2.0\\n' +\n      '\\n' +\n      '// Auto-generated , DO NOT EDIT\\n' +\n      'import {EthereumLog, EthereumTransaction, LightEthereumLog} from \"@subql/types-flare\";\\n' +\n      '\\n' +\n      \"import {ApprovalEvent, Erc20} from '../contracts/Erc20'\\n\" +\n      '\\n' +\n      '\\n' +\n      'export type ApprovalLog = EthereumLog<ApprovalEvent[\"args\"]>\\n' +\n      '\\n' +\n      '\\n' +\n      'export type LightApprovalLog = LightEthereumLog<ApprovalEvent[\"args\"]>\\n' +\n      '\\n' +\n      '\\n' +\n      \"export type Transaction = EthereumTransaction<Parameters<Erc20['functions']['approve']>>\";\n    const output = await fs.promises.readFile(path.join(PROJECT_PATH, 'test.ts'));\n    expect(output.toString()).toMatch(expectedCodegen);\n    await promisify(rimraf)(path.join(PROJECT_PATH, 'test.ts'));\n  });\n\n  it('Correctness on getAbiNames', () => {\n    expect(getAbiNames(['Erc721__factory.ts', 'Erc1155__factory.ts', 'index.ts'])).toStrictEqual(['Erc721', 'Erc1155']);\n  });\n\n  it('Generate correct restructured index.ts', async () => {\n    const mockAbiNames = ['Erc721', 'Erc1155', 'Erc1967'];\n    const contractsData = await ejs.renderFile(path.resolve(__dirname, '../../templates/contracts-index.ts.ejs'), {\n      props: {abiNames: mockAbiNames},\n    });\n    const factoriesData = await ejs.renderFile(path.resolve(__dirname, '../../templates/factories-index.ts.ejs'), {\n      props: {abiNames: mockAbiNames},\n    });\n    await Promise.all([\n      fs.promises.writeFile(path.join(PROJECT_PATH, 'contracts-index.ts'), contractsData),\n      fs.promises.writeFile(path.join(PROJECT_PATH, 'factories-index.ts'), factoriesData),\n    ]);\n    const contractOutput = await fs.promises.readFile(path.join(PROJECT_PATH, 'contracts-index.ts'));\n    const factoriesOutput = await fs.promises.readFile(path.join(PROJECT_PATH, 'factories-index.ts'));\n\n    expect(contractOutput.toString()).toBe(\n      '' +\n        '/* Autogenerated file. Do not edit manually. */\\n' +\n        '/* tslint:disable */\\n' +\n        '/* eslint-disable */\\n' +\n        'export * as factories from \"./factories\";\\n' +\n        '\\n' +\n        'export { Erc721 } from \"./Erc721\";\\n' +\n        '\\n' +\n        'export { Erc1155 } from \"./Erc1155\";\\n' +\n        '\\n' +\n        'export { Erc1967 } from \"./Erc1967\";\\n' +\n        '\\n' +\n        '\\n' +\n        'export { Erc721__factory } from \"./factories/Erc721__factory\";\\n' +\n        '\\n' +\n        'export { Erc1155__factory } from \"./factories/Erc1155__factory\";\\n' +\n        '\\n' +\n        'export { Erc1967__factory } from \"./factories/Erc1967__factory\";\\n'\n    );\n    expect(factoriesOutput.toString()).toBe(\n      '' +\n        '/* Autogenerated file. Do not edit manually. */\\n' +\n        '/* tslint:disable */\\n' +\n        '/* eslint-disable */\\n' +\n        '\\n' +\n        '\\n' +\n        'export { Erc721__factory } from \"./Erc721__factory\";\\n' +\n        '\\n' +\n        'export { Erc1155__factory } from \"./Erc1155__factory\";\\n' +\n        '\\n' +\n        'export { Erc1967__factory } from \"./Erc1967__factory\";\\n'\n    );\n\n    await Promise.all([\n      promisify(rimraf)(path.join(PROJECT_PATH, 'contracts-index.ts')),\n      promisify(rimraf)(path.join(PROJECT_PATH, 'factories-index.ts')),\n    ]);\n  });\n\n  it('Generates valid function names with complex types', () => {\n    const artifactAssetObj: Record<string, string> = {\n      artifact: './abis/contract_with_overloads.json',\n    };\n\n    const [props] = prepareAbiJob(artifactAssetObj, PROJECT_PATH, (fp: string) => require(fp));\n\n    expect(props.functions[4].functionName).toEqual('deregisterOperatorWithCoordinator(bytes,(uint256,uint256))');\n    expect(props.functions[27].functionName).toEqual(\n      'registerOperatorWithCoordinator(bytes,(uint256,uint256),string,(uint8,address,(uint256,uint256))[],(bytes,bytes32,uint256))'\n    );\n  });\n\n  it('validate Abi.json path field', async () => {\n    const ds: SubqlRuntimeDatasource = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'erc20',\n        address: '',\n      },\n      assets: new Map([['erc20', {file: './abis/xxx.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Call,\n            filter: {\n              function: 'transfer()',\n            },\n          },\n        ],\n      },\n    };\n\n    await expect(generateAbis([ds], PROJECT_PATH, undefined, undefined, undefined)).rejects.toThrow(\n      /Asset: \"erc20\" not found in project/\n    );\n  });\n\n  it('validate Abi.json Function Not Exist', async () => {\n    const ds: SubqlRuntimeDatasource = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'erc20',\n        address: '',\n      },\n      assets: new Map([['erc20', {file: './abis/erc20.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Call,\n            filter: {\n              function: 'approve(address a,uint256 b)',\n            },\n          },\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Call,\n            filter: {\n              function: 'approve222(address a,uint256 b)',\n            },\n          },\n        ],\n      },\n    };\n\n    await expect(generateAbis([ds], PROJECT_PATH, undefined, undefined, undefined)).rejects.toThrow(\n      /Function: \"approve222\\(address a,uint256 b\\)\" not found in erc20 contract interface/\n    );\n  });\n\n  it('validate Abi.json Topic Not Exist', async () => {\n    const ds: SubqlRuntimeDatasource = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'erc20',\n        address: '',\n      },\n      assets: new Map([['erc20', {file: './abis/erc20.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Transfer(address a,address b,uint256 c)'],\n            },\n          },\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Transfer(address a,address b,uint256 c)', 'NotExist(address a)'],\n            },\n          },\n        ],\n      },\n    };\n\n    await expect(generateAbis([ds], PROJECT_PATH, undefined, undefined, undefined)).rejects.toThrow(\n      /Topic: \"NotExist\\(address a\\)\" not found in erc20 contract interface/\n    );\n  });\n\n  it('doesnt validate if datasource has no abi option set', async () => {\n    const ds: SubqlRuntimeDatasource = {\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      assets: new Map([['erc20', {file: './abis/erc20.json'}]]),\n      mapping: {\n        file: '',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Transfer(address a,address b,uint256 c)'],\n            },\n          },\n          {\n            handler: 'handleTransaction',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Transfer(address a,address b,uint256 c)', 'NotExist(address a)'],\n            },\n          },\n        ],\n      },\n    };\n\n    await expect(\n      generateAbis(\n        [ds],\n        PROJECT_PATH,\n        (p) => Promise.resolve(),\n        (v) => v,\n        () => Promise.resolve()\n      )\n    ).resolves.not.toThrow();\n  });\n});\n"]}