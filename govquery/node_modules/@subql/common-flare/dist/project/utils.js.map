{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/project/utils.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,oDAO4B;AAC5B,+CAAqD;AACrD,qDAA+F;AAI/F,SAAgB,uBAAuB,CACrC,EAA4E;IAE5E,OAAO,EAAE,CAAC,eAAe,KAAK,iCAAmB,CAAC,KAAK,CAAC;AAC1D,CAAC;AAJD,0DAIC;AAED,SAAgB,uBAAuB,CACrC,EAA4E;IAE5E,OAAO,EAAE,CAAC,eAAe,KAAK,iCAAmB,CAAC,KAAK,CAAC;AAC1D,CAAC;AAJD,0DAIC;AAED,SAAgB,sBAAsB,CACpC,EAA4E;IAE5E,OAAO,EAAE,CAAC,eAAe,KAAK,iCAAmB,CAAC,IAAI,CAAC;AACzD,CAAC;AAJD,wDAIC;AAED,SAAgB,UAAU,CAAC,EAAmB;IAC5C,OAAO,EAAE,CAAC,IAAI,KAAK,oCAAsB,CAAC,OAAO,IAAI,CAAC,CAAE,EAAoC,CAAC,SAAS,CAAC;AACzG,CAAC;AAFD,gCAEC;AAED,SAAgB,WAAW,CAAC,EAAmB;IAC7C,OAAO,EAAE,CAAC,IAAI,KAAK,oCAAsB,CAAC,OAAO,CAAC;AACpD,CAAC;AAFD,kCAEC;AAED,SAAgB,0BAA0B,CAAC,OAAe;IACxD,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,IAAA,0BAAiB,EAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,IAAA,mCAAiB,EAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,IAAA,mCAAiB,EAAC,OAAO,CAAC,CAAC;IACpC,CAAC;AACH,CAAC;AAPD,gEAOC;AAED,SAAgB,0BAA0B,CAAC,iBAAqC;IAC9E,OAAO,IAAA,4BAAU,EACf;QACE,IAAI,EAAE,4BAA4B;QAClC,SAAS,EAAE;YACT,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAW,EAAE,CAAC,0BAA0B,CAAC,KAAK,CAAC;YACrE,cAAc,EAAE,IAAA,8BAAY,EAC1B,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,UAAU,qCAAqC,EAClE,iBAAiB,CAClB;SACF;KACF,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAdD,gEAcC","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {\n  SecondLayerHandlerProcessor,\n  SubqlCustomDatasource,\n  SubqlDatasource,\n  EthereumDatasourceKind,\n  EthereumHandlerKind,\n  SubqlRuntimeDatasource,\n} from '@subql/types-flare';\nimport {fromBech32Address} from '@zilliqa-js/crypto';\nimport {buildMessage, isEthereumAddress, ValidateBy, ValidationOptions} from 'class-validator';\n\ntype DefaultFilter = Record<string, unknown>;\n\nexport function isBlockHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessor<EthereumHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Block, DefaultFilter, E> {\n  return hp.baseHandlerKind === EthereumHandlerKind.Block;\n}\n\nexport function isEventHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessor<EthereumHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Event, DefaultFilter, E> {\n  return hp.baseHandlerKind === EthereumHandlerKind.Event;\n}\n\nexport function isCallHandlerProcessor<E>(\n  hp: SecondLayerHandlerProcessor<EthereumHandlerKind, DefaultFilter, unknown>\n): hp is SecondLayerHandlerProcessor<EthereumHandlerKind.Call, DefaultFilter, E> {\n  return hp.baseHandlerKind === EthereumHandlerKind.Call;\n}\n\nexport function isCustomDs(ds: SubqlDatasource): ds is SubqlCustomDatasource<string> {\n  return ds.kind !== EthereumDatasourceKind.Runtime && !!(ds as SubqlCustomDatasource<string>).processor;\n}\n\nexport function isRuntimeDs(ds: SubqlDatasource): ds is SubqlRuntimeDatasource {\n  return ds.kind === EthereumDatasourceKind.Runtime;\n}\n\nexport function isEthereumOrZilliqaAddress(address: string): boolean {\n  try {\n    const ethFormat = fromBech32Address(address);\n    return isEthereumAddress(ethFormat);\n  } catch (e) {\n    return isEthereumAddress(address);\n  }\n}\n\nexport function IsEthereumOrZilliqaAddress(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: 'isEthereumOrZilliqaAddress',\n      validator: {\n        validate: (value, args): boolean => isEthereumOrZilliqaAddress(value),\n        defaultMessage: buildMessage(\n          (eachPrefix) => `${eachPrefix}$property must be a Zilliqa address`,\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n"]}