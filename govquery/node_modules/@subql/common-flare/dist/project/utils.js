"use strict";
// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsEthereumOrZilliqaAddress = exports.isEthereumOrZilliqaAddress = exports.isRuntimeDs = exports.isCustomDs = exports.isCallHandlerProcessor = exports.isEventHandlerProcessor = exports.isBlockHandlerProcessor = void 0;
const types_flare_1 = require("@subql/types-flare");
const crypto_1 = require("@zilliqa-js/crypto");
const class_validator_1 = require("class-validator");
function isBlockHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_flare_1.EthereumHandlerKind.Block;
}
exports.isBlockHandlerProcessor = isBlockHandlerProcessor;
function isEventHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_flare_1.EthereumHandlerKind.Event;
}
exports.isEventHandlerProcessor = isEventHandlerProcessor;
function isCallHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_flare_1.EthereumHandlerKind.Call;
}
exports.isCallHandlerProcessor = isCallHandlerProcessor;
function isCustomDs(ds) {
    return ds.kind !== types_flare_1.EthereumDatasourceKind.Runtime && !!ds.processor;
}
exports.isCustomDs = isCustomDs;
function isRuntimeDs(ds) {
    return ds.kind === types_flare_1.EthereumDatasourceKind.Runtime;
}
exports.isRuntimeDs = isRuntimeDs;
function isEthereumOrZilliqaAddress(address) {
    try {
        const ethFormat = (0, crypto_1.fromBech32Address)(address);
        return (0, class_validator_1.isEthereumAddress)(ethFormat);
    }
    catch (e) {
        return (0, class_validator_1.isEthereumAddress)(address);
    }
}
exports.isEthereumOrZilliqaAddress = isEthereumOrZilliqaAddress;
function IsEthereumOrZilliqaAddress(validationOptions) {
    return (0, class_validator_1.ValidateBy)({
        name: 'isEthereumOrZilliqaAddress',
        validator: {
            validate: (value, args) => isEthereumOrZilliqaAddress(value),
            defaultMessage: (0, class_validator_1.buildMessage)((eachPrefix) => `${eachPrefix}$property must be a Zilliqa address`, validationOptions),
        },
    }, validationOptions);
}
exports.IsEthereumOrZilliqaAddress = IsEthereumOrZilliqaAddress;
//# sourceMappingURL=utils.js.map