{"version":3,"file":"ipfs-reader.spec.js","sourceRoot":"","sources":["../../../src/project/readers/ipfs-reader.spec.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AAGnC,+CAAyC;AAEzC,MAAM,WAAW,GAAG,iDAAiD,CAAC;AAEtE,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,MAAc,CAAC;IAEnB,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,GAAG,IAAI,wBAAU,CAAC,gDAAgD,EAAE,WAAW,CAAC,CAAC;QAEvF,MAAM,IAAI,GAAQ,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;QAElD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,GAAG,IAAI,wBAAU,CAAC,gDAAgD,EAAE,WAAW,CAAC,CAAC;QACvF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAE,MAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,MAAM,CAAC,gBAAgB,EAAE,EAAE,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACrG,MAAM,CAAC,UAAU,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {Reader} from '@subql/types-core';\nimport {IPFSReader} from './ipfs-reader';\n\nconst IPFSGateway = 'https://unauthipfs.subquery.network/ipfs/api/v0';\n\ndescribe('IPFSReader', () => {\n  let reader: Reader;\n\n  it('should return a project deployment', async () => {\n    reader = new IPFSReader('QmNbkA1fJpV2gCAWCBjgUQ8xBTwkLZHuzx4EkUoKx7VYaD', IPFSGateway);\n\n    const data: any = await reader.getProjectSchema();\n\n    expect(data.network.chainId).toBe('43114');\n  });\n\n  it('ipfs should only fetch once when cache found', async () => {\n    reader = new IPFSReader('QmNbkA1fJpV2gCAWCBjgUQ8xBTwkLZHuzx4EkUoKx7VYaD', IPFSGateway);\n    const spyIpfsCat = jest.spyOn((reader as any).ipfs, 'cat');\n    await Promise.all([reader.getProjectSchema(), reader.getProjectSchema(), reader.getProjectSchema()]);\n    expect(spyIpfsCat).toHaveBeenCalledTimes(1);\n  });\n});\n"]}