"use strict";
// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultichainProjectManifestModel = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const project_1 = require("../project");
class MultichainProjectManifestModel {
    specVersion;
    projects;
    query;
}
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    __metadata("design:type", String)
], MultichainProjectManifestModel.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.IsString)({ each: true }),
    __metadata("design:type", Array)
], MultichainProjectManifestModel.prototype, "projects", void 0);
__decorate([
    (0, class_validator_1.IsObject)(),
    (0, class_transformer_1.Type)(() => project_1.RunnerQueryBaseModel),
    __metadata("design:type", Object)
], MultichainProjectManifestModel.prototype, "query", void 0);
exports.MultichainProjectManifestModel = MultichainProjectManifestModel;
//# sourceMappingURL=models.js.map