"use strict";
// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDataSource = exports.BaseDeploymentV1_0_0 = exports.ProcessorImpl = exports.FileType = exports.ProjectManifestBaseImpl = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const js_yaml_1 = __importDefault(require("js-yaml"));
const utils_1 = require("../utils");
const models_1 = require("./v1_0_0/models");
class ProjectManifestBaseImpl {
    _deploymentClass;
    definitions;
    description;
    repository;
    specVersion;
    _deployment;
    constructor(_deploymentClass) {
        this._deploymentClass = _deploymentClass;
    }
    get deployment() {
        if (!this._deployment) {
            this._deployment = (0, class_transformer_1.plainToInstance)(this._deploymentClass, (0, utils_1.toJsonObject)(this));
            (0, class_validator_1.validateSync)(this._deployment, { whitelist: true });
        }
        return this._deployment;
    }
    validate() {
        const errors = (0, class_validator_1.validateSync)(this.deployment, { whitelist: true, forbidNonWhitelisted: true });
        if (errors?.length) {
            const errorMsgs = errors.map((e) => e.toString()).join('\n');
            throw new Error(`Failed to parse project. Please see below for more information.\n${errorMsgs}`);
        }
    }
    toDeployment() {
        return this.deployment.toYaml();
    }
}
__decorate([
    (0, class_validator_1.Allow)(),
    __metadata("design:type", Object)
], ProjectManifestBaseImpl.prototype, "definitions", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestBaseImpl.prototype, "description", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestBaseImpl.prototype, "repository", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], ProjectManifestBaseImpl.prototype, "specVersion", void 0);
exports.ProjectManifestBaseImpl = ProjectManifestBaseImpl;
class FileType {
    file;
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], FileType.prototype, "file", void 0);
exports.FileType = FileType;
class ProcessorImpl extends FileType {
    options;
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    __metadata("design:type", Object)
], ProcessorImpl.prototype, "options", void 0);
exports.ProcessorImpl = ProcessorImpl;
class BaseDeploymentV1_0_0 {
    specVersion;
    schema;
    parent;
    toYaml() {
        // plainToClass was used but ran into issues
        // We convert it to a plain object to get Maps converted to Records/Objects
        return js_yaml_1.default.dump((0, utils_1.toJsonObject)(this), {
            sortKeys: true,
            condenseFlow: true,
        });
    }
}
__decorate([
    (0, class_validator_1.Equals)('1.0.0'),
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], BaseDeploymentV1_0_0.prototype, "specVersion", void 0);
__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => FileType),
    __metadata("design:type", FileType)
], BaseDeploymentV1_0_0.prototype, "schema", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    (0, class_transformer_1.Type)(() => models_1.ParentProjectModel),
    __metadata("design:type", Object)
], BaseDeploymentV1_0_0.prototype, "parent", void 0);
exports.BaseDeploymentV1_0_0 = BaseDeploymentV1_0_0;
class BaseDataSource {
    startBlock;
    endBlock;
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], BaseDataSource.prototype, "startBlock", void 0);
__decorate([
    (0, class_validator_1.Validate)(utils_1.IsEndBlockGreater),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsInt)(),
    __metadata("design:type", Number)
], BaseDataSource.prototype, "endBlock", void 0);
exports.BaseDataSource = BaseDataSource;
//# sourceMappingURL=base.js.map