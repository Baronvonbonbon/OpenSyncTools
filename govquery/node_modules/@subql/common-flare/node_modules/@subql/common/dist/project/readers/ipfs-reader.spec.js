"use strict";
// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
Object.defineProperty(exports, "__esModule", { value: true });
const ipfs_reader_1 = require("./ipfs-reader");
const IPFSGateway = 'https://unauthipfs.subquery.network/ipfs/api/v0';
describe('IPFSReader', () => {
    let reader;
    it('should return a project deployment', async () => {
        reader = new ipfs_reader_1.IPFSReader('QmNbkA1fJpV2gCAWCBjgUQ8xBTwkLZHuzx4EkUoKx7VYaD', IPFSGateway);
        const data = await reader.getProjectSchema();
        expect(data.network.chainId).toBe('43114');
    });
    it('ipfs should only fetch once when cache found', async () => {
        reader = new ipfs_reader_1.IPFSReader('QmNbkA1fJpV2gCAWCBjgUQ8xBTwkLZHuzx4EkUoKx7VYaD', IPFSGateway);
        const spyIpfsCat = jest.spyOn(reader.ipfs, 'cat');
        await Promise.all([reader.getProjectSchema(), reader.getProjectSchema(), reader.getProjectSchema()]);
        expect(spyIpfsCat).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=ipfs-reader.spec.js.map