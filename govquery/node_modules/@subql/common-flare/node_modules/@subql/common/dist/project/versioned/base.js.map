{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/project/versioned/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {FileReference, ParentProject, Processor} from '@subql/types-core';\nimport {plainToInstance, Type} from 'class-transformer';\nimport {\n  Allow,\n  Equals,\n  IsInt,\n  IsObject,\n  IsOptional,\n  IsString,\n  Validate,\n  ValidateNested,\n  validateSync,\n} from 'class-validator';\nimport yaml from 'js-yaml';\nimport {IsEndBlockGreater, toJsonObject} from '../utils';\nimport {ParentProjectModel} from './v1_0_0/models';\n\nexport abstract class ProjectManifestBaseImpl<D extends BaseDeploymentV1_0_0> {\n  @Allow()\n  definitions!: object;\n  @IsOptional()\n  @IsString()\n  description?: string;\n  @IsOptional()\n  @IsString()\n  repository?: string;\n  @IsString()\n  specVersion!: string;\n\n  protected _deployment!: D;\n\n  protected constructor(private readonly _deploymentClass: new () => D) {}\n\n  get deployment(): D {\n    if (!this._deployment) {\n      this._deployment = plainToInstance(this._deploymentClass, toJsonObject(this));\n      validateSync(this._deployment, {whitelist: true});\n    }\n    return this._deployment;\n  }\n\n  validate(): void {\n    const errors = validateSync(this.deployment, {whitelist: true, forbidNonWhitelisted: true});\n    if (errors?.length) {\n      const errorMsgs = errors.map((e) => e.toString()).join('\\n');\n      throw new Error(`Failed to parse project. Please see below for more information.\\n${errorMsgs}`);\n    }\n  }\n\n  toDeployment(): string {\n    return this.deployment.toYaml();\n  }\n}\n\nexport class FileType implements FileReference {\n  @IsString()\n  file!: string;\n}\n\nexport class ProcessorImpl<O = any> extends FileType implements Processor<O> {\n  @IsOptional()\n  @IsObject()\n  options?: O;\n}\n\nexport class BaseDeploymentV1_0_0 {\n  @Equals('1.0.0')\n  @IsString()\n  specVersion!: string;\n  @ValidateNested()\n  @Type(() => FileType)\n  schema!: FileType;\n  @IsOptional()\n  @IsObject()\n  @Type(() => ParentProjectModel)\n  parent?: ParentProject;\n\n  toYaml(): string {\n    // plainToClass was used but ran into issues\n    // We convert it to a plain object to get Maps converted to Records/Objects\n    return yaml.dump(toJsonObject(this), {\n      sortKeys: true,\n      condenseFlow: true,\n    });\n  }\n}\n\nexport class BaseDataSource {\n  @IsOptional()\n  @IsInt()\n  startBlock?: number;\n  @Validate(IsEndBlockGreater)\n  @IsOptional()\n  @IsInt()\n  endBlock?: number;\n}\n"]}