{"version":3,"file":"local-reader.js","sourceRoot":"","sources":["../../../src/project/readers/local-reader.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnC,oDAA4B;AAC5B,uCAAyB;AACzB,2CAA6B;AAE7B,sDAA2B;AAE3B,2CAAoD;AAEpD,MAAa,WAAW;IAEH;IACA;IAFnB,YACmB,WAAmB,EACnB,YAAoB;QADpB,gBAAW,GAAX,WAAW,CAAQ;QACnB,iBAAY,GAAZ,YAAY,CAAQ;IACpC,CAAC;IAEJ,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,MAAM;QACV,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC/C,OAAO,iBAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,CAAC;IACxC,CAAC;IAED,4DAA4D;IAC5D,KAAK,CAAC,gBAAgB;QACpB,IAAA,gBAAM,EAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,4BAA4B,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC1F,MAAM,EAAC,GAAG,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAA,gBAAM,EAAC,IAAA,+BAAqB,EAAC,GAAG,CAAC,EAAE,8CAA8C,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEtG,OAAO,iBAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,4DAA4D;IAC5D,KAAK,CAAC,OAAO,CAAC,QAAgB;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QACtD,IAAA,gBAAM,EAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,0BAA0B,IAAI,EAAE,CAAC,CAAC;QAE9D,OAAO,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;CACF;AA/BD,kCA+BC","sourcesContent":["// Copyright 2020-2024 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {Reader} from '@subql/types-core';\nimport yaml from 'js-yaml';\nimport {IPackageJson} from 'package-json-type';\nimport {extensionIsYamlOrJSON} from '../../project';\n\nexport class LocalReader implements Reader {\n  constructor(\n    private readonly projectPath: string,\n    private readonly manifestPath: string\n  ) {}\n\n  get root(): string {\n    return path.resolve(this.projectPath);\n  }\n\n  async getPkg(): Promise<IPackageJson> {\n    const pkg = await this.getFile('package.json');\n    return yaml.load(pkg) as IPackageJson;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getProjectSchema(): Promise<unknown> {\n    assert(fs.existsSync(this.manifestPath), `Manifest file not found: ${this.manifestPath}`);\n    const {ext} = path.parse(this.manifestPath);\n    assert(extensionIsYamlOrJSON(ext), `Manifest file must be a yaml or json file: ${this.manifestPath}`);\n\n    return yaml.load(fs.readFileSync(this.manifestPath, 'utf-8'));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getFile(fileName: string): Promise<string> {\n    const file = path.resolve(this.projectPath, fileName);\n    assert(fs.existsSync(file), `projectPath not found: ${file}`);\n\n    return fs.readFileSync(file, 'utf-8');\n  }\n}\n"]}