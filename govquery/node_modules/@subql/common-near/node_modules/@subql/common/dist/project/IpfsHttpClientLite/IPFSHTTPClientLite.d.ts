type ContentData = string | Uint8Array;
type Content = {
    content: ContentData;
    path: string;
} | ContentData;
type AddOptions = {
    pin?: boolean;
    cidVersion?: number;
    wrapWithDirectory?: boolean;
};
type AddResult = {
    path: string;
    cid: string;
    size: number;
};
export declare class IPFSHTTPClientLite {
    private option;
    constructor(option: {
        url: string;
        headers?: Record<string, string>;
    });
    get url(): string;
    /**
     * Returns content of the file addressed by a valid IPFS Path or CID
     */
    cat(ipfsCID: string): AsyncIterable<Uint8Array>;
    /**
     * Import a file or data into IPFS
     */
    add(content: Content, options?: AddOptions): Promise<AddResult>;
    /**
     * Pin a content with a given CID to a remote pinning service.
     */
    pinRemoteAdd(cid: string, options: {
        service: string;
    }): Promise<{
        Cid: string;
        Name: string;
        Status: string;
    }>;
    /**
     * Import multiple files and data into IPFS
     */
    addAll(source: Content[], options?: AddOptions): Promise<AddResult[]>;
    private makeFormData;
}
export {};
