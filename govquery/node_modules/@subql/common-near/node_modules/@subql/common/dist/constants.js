"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.RUNNER_ERROR_REGEX = exports.DEFAULT_FETCH_RANGE = exports.RESET_MMR_BLOCK_BATCH = exports.CONNECTION_SSL_ERROR_REGEX = exports.runnerMapping = exports.NETWORK_FAMILY = exports.POI_AWAIT_TIME = exports.RUNNER_REGEX = exports.IPFS_REGEX = exports.IPFS_WRITE_ENDPOINT = exports.IPFS_NODE_ENDPOINT = exports.IPFS_WRITE = exports.IPFS_READ = exports.DEFAULT_PORT = void 0;
// APP API PORT
exports.DEFAULT_PORT = 3000;
//IPFS
exports.IPFS_READ = 'https://unauthipfs.subquery.network';
exports.IPFS_WRITE = 'https://authipfs.subquery.network';
exports.IPFS_NODE_ENDPOINT = `${exports.IPFS_READ}/ipfs/api/v0`;
exports.IPFS_WRITE_ENDPOINT = `${exports.IPFS_WRITE}/ipfs/api/v0`;
exports.IPFS_REGEX = /^ipfs:\/\//i;
// MANIFEST
exports.RUNNER_REGEX = /(\^?)(\d|x|\*)+\.(\d|x|\*)+\.(\d|x|\*)+/;
// POI
exports.POI_AWAIT_TIME = 2; // seconds
// NETWORK
var NETWORK_FAMILY;
(function (NETWORK_FAMILY) {
    NETWORK_FAMILY["substrate"] = "Substrate";
    NETWORK_FAMILY["cosmos"] = "Cosmos";
    NETWORK_FAMILY["algorand"] = "Algorand";
    NETWORK_FAMILY["ethereum"] = "Ethereum";
    NETWORK_FAMILY["near"] = "Near";
    NETWORK_FAMILY["stellar"] = "Stellar";
    NETWORK_FAMILY["concordium"] = "Concordium";
    NETWORK_FAMILY["starknet"] = "Starknet";
    NETWORK_FAMILY["solana"] = "Solana";
})(NETWORK_FAMILY || (exports.NETWORK_FAMILY = NETWORK_FAMILY = {}));
exports.runnerMapping = {
    '@subql/node': NETWORK_FAMILY.substrate,
    '@subql/node-substrate': NETWORK_FAMILY.substrate,
    '@subql/node-cosmos': NETWORK_FAMILY.cosmos,
    '@subql/node-algorand': NETWORK_FAMILY.algorand,
    '@subql/node-ethereum': NETWORK_FAMILY.ethereum,
    '@subql/node-near': NETWORK_FAMILY.near,
    '@subql/node-stellar': NETWORK_FAMILY.stellar,
    '@subql/node-concordium': NETWORK_FAMILY.concordium,
    '@subql/node-starknet': NETWORK_FAMILY.starknet,
    '@subql/node-solana': NETWORK_FAMILY.solana,
};
// DATABASE ERROR REGEX
exports.CONNECTION_SSL_ERROR_REGEX = 'not support SSL';
// BLOCK BATCH SYNC between POI MMR <-> Filebased/Postgres MMR
exports.RESET_MMR_BLOCK_BATCH = 1000;
// Default Model fetch range
exports.DEFAULT_FETCH_RANGE = 100;
// RUNNER ERROR REGEX
exports.RUNNER_ERROR_REGEX = 'property runner.node.name has failed the following constraints: equals';
//# sourceMappingURL=constants.js.map