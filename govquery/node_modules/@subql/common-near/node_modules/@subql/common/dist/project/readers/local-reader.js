"use strict";
// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors
// SPDX-License-Identifier: GPL-3.0
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalReader = void 0;
const assert_1 = __importDefault(require("assert"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const project_1 = require("../../project");
class LocalReader {
    projectPath;
    manifestPath;
    constructor(projectPath, manifestPath) {
        this.projectPath = projectPath;
        this.manifestPath = manifestPath;
    }
    get root() {
        return path.resolve(this.projectPath);
    }
    async getPkg() {
        const pkg = await this.getFile('package.json');
        return js_yaml_1.default.load(pkg);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getProjectSchema() {
        (0, assert_1.default)(fs.existsSync(this.manifestPath), `Manifest file not found: ${this.manifestPath}`);
        const { ext } = path.parse(this.manifestPath);
        (0, assert_1.default)((0, project_1.extensionIsYamlOrJSON)(ext), `Manifest file must be a yaml or json file: ${this.manifestPath}`);
        return js_yaml_1.default.load(fs.readFileSync(this.manifestPath, 'utf-8'));
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getFile(fileName) {
        const file = path.resolve(this.projectPath, fileName);
        (0, assert_1.default)(fs.existsSync(file), `projectPath not found: ${file}`);
        return fs.readFileSync(file, 'utf-8');
    }
}
exports.LocalReader = LocalReader;
//# sourceMappingURL=local-reader.js.map