//  Copyright (C) 2018 Zilliqa
//
//  This file is part of zilliqa-js
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
import { __values } from "tslib";
import BN from 'bn.js';
import Long from 'long';
export var isAddress = function (address) {
    return isByteString(address, 40);
};
export var isBech32 = function (raw) {
    return !!raw.match(/^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$/);
};
export var isBase58 = function (raw) {
    return !!raw.match(/^[1-9ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/);
};
export var isPrivateKey = function (privateKey) {
    return isByteString(privateKey, 64);
};
export var isPubKey = function (pubKey) {
    return isByteString(pubKey, 66);
};
export var isSignature = function (sig) {
    return isByteString(sig, 128);
};
export var isByteString = function (str, len) {
    return !!str.replace('0x', '').match("^[0-9a-fA-F]{".concat(len, "}$"));
};
export var isNumber = function (x) {
    return typeof x === 'number';
};
export var isBN = function (x) {
    return BN.isBN(x);
};
export var isLong = function (x) {
    return Long.isLong(x);
};
export var isString = function (x) {
    return typeof x === 'string';
};
export var isPlainObject = function (x) {
    if (typeof x === 'object' && x !== null) {
        var proto = Object.getPrototypeOf(x);
        return proto === Object.prototype || proto === null;
    }
    return false;
};
var PRAGMA_REQUIRED = '@@ZJS_REQUIRED@@';
export var required = function (fn) {
    if (typeof fn === 'function') {
        return Object.defineProperty(fn, 'required', {
            value: PRAGMA_REQUIRED,
        });
    }
    throw new Error('fn is not a function');
};
export var matchesObject = function (x, test) {
    var e_1, _a;
    if (isPlainObject(x)) {
        for (var key in test) {
            if (test.hasOwnProperty(key)) {
                try {
                    for (var _b = (e_1 = void 0, __values(test[key])), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var tester = _c.value;
                        var value = x[key];
                        if (typeof value === 'undefined' && tester.required) {
                            throw new Error('Key not found: ' + key);
                        }
                        else {
                            continue;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
    }
    return true;
};
//# sourceMappingURL=validation.js.map