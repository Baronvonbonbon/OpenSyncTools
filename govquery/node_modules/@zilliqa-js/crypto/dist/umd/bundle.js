(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@zilliqa-js/crypto"] = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var elliptic$1 = {};

	var name = "elliptic";
	var version$1 = "6.5.4";
	var description = "EC cryptography";
	var main = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author = "Fedor Indutny <fedor@indutny.com>";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage = "https://github.com/indutny/elliptic";
	var devDependencies = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var dependencies = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var require$$0$4 = {
		name: name,
		version: version$1,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies
	};

	var utils$m = {};

	var bn = {exports: {}};

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup[tmp >> 10];
	    output += lookup[(tmp >> 4) & 0x3F];
	    output += lookup[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$c.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();

	function kMaxLength () {
	  return Buffer$c.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$c.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$c(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$c (arg, encodingOrOffset, length) {
	  if (!Buffer$c.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$c)) {
	    return new Buffer$c(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer$c.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$c._augment = function (arr) {
	  arr.__proto__ = Buffer$c.prototype;
	  return arr
	};

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$c.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	};

	if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	  Buffer$c.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$c.__proto__ = Uint8Array;
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer$c[Symbol.species] === Buffer$c) ;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$c.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$c.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$c.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$c.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$c.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$c.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer$c.alloc(+length)
	}
	Buffer$c.isBuffer = isBuffer$1;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$c.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$c.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$c.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$c.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$c.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$c.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$c.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$c.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$c.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$c.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$c.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$c.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$c.compare(this, b) === 0
	};

	Buffer$c.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$c.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$c.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$c.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$c.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$c.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$c.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$c.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$c.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex$1(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$c.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$c.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$c(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$c.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$c.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$c.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$c.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$c.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$c.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$c.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$c.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$c.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$c.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$c.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$c.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$c.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$c.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$c.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, true, 23, 4)
	};

	Buffer$c.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read(this, offset, false, 23, 4)
	};

	Buffer$c.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, true, 52, 8)
	};

	Buffer$c.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$c.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$c.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$c.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$c.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$c.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$c.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$c.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$c.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$c.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$c.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$c.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$c.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$c.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$c.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$c.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$c.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$c.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$c.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$c.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$c.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$c.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$c.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$c.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$c.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$c.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$c(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex$1 (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$1(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer$c,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer$1,
		kMaxLength: _kMaxLength
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

	bn.exports;

	(function (module) {
		(function (module, exports) {

		  // Utils
		  function assert (val, msg) {
		    if (!val) throw new Error(msg || 'Assertion failed');
		  }

		  // Could use `inherits` module, but don't want to move from single file
		  // architecture yet.
		  function inherits (ctor, superCtor) {
		    ctor.super_ = superCtor;
		    var TempCtor = function () {};
		    TempCtor.prototype = superCtor.prototype;
		    ctor.prototype = new TempCtor();
		    ctor.prototype.constructor = ctor;
		  }

		  // BN

		  function BN (number, base, endian) {
		    if (BN.isBN(number)) {
		      return number;
		    }

		    this.negative = 0;
		    this.words = null;
		    this.length = 0;

		    // Reduction context
		    this.red = null;

		    if (number !== null) {
		      if (base === 'le' || base === 'be') {
		        endian = base;
		        base = 10;
		      }

		      this._init(number || 0, base || 10, endian || 'be');
		    }
		  }
		  if (typeof module === 'object') {
		    module.exports = BN;
		  } else {
		    exports.BN = BN;
		  }

		  BN.BN = BN;
		  BN.wordSize = 26;

		  var Buffer;
		  try {
		    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		      Buffer = window.Buffer;
		    } else {
		      Buffer = require$$0$3.Buffer;
		    }
		  } catch (e) {
		  }

		  BN.isBN = function isBN (num) {
		    if (num instanceof BN) {
		      return true;
		    }

		    return num !== null && typeof num === 'object' &&
		      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  };

		  BN.max = function max (left, right) {
		    if (left.cmp(right) > 0) return left;
		    return right;
		  };

		  BN.min = function min (left, right) {
		    if (left.cmp(right) < 0) return left;
		    return right;
		  };

		  BN.prototype._init = function init (number, base, endian) {
		    if (typeof number === 'number') {
		      return this._initNumber(number, base, endian);
		    }

		    if (typeof number === 'object') {
		      return this._initArray(number, base, endian);
		    }

		    if (base === 'hex') {
		      base = 16;
		    }
		    assert(base === (base | 0) && base >= 2 && base <= 36);

		    number = number.toString().replace(/\s+/g, '');
		    var start = 0;
		    if (number[0] === '-') {
		      start++;
		      this.negative = 1;
		    }

		    if (start < number.length) {
		      if (base === 16) {
		        this._parseHex(number, start, endian);
		      } else {
		        this._parseBase(number, base, start);
		        if (endian === 'le') {
		          this._initArray(this.toArray(), base, endian);
		        }
		      }
		    }
		  };

		  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		    if (number < 0) {
		      this.negative = 1;
		      number = -number;
		    }
		    if (number < 0x4000000) {
		      this.words = [ number & 0x3ffffff ];
		      this.length = 1;
		    } else if (number < 0x10000000000000) {
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff
		      ];
		      this.length = 2;
		    } else {
		      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		      this.words = [
		        number & 0x3ffffff,
		        (number / 0x4000000) & 0x3ffffff,
		        1
		      ];
		      this.length = 3;
		    }

		    if (endian !== 'le') return;

		    // Reverse the bytes
		    this._initArray(this.toArray(), base, endian);
		  };

		  BN.prototype._initArray = function _initArray (number, base, endian) {
		    // Perhaps a Uint8Array
		    assert(typeof number.length === 'number');
		    if (number.length <= 0) {
		      this.words = [ 0 ];
		      this.length = 1;
		      return this;
		    }

		    this.length = Math.ceil(number.length / 3);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    var j, w;
		    var off = 0;
		    if (endian === 'be') {
		      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    } else if (endian === 'le') {
		      for (i = 0, j = 0; i < number.length; i += 3) {
		        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		        this.words[j] |= (w << off) & 0x3ffffff;
		        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		        off += 24;
		        if (off >= 26) {
		          off -= 26;
		          j++;
		        }
		      }
		    }
		    return this.strip();
		  };

		  function parseHex4Bits (string, index) {
		    var c = string.charCodeAt(index);
		    // 'A' - 'F'
		    if (c >= 65 && c <= 70) {
		      return c - 55;
		    // 'a' - 'f'
		    } else if (c >= 97 && c <= 102) {
		      return c - 87;
		    // '0' - '9'
		    } else {
		      return (c - 48) & 0xf;
		    }
		  }

		  function parseHexByte (string, lowerBound, index) {
		    var r = parseHex4Bits(string, index);
		    if (index - 1 >= lowerBound) {
		      r |= parseHex4Bits(string, index - 1) << 4;
		    }
		    return r;
		  }

		  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		    // Create possibly bigger array to ensure that it fits the number
		    this.length = Math.ceil((number.length - start) / 6);
		    this.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      this.words[i] = 0;
		    }

		    // 24-bits chunks
		    var off = 0;
		    var j = 0;

		    var w;
		    if (endian === 'be') {
		      for (i = number.length - 1; i >= start; i -= 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    } else {
		      var parseLength = number.length - start;
		      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		        w = parseHexByte(number, start, i) << off;
		        this.words[j] |= w & 0x3ffffff;
		        if (off >= 18) {
		          off -= 18;
		          j += 1;
		          this.words[j] |= w >>> 26;
		        } else {
		          off += 8;
		        }
		      }
		    }

		    this.strip();
		  };

		  function parseBase (str, start, end, mul) {
		    var r = 0;
		    var len = Math.min(str.length, end);
		    for (var i = start; i < len; i++) {
		      var c = str.charCodeAt(i) - 48;

		      r *= mul;

		      // 'a'
		      if (c >= 49) {
		        r += c - 49 + 0xa;

		      // 'A'
		      } else if (c >= 17) {
		        r += c - 17 + 0xa;

		      // '0' - '9'
		      } else {
		        r += c;
		      }
		    }
		    return r;
		  }

		  BN.prototype._parseBase = function _parseBase (number, base, start) {
		    // Initialize as zero
		    this.words = [ 0 ];
		    this.length = 1;

		    // Find length of limb in base
		    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		      limbLen++;
		    }
		    limbLen--;
		    limbPow = (limbPow / base) | 0;

		    var total = number.length - start;
		    var mod = total % limbLen;
		    var end = Math.min(total, total - mod) + start;

		    var word = 0;
		    for (var i = start; i < end; i += limbLen) {
		      word = parseBase(number, i, i + limbLen, base);

		      this.imuln(limbPow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    if (mod !== 0) {
		      var pow = 1;
		      word = parseBase(number, i, number.length, base);

		      for (i = 0; i < mod; i++) {
		        pow *= base;
		      }

		      this.imuln(pow);
		      if (this.words[0] + word < 0x4000000) {
		        this.words[0] += word;
		      } else {
		        this._iaddn(word);
		      }
		    }

		    this.strip();
		  };

		  BN.prototype.copy = function copy (dest) {
		    dest.words = new Array(this.length);
		    for (var i = 0; i < this.length; i++) {
		      dest.words[i] = this.words[i];
		    }
		    dest.length = this.length;
		    dest.negative = this.negative;
		    dest.red = this.red;
		  };

		  BN.prototype.clone = function clone () {
		    var r = new BN(null);
		    this.copy(r);
		    return r;
		  };

		  BN.prototype._expand = function _expand (size) {
		    while (this.length < size) {
		      this.words[this.length++] = 0;
		    }
		    return this;
		  };

		  // Remove leading `0` from `this`
		  BN.prototype.strip = function strip () {
		    while (this.length > 1 && this.words[this.length - 1] === 0) {
		      this.length--;
		    }
		    return this._normSign();
		  };

		  BN.prototype._normSign = function _normSign () {
		    // -0 = 0
		    if (this.length === 1 && this.words[0] === 0) {
		      this.negative = 0;
		    }
		    return this;
		  };

		  BN.prototype.inspect = function inspect () {
		    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  };

		  /*

		  var zeros = [];
		  var groupSizes = [];
		  var groupBases = [];

		  var s = '';
		  var i = -1;
		  while (++i < BN.wordSize) {
		    zeros[i] = s;
		    s += '0';
		  }
		  groupSizes[0] = 0;
		  groupSizes[1] = 0;
		  groupBases[0] = 0;
		  groupBases[1] = 0;
		  var base = 2 - 1;
		  while (++base < 36 + 1) {
		    var groupSize = 0;
		    var groupBase = 1;
		    while (groupBase < (1 << BN.wordSize) / base) {
		      groupBase *= base;
		      groupSize += 1;
		    }
		    groupSizes[base] = groupSize;
		    groupBases[base] = groupBase;
		  }

		  */

		  var zeros = [
		    '',
		    '0',
		    '00',
		    '000',
		    '0000',
		    '00000',
		    '000000',
		    '0000000',
		    '00000000',
		    '000000000',
		    '0000000000',
		    '00000000000',
		    '000000000000',
		    '0000000000000',
		    '00000000000000',
		    '000000000000000',
		    '0000000000000000',
		    '00000000000000000',
		    '000000000000000000',
		    '0000000000000000000',
		    '00000000000000000000',
		    '000000000000000000000',
		    '0000000000000000000000',
		    '00000000000000000000000',
		    '000000000000000000000000',
		    '0000000000000000000000000'
		  ];

		  var groupSizes = [
		    0, 0,
		    25, 16, 12, 11, 10, 9, 8,
		    8, 7, 7, 7, 7, 6, 6,
		    6, 6, 6, 6, 6, 5, 5,
		    5, 5, 5, 5, 5, 5, 5,
		    5, 5, 5, 5, 5, 5, 5
		  ];

		  var groupBases = [
		    0, 0,
		    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  ];

		  BN.prototype.toString = function toString (base, padding) {
		    base = base || 10;
		    padding = padding | 0 || 1;

		    var out;
		    if (base === 16 || base === 'hex') {
		      out = '';
		      var off = 0;
		      var carry = 0;
		      for (var i = 0; i < this.length; i++) {
		        var w = this.words[i];
		        var word = (((w << off) | carry) & 0xffffff).toString(16);
		        carry = (w >>> (24 - off)) & 0xffffff;
		        if (carry !== 0 || i !== this.length - 1) {
		          out = zeros[6 - word.length] + word + out;
		        } else {
		          out = word + out;
		        }
		        off += 2;
		        if (off >= 26) {
		          off -= 26;
		          i--;
		        }
		      }
		      if (carry !== 0) {
		        out = carry.toString(16) + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    if (base === (base | 0) && base >= 2 && base <= 36) {
		      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		      var groupSize = groupSizes[base];
		      // var groupBase = Math.pow(base, groupSize);
		      var groupBase = groupBases[base];
		      out = '';
		      var c = this.clone();
		      c.negative = 0;
		      while (!c.isZero()) {
		        var r = c.modn(groupBase).toString(base);
		        c = c.idivn(groupBase);

		        if (!c.isZero()) {
		          out = zeros[groupSize - r.length] + r + out;
		        } else {
		          out = r + out;
		        }
		      }
		      if (this.isZero()) {
		        out = '0' + out;
		      }
		      while (out.length % padding !== 0) {
		        out = '0' + out;
		      }
		      if (this.negative !== 0) {
		        out = '-' + out;
		      }
		      return out;
		    }

		    assert(false, 'Base should be between 2 and 36');
		  };

		  BN.prototype.toNumber = function toNumber () {
		    var ret = this.words[0];
		    if (this.length === 2) {
		      ret += this.words[1] * 0x4000000;
		    } else if (this.length === 3 && this.words[2] === 0x01) {
		      // NOTE: at this stage it is known that the top bit is set
		      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		    } else if (this.length > 2) {
		      assert(false, 'Number can only safely store up to 53 bits');
		    }
		    return (this.negative !== 0) ? -ret : ret;
		  };

		  BN.prototype.toJSON = function toJSON () {
		    return this.toString(16);
		  };

		  BN.prototype.toBuffer = function toBuffer (endian, length) {
		    assert(typeof Buffer !== 'undefined');
		    return this.toArrayLike(Buffer, endian, length);
		  };

		  BN.prototype.toArray = function toArray (endian, length) {
		    return this.toArrayLike(Array, endian, length);
		  };

		  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		    var byteLength = this.byteLength();
		    var reqLength = length || Math.max(1, byteLength);
		    assert(byteLength <= reqLength, 'byte array longer than desired length');
		    assert(reqLength > 0, 'Requested array length <= 0');

		    this.strip();
		    var littleEndian = endian === 'le';
		    var res = new ArrayType(reqLength);

		    var b, i;
		    var q = this.clone();
		    if (!littleEndian) {
		      // Assume big-endian
		      for (i = 0; i < reqLength - byteLength; i++) {
		        res[i] = 0;
		      }

		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[reqLength - i - 1] = b;
		      }
		    } else {
		      for (i = 0; !q.isZero(); i++) {
		        b = q.andln(0xff);
		        q.iushrn(8);

		        res[i] = b;
		      }

		      for (; i < reqLength; i++) {
		        res[i] = 0;
		      }
		    }

		    return res;
		  };

		  if (Math.clz32) {
		    BN.prototype._countBits = function _countBits (w) {
		      return 32 - Math.clz32(w);
		    };
		  } else {
		    BN.prototype._countBits = function _countBits (w) {
		      var t = w;
		      var r = 0;
		      if (t >= 0x1000) {
		        r += 13;
		        t >>>= 13;
		      }
		      if (t >= 0x40) {
		        r += 7;
		        t >>>= 7;
		      }
		      if (t >= 0x8) {
		        r += 4;
		        t >>>= 4;
		      }
		      if (t >= 0x02) {
		        r += 2;
		        t >>>= 2;
		      }
		      return r + t;
		    };
		  }

		  BN.prototype._zeroBits = function _zeroBits (w) {
		    // Short-cut
		    if (w === 0) return 26;

		    var t = w;
		    var r = 0;
		    if ((t & 0x1fff) === 0) {
		      r += 13;
		      t >>>= 13;
		    }
		    if ((t & 0x7f) === 0) {
		      r += 7;
		      t >>>= 7;
		    }
		    if ((t & 0xf) === 0) {
		      r += 4;
		      t >>>= 4;
		    }
		    if ((t & 0x3) === 0) {
		      r += 2;
		      t >>>= 2;
		    }
		    if ((t & 0x1) === 0) {
		      r++;
		    }
		    return r;
		  };

		  // Return number of used bits in a BN
		  BN.prototype.bitLength = function bitLength () {
		    var w = this.words[this.length - 1];
		    var hi = this._countBits(w);
		    return (this.length - 1) * 26 + hi;
		  };

		  function toBitArray (num) {
		    var w = new Array(num.bitLength());

		    for (var bit = 0; bit < w.length; bit++) {
		      var off = (bit / 26) | 0;
		      var wbit = bit % 26;

		      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		    }

		    return w;
		  }

		  // Number of trailing zero bits
		  BN.prototype.zeroBits = function zeroBits () {
		    if (this.isZero()) return 0;

		    var r = 0;
		    for (var i = 0; i < this.length; i++) {
		      var b = this._zeroBits(this.words[i]);
		      r += b;
		      if (b !== 26) break;
		    }
		    return r;
		  };

		  BN.prototype.byteLength = function byteLength () {
		    return Math.ceil(this.bitLength() / 8);
		  };

		  BN.prototype.toTwos = function toTwos (width) {
		    if (this.negative !== 0) {
		      return this.abs().inotn(width).iaddn(1);
		    }
		    return this.clone();
		  };

		  BN.prototype.fromTwos = function fromTwos (width) {
		    if (this.testn(width - 1)) {
		      return this.notn(width).iaddn(1).ineg();
		    }
		    return this.clone();
		  };

		  BN.prototype.isNeg = function isNeg () {
		    return this.negative !== 0;
		  };

		  // Return negative clone of `this`
		  BN.prototype.neg = function neg () {
		    return this.clone().ineg();
		  };

		  BN.prototype.ineg = function ineg () {
		    if (!this.isZero()) {
		      this.negative ^= 1;
		    }

		    return this;
		  };

		  // Or `num` with `this` in-place
		  BN.prototype.iuor = function iuor (num) {
		    while (this.length < num.length) {
		      this.words[this.length++] = 0;
		    }

		    for (var i = 0; i < num.length; i++) {
		      this.words[i] = this.words[i] | num.words[i];
		    }

		    return this.strip();
		  };

		  BN.prototype.ior = function ior (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuor(num);
		  };

		  // Or `num` with `this`
		  BN.prototype.or = function or (num) {
		    if (this.length > num.length) return this.clone().ior(num);
		    return num.clone().ior(this);
		  };

		  BN.prototype.uor = function uor (num) {
		    if (this.length > num.length) return this.clone().iuor(num);
		    return num.clone().iuor(this);
		  };

		  // And `num` with `this` in-place
		  BN.prototype.iuand = function iuand (num) {
		    // b = min-length(num, this)
		    var b;
		    if (this.length > num.length) {
		      b = num;
		    } else {
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = this.words[i] & num.words[i];
		    }

		    this.length = b.length;

		    return this.strip();
		  };

		  BN.prototype.iand = function iand (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuand(num);
		  };

		  // And `num` with `this`
		  BN.prototype.and = function and (num) {
		    if (this.length > num.length) return this.clone().iand(num);
		    return num.clone().iand(this);
		  };

		  BN.prototype.uand = function uand (num) {
		    if (this.length > num.length) return this.clone().iuand(num);
		    return num.clone().iuand(this);
		  };

		  // Xor `num` with `this` in-place
		  BN.prototype.iuxor = function iuxor (num) {
		    // a.length > b.length
		    var a;
		    var b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    for (var i = 0; i < b.length; i++) {
		      this.words[i] = a.words[i] ^ b.words[i];
		    }

		    if (this !== a) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = a.length;

		    return this.strip();
		  };

		  BN.prototype.ixor = function ixor (num) {
		    assert((this.negative | num.negative) === 0);
		    return this.iuxor(num);
		  };

		  // Xor `num` with `this`
		  BN.prototype.xor = function xor (num) {
		    if (this.length > num.length) return this.clone().ixor(num);
		    return num.clone().ixor(this);
		  };

		  BN.prototype.uxor = function uxor (num) {
		    if (this.length > num.length) return this.clone().iuxor(num);
		    return num.clone().iuxor(this);
		  };

		  // Not ``this`` with ``width`` bitwidth
		  BN.prototype.inotn = function inotn (width) {
		    assert(typeof width === 'number' && width >= 0);

		    var bytesNeeded = Math.ceil(width / 26) | 0;
		    var bitsLeft = width % 26;

		    // Extend the buffer with leading zeroes
		    this._expand(bytesNeeded);

		    if (bitsLeft > 0) {
		      bytesNeeded--;
		    }

		    // Handle complete words
		    for (var i = 0; i < bytesNeeded; i++) {
		      this.words[i] = ~this.words[i] & 0x3ffffff;
		    }

		    // Handle the residue
		    if (bitsLeft > 0) {
		      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		    }

		    // And remove leading zeroes
		    return this.strip();
		  };

		  BN.prototype.notn = function notn (width) {
		    return this.clone().inotn(width);
		  };

		  // Set `bit` of `this`
		  BN.prototype.setn = function setn (bit, val) {
		    assert(typeof bit === 'number' && bit >= 0);

		    var off = (bit / 26) | 0;
		    var wbit = bit % 26;

		    this._expand(off + 1);

		    if (val) {
		      this.words[off] = this.words[off] | (1 << wbit);
		    } else {
		      this.words[off] = this.words[off] & ~(1 << wbit);
		    }

		    return this.strip();
		  };

		  // Add `num` to `this` in-place
		  BN.prototype.iadd = function iadd (num) {
		    var r;

		    // negative + positive
		    if (this.negative !== 0 && num.negative === 0) {
		      this.negative = 0;
		      r = this.isub(num);
		      this.negative ^= 1;
		      return this._normSign();

		    // positive + negative
		    } else if (this.negative === 0 && num.negative !== 0) {
		      num.negative = 0;
		      r = this.isub(num);
		      num.negative = 1;
		      return r._normSign();
		    }

		    // a.length > b.length
		    var a, b;
		    if (this.length > num.length) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      this.words[i] = r & 0x3ffffff;
		      carry = r >>> 26;
		    }

		    this.length = a.length;
		    if (carry !== 0) {
		      this.words[this.length] = carry;
		      this.length++;
		    // Copy the rest of the words
		    } else if (a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    return this;
		  };

		  // Add `num` to `this`
		  BN.prototype.add = function add (num) {
		    var res;
		    if (num.negative !== 0 && this.negative === 0) {
		      num.negative = 0;
		      res = this.sub(num);
		      num.negative ^= 1;
		      return res;
		    } else if (num.negative === 0 && this.negative !== 0) {
		      this.negative = 0;
		      res = num.sub(this);
		      this.negative = 1;
		      return res;
		    }

		    if (this.length > num.length) return this.clone().iadd(num);

		    return num.clone().iadd(this);
		  };

		  // Subtract `num` from `this` in-place
		  BN.prototype.isub = function isub (num) {
		    // this - (-num) = this + num
		    if (num.negative !== 0) {
		      num.negative = 0;
		      var r = this.iadd(num);
		      num.negative = 1;
		      return r._normSign();

		    // -this - num = -(this + num)
		    } else if (this.negative !== 0) {
		      this.negative = 0;
		      this.iadd(num);
		      this.negative = 1;
		      return this._normSign();
		    }

		    // At this point both numbers are positive
		    var cmp = this.cmp(num);

		    // Optimization - zeroify
		    if (cmp === 0) {
		      this.negative = 0;
		      this.length = 1;
		      this.words[0] = 0;
		      return this;
		    }

		    // a > b
		    var a, b;
		    if (cmp > 0) {
		      a = this;
		      b = num;
		    } else {
		      a = num;
		      b = this;
		    }

		    var carry = 0;
		    for (var i = 0; i < b.length; i++) {
		      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }
		    for (; carry !== 0 && i < a.length; i++) {
		      r = (a.words[i] | 0) + carry;
		      carry = r >> 26;
		      this.words[i] = r & 0x3ffffff;
		    }

		    // Copy rest of the words
		    if (carry === 0 && i < a.length && a !== this) {
		      for (; i < a.length; i++) {
		        this.words[i] = a.words[i];
		      }
		    }

		    this.length = Math.max(this.length, i);

		    if (a !== this) {
		      this.negative = 1;
		    }

		    return this.strip();
		  };

		  // Subtract `num` from `this`
		  BN.prototype.sub = function sub (num) {
		    return this.clone().isub(num);
		  };

		  function smallMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    var len = (self.length + num.length) | 0;
		    out.length = len;
		    len = (len - 1) | 0;

		    // Peel one iteration (compiler can't do it, because of code complexity)
		    var a = self.words[0] | 0;
		    var b = num.words[0] | 0;
		    var r = a * b;

		    var lo = r & 0x3ffffff;
		    var carry = (r / 0x4000000) | 0;
		    out.words[0] = lo;

		    for (var k = 1; k < len; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = carry >>> 26;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = (k - j) | 0;
		        a = self.words[i] | 0;
		        b = num.words[j] | 0;
		        r = a * b + rword;
		        ncarry += (r / 0x4000000) | 0;
		        rword = r & 0x3ffffff;
		      }
		      out.words[k] = rword | 0;
		      carry = ncarry | 0;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry | 0;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  // multiplication (like elliptic secp256k1).
		  var comb10MulTo = function comb10MulTo (self, num, out) {
		    var a = self.words;
		    var b = num.words;
		    var o = out.words;
		    var c = 0;
		    var lo;
		    var mid;
		    var hi;
		    var a0 = a[0] | 0;
		    var al0 = a0 & 0x1fff;
		    var ah0 = a0 >>> 13;
		    var a1 = a[1] | 0;
		    var al1 = a1 & 0x1fff;
		    var ah1 = a1 >>> 13;
		    var a2 = a[2] | 0;
		    var al2 = a2 & 0x1fff;
		    var ah2 = a2 >>> 13;
		    var a3 = a[3] | 0;
		    var al3 = a3 & 0x1fff;
		    var ah3 = a3 >>> 13;
		    var a4 = a[4] | 0;
		    var al4 = a4 & 0x1fff;
		    var ah4 = a4 >>> 13;
		    var a5 = a[5] | 0;
		    var al5 = a5 & 0x1fff;
		    var ah5 = a5 >>> 13;
		    var a6 = a[6] | 0;
		    var al6 = a6 & 0x1fff;
		    var ah6 = a6 >>> 13;
		    var a7 = a[7] | 0;
		    var al7 = a7 & 0x1fff;
		    var ah7 = a7 >>> 13;
		    var a8 = a[8] | 0;
		    var al8 = a8 & 0x1fff;
		    var ah8 = a8 >>> 13;
		    var a9 = a[9] | 0;
		    var al9 = a9 & 0x1fff;
		    var ah9 = a9 >>> 13;
		    var b0 = b[0] | 0;
		    var bl0 = b0 & 0x1fff;
		    var bh0 = b0 >>> 13;
		    var b1 = b[1] | 0;
		    var bl1 = b1 & 0x1fff;
		    var bh1 = b1 >>> 13;
		    var b2 = b[2] | 0;
		    var bl2 = b2 & 0x1fff;
		    var bh2 = b2 >>> 13;
		    var b3 = b[3] | 0;
		    var bl3 = b3 & 0x1fff;
		    var bh3 = b3 >>> 13;
		    var b4 = b[4] | 0;
		    var bl4 = b4 & 0x1fff;
		    var bh4 = b4 >>> 13;
		    var b5 = b[5] | 0;
		    var bl5 = b5 & 0x1fff;
		    var bh5 = b5 >>> 13;
		    var b6 = b[6] | 0;
		    var bl6 = b6 & 0x1fff;
		    var bh6 = b6 >>> 13;
		    var b7 = b[7] | 0;
		    var bl7 = b7 & 0x1fff;
		    var bh7 = b7 >>> 13;
		    var b8 = b[8] | 0;
		    var bl8 = b8 & 0x1fff;
		    var bh8 = b8 >>> 13;
		    var b9 = b[9] | 0;
		    var bl9 = b9 & 0x1fff;
		    var bh9 = b9 >>> 13;

		    out.negative = self.negative ^ num.negative;
		    out.length = 19;
		    /* k = 0 */
		    lo = Math.imul(al0, bl0);
		    mid = Math.imul(al0, bh0);
		    mid = (mid + Math.imul(ah0, bl0)) | 0;
		    hi = Math.imul(ah0, bh0);
		    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		    w0 &= 0x3ffffff;
		    /* k = 1 */
		    lo = Math.imul(al1, bl0);
		    mid = Math.imul(al1, bh0);
		    mid = (mid + Math.imul(ah1, bl0)) | 0;
		    hi = Math.imul(ah1, bh0);
		    lo = (lo + Math.imul(al0, bl1)) | 0;
		    mid = (mid + Math.imul(al0, bh1)) | 0;
		    mid = (mid + Math.imul(ah0, bl1)) | 0;
		    hi = (hi + Math.imul(ah0, bh1)) | 0;
		    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		    w1 &= 0x3ffffff;
		    /* k = 2 */
		    lo = Math.imul(al2, bl0);
		    mid = Math.imul(al2, bh0);
		    mid = (mid + Math.imul(ah2, bl0)) | 0;
		    hi = Math.imul(ah2, bh0);
		    lo = (lo + Math.imul(al1, bl1)) | 0;
		    mid = (mid + Math.imul(al1, bh1)) | 0;
		    mid = (mid + Math.imul(ah1, bl1)) | 0;
		    hi = (hi + Math.imul(ah1, bh1)) | 0;
		    lo = (lo + Math.imul(al0, bl2)) | 0;
		    mid = (mid + Math.imul(al0, bh2)) | 0;
		    mid = (mid + Math.imul(ah0, bl2)) | 0;
		    hi = (hi + Math.imul(ah0, bh2)) | 0;
		    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		    w2 &= 0x3ffffff;
		    /* k = 3 */
		    lo = Math.imul(al3, bl0);
		    mid = Math.imul(al3, bh0);
		    mid = (mid + Math.imul(ah3, bl0)) | 0;
		    hi = Math.imul(ah3, bh0);
		    lo = (lo + Math.imul(al2, bl1)) | 0;
		    mid = (mid + Math.imul(al2, bh1)) | 0;
		    mid = (mid + Math.imul(ah2, bl1)) | 0;
		    hi = (hi + Math.imul(ah2, bh1)) | 0;
		    lo = (lo + Math.imul(al1, bl2)) | 0;
		    mid = (mid + Math.imul(al1, bh2)) | 0;
		    mid = (mid + Math.imul(ah1, bl2)) | 0;
		    hi = (hi + Math.imul(ah1, bh2)) | 0;
		    lo = (lo + Math.imul(al0, bl3)) | 0;
		    mid = (mid + Math.imul(al0, bh3)) | 0;
		    mid = (mid + Math.imul(ah0, bl3)) | 0;
		    hi = (hi + Math.imul(ah0, bh3)) | 0;
		    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		    w3 &= 0x3ffffff;
		    /* k = 4 */
		    lo = Math.imul(al4, bl0);
		    mid = Math.imul(al4, bh0);
		    mid = (mid + Math.imul(ah4, bl0)) | 0;
		    hi = Math.imul(ah4, bh0);
		    lo = (lo + Math.imul(al3, bl1)) | 0;
		    mid = (mid + Math.imul(al3, bh1)) | 0;
		    mid = (mid + Math.imul(ah3, bl1)) | 0;
		    hi = (hi + Math.imul(ah3, bh1)) | 0;
		    lo = (lo + Math.imul(al2, bl2)) | 0;
		    mid = (mid + Math.imul(al2, bh2)) | 0;
		    mid = (mid + Math.imul(ah2, bl2)) | 0;
		    hi = (hi + Math.imul(ah2, bh2)) | 0;
		    lo = (lo + Math.imul(al1, bl3)) | 0;
		    mid = (mid + Math.imul(al1, bh3)) | 0;
		    mid = (mid + Math.imul(ah1, bl3)) | 0;
		    hi = (hi + Math.imul(ah1, bh3)) | 0;
		    lo = (lo + Math.imul(al0, bl4)) | 0;
		    mid = (mid + Math.imul(al0, bh4)) | 0;
		    mid = (mid + Math.imul(ah0, bl4)) | 0;
		    hi = (hi + Math.imul(ah0, bh4)) | 0;
		    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		    w4 &= 0x3ffffff;
		    /* k = 5 */
		    lo = Math.imul(al5, bl0);
		    mid = Math.imul(al5, bh0);
		    mid = (mid + Math.imul(ah5, bl0)) | 0;
		    hi = Math.imul(ah5, bh0);
		    lo = (lo + Math.imul(al4, bl1)) | 0;
		    mid = (mid + Math.imul(al4, bh1)) | 0;
		    mid = (mid + Math.imul(ah4, bl1)) | 0;
		    hi = (hi + Math.imul(ah4, bh1)) | 0;
		    lo = (lo + Math.imul(al3, bl2)) | 0;
		    mid = (mid + Math.imul(al3, bh2)) | 0;
		    mid = (mid + Math.imul(ah3, bl2)) | 0;
		    hi = (hi + Math.imul(ah3, bh2)) | 0;
		    lo = (lo + Math.imul(al2, bl3)) | 0;
		    mid = (mid + Math.imul(al2, bh3)) | 0;
		    mid = (mid + Math.imul(ah2, bl3)) | 0;
		    hi = (hi + Math.imul(ah2, bh3)) | 0;
		    lo = (lo + Math.imul(al1, bl4)) | 0;
		    mid = (mid + Math.imul(al1, bh4)) | 0;
		    mid = (mid + Math.imul(ah1, bl4)) | 0;
		    hi = (hi + Math.imul(ah1, bh4)) | 0;
		    lo = (lo + Math.imul(al0, bl5)) | 0;
		    mid = (mid + Math.imul(al0, bh5)) | 0;
		    mid = (mid + Math.imul(ah0, bl5)) | 0;
		    hi = (hi + Math.imul(ah0, bh5)) | 0;
		    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		    w5 &= 0x3ffffff;
		    /* k = 6 */
		    lo = Math.imul(al6, bl0);
		    mid = Math.imul(al6, bh0);
		    mid = (mid + Math.imul(ah6, bl0)) | 0;
		    hi = Math.imul(ah6, bh0);
		    lo = (lo + Math.imul(al5, bl1)) | 0;
		    mid = (mid + Math.imul(al5, bh1)) | 0;
		    mid = (mid + Math.imul(ah5, bl1)) | 0;
		    hi = (hi + Math.imul(ah5, bh1)) | 0;
		    lo = (lo + Math.imul(al4, bl2)) | 0;
		    mid = (mid + Math.imul(al4, bh2)) | 0;
		    mid = (mid + Math.imul(ah4, bl2)) | 0;
		    hi = (hi + Math.imul(ah4, bh2)) | 0;
		    lo = (lo + Math.imul(al3, bl3)) | 0;
		    mid = (mid + Math.imul(al3, bh3)) | 0;
		    mid = (mid + Math.imul(ah3, bl3)) | 0;
		    hi = (hi + Math.imul(ah3, bh3)) | 0;
		    lo = (lo + Math.imul(al2, bl4)) | 0;
		    mid = (mid + Math.imul(al2, bh4)) | 0;
		    mid = (mid + Math.imul(ah2, bl4)) | 0;
		    hi = (hi + Math.imul(ah2, bh4)) | 0;
		    lo = (lo + Math.imul(al1, bl5)) | 0;
		    mid = (mid + Math.imul(al1, bh5)) | 0;
		    mid = (mid + Math.imul(ah1, bl5)) | 0;
		    hi = (hi + Math.imul(ah1, bh5)) | 0;
		    lo = (lo + Math.imul(al0, bl6)) | 0;
		    mid = (mid + Math.imul(al0, bh6)) | 0;
		    mid = (mid + Math.imul(ah0, bl6)) | 0;
		    hi = (hi + Math.imul(ah0, bh6)) | 0;
		    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		    w6 &= 0x3ffffff;
		    /* k = 7 */
		    lo = Math.imul(al7, bl0);
		    mid = Math.imul(al7, bh0);
		    mid = (mid + Math.imul(ah7, bl0)) | 0;
		    hi = Math.imul(ah7, bh0);
		    lo = (lo + Math.imul(al6, bl1)) | 0;
		    mid = (mid + Math.imul(al6, bh1)) | 0;
		    mid = (mid + Math.imul(ah6, bl1)) | 0;
		    hi = (hi + Math.imul(ah6, bh1)) | 0;
		    lo = (lo + Math.imul(al5, bl2)) | 0;
		    mid = (mid + Math.imul(al5, bh2)) | 0;
		    mid = (mid + Math.imul(ah5, bl2)) | 0;
		    hi = (hi + Math.imul(ah5, bh2)) | 0;
		    lo = (lo + Math.imul(al4, bl3)) | 0;
		    mid = (mid + Math.imul(al4, bh3)) | 0;
		    mid = (mid + Math.imul(ah4, bl3)) | 0;
		    hi = (hi + Math.imul(ah4, bh3)) | 0;
		    lo = (lo + Math.imul(al3, bl4)) | 0;
		    mid = (mid + Math.imul(al3, bh4)) | 0;
		    mid = (mid + Math.imul(ah3, bl4)) | 0;
		    hi = (hi + Math.imul(ah3, bh4)) | 0;
		    lo = (lo + Math.imul(al2, bl5)) | 0;
		    mid = (mid + Math.imul(al2, bh5)) | 0;
		    mid = (mid + Math.imul(ah2, bl5)) | 0;
		    hi = (hi + Math.imul(ah2, bh5)) | 0;
		    lo = (lo + Math.imul(al1, bl6)) | 0;
		    mid = (mid + Math.imul(al1, bh6)) | 0;
		    mid = (mid + Math.imul(ah1, bl6)) | 0;
		    hi = (hi + Math.imul(ah1, bh6)) | 0;
		    lo = (lo + Math.imul(al0, bl7)) | 0;
		    mid = (mid + Math.imul(al0, bh7)) | 0;
		    mid = (mid + Math.imul(ah0, bl7)) | 0;
		    hi = (hi + Math.imul(ah0, bh7)) | 0;
		    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		    w7 &= 0x3ffffff;
		    /* k = 8 */
		    lo = Math.imul(al8, bl0);
		    mid = Math.imul(al8, bh0);
		    mid = (mid + Math.imul(ah8, bl0)) | 0;
		    hi = Math.imul(ah8, bh0);
		    lo = (lo + Math.imul(al7, bl1)) | 0;
		    mid = (mid + Math.imul(al7, bh1)) | 0;
		    mid = (mid + Math.imul(ah7, bl1)) | 0;
		    hi = (hi + Math.imul(ah7, bh1)) | 0;
		    lo = (lo + Math.imul(al6, bl2)) | 0;
		    mid = (mid + Math.imul(al6, bh2)) | 0;
		    mid = (mid + Math.imul(ah6, bl2)) | 0;
		    hi = (hi + Math.imul(ah6, bh2)) | 0;
		    lo = (lo + Math.imul(al5, bl3)) | 0;
		    mid = (mid + Math.imul(al5, bh3)) | 0;
		    mid = (mid + Math.imul(ah5, bl3)) | 0;
		    hi = (hi + Math.imul(ah5, bh3)) | 0;
		    lo = (lo + Math.imul(al4, bl4)) | 0;
		    mid = (mid + Math.imul(al4, bh4)) | 0;
		    mid = (mid + Math.imul(ah4, bl4)) | 0;
		    hi = (hi + Math.imul(ah4, bh4)) | 0;
		    lo = (lo + Math.imul(al3, bl5)) | 0;
		    mid = (mid + Math.imul(al3, bh5)) | 0;
		    mid = (mid + Math.imul(ah3, bl5)) | 0;
		    hi = (hi + Math.imul(ah3, bh5)) | 0;
		    lo = (lo + Math.imul(al2, bl6)) | 0;
		    mid = (mid + Math.imul(al2, bh6)) | 0;
		    mid = (mid + Math.imul(ah2, bl6)) | 0;
		    hi = (hi + Math.imul(ah2, bh6)) | 0;
		    lo = (lo + Math.imul(al1, bl7)) | 0;
		    mid = (mid + Math.imul(al1, bh7)) | 0;
		    mid = (mid + Math.imul(ah1, bl7)) | 0;
		    hi = (hi + Math.imul(ah1, bh7)) | 0;
		    lo = (lo + Math.imul(al0, bl8)) | 0;
		    mid = (mid + Math.imul(al0, bh8)) | 0;
		    mid = (mid + Math.imul(ah0, bl8)) | 0;
		    hi = (hi + Math.imul(ah0, bh8)) | 0;
		    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		    w8 &= 0x3ffffff;
		    /* k = 9 */
		    lo = Math.imul(al9, bl0);
		    mid = Math.imul(al9, bh0);
		    mid = (mid + Math.imul(ah9, bl0)) | 0;
		    hi = Math.imul(ah9, bh0);
		    lo = (lo + Math.imul(al8, bl1)) | 0;
		    mid = (mid + Math.imul(al8, bh1)) | 0;
		    mid = (mid + Math.imul(ah8, bl1)) | 0;
		    hi = (hi + Math.imul(ah8, bh1)) | 0;
		    lo = (lo + Math.imul(al7, bl2)) | 0;
		    mid = (mid + Math.imul(al7, bh2)) | 0;
		    mid = (mid + Math.imul(ah7, bl2)) | 0;
		    hi = (hi + Math.imul(ah7, bh2)) | 0;
		    lo = (lo + Math.imul(al6, bl3)) | 0;
		    mid = (mid + Math.imul(al6, bh3)) | 0;
		    mid = (mid + Math.imul(ah6, bl3)) | 0;
		    hi = (hi + Math.imul(ah6, bh3)) | 0;
		    lo = (lo + Math.imul(al5, bl4)) | 0;
		    mid = (mid + Math.imul(al5, bh4)) | 0;
		    mid = (mid + Math.imul(ah5, bl4)) | 0;
		    hi = (hi + Math.imul(ah5, bh4)) | 0;
		    lo = (lo + Math.imul(al4, bl5)) | 0;
		    mid = (mid + Math.imul(al4, bh5)) | 0;
		    mid = (mid + Math.imul(ah4, bl5)) | 0;
		    hi = (hi + Math.imul(ah4, bh5)) | 0;
		    lo = (lo + Math.imul(al3, bl6)) | 0;
		    mid = (mid + Math.imul(al3, bh6)) | 0;
		    mid = (mid + Math.imul(ah3, bl6)) | 0;
		    hi = (hi + Math.imul(ah3, bh6)) | 0;
		    lo = (lo + Math.imul(al2, bl7)) | 0;
		    mid = (mid + Math.imul(al2, bh7)) | 0;
		    mid = (mid + Math.imul(ah2, bl7)) | 0;
		    hi = (hi + Math.imul(ah2, bh7)) | 0;
		    lo = (lo + Math.imul(al1, bl8)) | 0;
		    mid = (mid + Math.imul(al1, bh8)) | 0;
		    mid = (mid + Math.imul(ah1, bl8)) | 0;
		    hi = (hi + Math.imul(ah1, bh8)) | 0;
		    lo = (lo + Math.imul(al0, bl9)) | 0;
		    mid = (mid + Math.imul(al0, bh9)) | 0;
		    mid = (mid + Math.imul(ah0, bl9)) | 0;
		    hi = (hi + Math.imul(ah0, bh9)) | 0;
		    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		    w9 &= 0x3ffffff;
		    /* k = 10 */
		    lo = Math.imul(al9, bl1);
		    mid = Math.imul(al9, bh1);
		    mid = (mid + Math.imul(ah9, bl1)) | 0;
		    hi = Math.imul(ah9, bh1);
		    lo = (lo + Math.imul(al8, bl2)) | 0;
		    mid = (mid + Math.imul(al8, bh2)) | 0;
		    mid = (mid + Math.imul(ah8, bl2)) | 0;
		    hi = (hi + Math.imul(ah8, bh2)) | 0;
		    lo = (lo + Math.imul(al7, bl3)) | 0;
		    mid = (mid + Math.imul(al7, bh3)) | 0;
		    mid = (mid + Math.imul(ah7, bl3)) | 0;
		    hi = (hi + Math.imul(ah7, bh3)) | 0;
		    lo = (lo + Math.imul(al6, bl4)) | 0;
		    mid = (mid + Math.imul(al6, bh4)) | 0;
		    mid = (mid + Math.imul(ah6, bl4)) | 0;
		    hi = (hi + Math.imul(ah6, bh4)) | 0;
		    lo = (lo + Math.imul(al5, bl5)) | 0;
		    mid = (mid + Math.imul(al5, bh5)) | 0;
		    mid = (mid + Math.imul(ah5, bl5)) | 0;
		    hi = (hi + Math.imul(ah5, bh5)) | 0;
		    lo = (lo + Math.imul(al4, bl6)) | 0;
		    mid = (mid + Math.imul(al4, bh6)) | 0;
		    mid = (mid + Math.imul(ah4, bl6)) | 0;
		    hi = (hi + Math.imul(ah4, bh6)) | 0;
		    lo = (lo + Math.imul(al3, bl7)) | 0;
		    mid = (mid + Math.imul(al3, bh7)) | 0;
		    mid = (mid + Math.imul(ah3, bl7)) | 0;
		    hi = (hi + Math.imul(ah3, bh7)) | 0;
		    lo = (lo + Math.imul(al2, bl8)) | 0;
		    mid = (mid + Math.imul(al2, bh8)) | 0;
		    mid = (mid + Math.imul(ah2, bl8)) | 0;
		    hi = (hi + Math.imul(ah2, bh8)) | 0;
		    lo = (lo + Math.imul(al1, bl9)) | 0;
		    mid = (mid + Math.imul(al1, bh9)) | 0;
		    mid = (mid + Math.imul(ah1, bl9)) | 0;
		    hi = (hi + Math.imul(ah1, bh9)) | 0;
		    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		    w10 &= 0x3ffffff;
		    /* k = 11 */
		    lo = Math.imul(al9, bl2);
		    mid = Math.imul(al9, bh2);
		    mid = (mid + Math.imul(ah9, bl2)) | 0;
		    hi = Math.imul(ah9, bh2);
		    lo = (lo + Math.imul(al8, bl3)) | 0;
		    mid = (mid + Math.imul(al8, bh3)) | 0;
		    mid = (mid + Math.imul(ah8, bl3)) | 0;
		    hi = (hi + Math.imul(ah8, bh3)) | 0;
		    lo = (lo + Math.imul(al7, bl4)) | 0;
		    mid = (mid + Math.imul(al7, bh4)) | 0;
		    mid = (mid + Math.imul(ah7, bl4)) | 0;
		    hi = (hi + Math.imul(ah7, bh4)) | 0;
		    lo = (lo + Math.imul(al6, bl5)) | 0;
		    mid = (mid + Math.imul(al6, bh5)) | 0;
		    mid = (mid + Math.imul(ah6, bl5)) | 0;
		    hi = (hi + Math.imul(ah6, bh5)) | 0;
		    lo = (lo + Math.imul(al5, bl6)) | 0;
		    mid = (mid + Math.imul(al5, bh6)) | 0;
		    mid = (mid + Math.imul(ah5, bl6)) | 0;
		    hi = (hi + Math.imul(ah5, bh6)) | 0;
		    lo = (lo + Math.imul(al4, bl7)) | 0;
		    mid = (mid + Math.imul(al4, bh7)) | 0;
		    mid = (mid + Math.imul(ah4, bl7)) | 0;
		    hi = (hi + Math.imul(ah4, bh7)) | 0;
		    lo = (lo + Math.imul(al3, bl8)) | 0;
		    mid = (mid + Math.imul(al3, bh8)) | 0;
		    mid = (mid + Math.imul(ah3, bl8)) | 0;
		    hi = (hi + Math.imul(ah3, bh8)) | 0;
		    lo = (lo + Math.imul(al2, bl9)) | 0;
		    mid = (mid + Math.imul(al2, bh9)) | 0;
		    mid = (mid + Math.imul(ah2, bl9)) | 0;
		    hi = (hi + Math.imul(ah2, bh9)) | 0;
		    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		    w11 &= 0x3ffffff;
		    /* k = 12 */
		    lo = Math.imul(al9, bl3);
		    mid = Math.imul(al9, bh3);
		    mid = (mid + Math.imul(ah9, bl3)) | 0;
		    hi = Math.imul(ah9, bh3);
		    lo = (lo + Math.imul(al8, bl4)) | 0;
		    mid = (mid + Math.imul(al8, bh4)) | 0;
		    mid = (mid + Math.imul(ah8, bl4)) | 0;
		    hi = (hi + Math.imul(ah8, bh4)) | 0;
		    lo = (lo + Math.imul(al7, bl5)) | 0;
		    mid = (mid + Math.imul(al7, bh5)) | 0;
		    mid = (mid + Math.imul(ah7, bl5)) | 0;
		    hi = (hi + Math.imul(ah7, bh5)) | 0;
		    lo = (lo + Math.imul(al6, bl6)) | 0;
		    mid = (mid + Math.imul(al6, bh6)) | 0;
		    mid = (mid + Math.imul(ah6, bl6)) | 0;
		    hi = (hi + Math.imul(ah6, bh6)) | 0;
		    lo = (lo + Math.imul(al5, bl7)) | 0;
		    mid = (mid + Math.imul(al5, bh7)) | 0;
		    mid = (mid + Math.imul(ah5, bl7)) | 0;
		    hi = (hi + Math.imul(ah5, bh7)) | 0;
		    lo = (lo + Math.imul(al4, bl8)) | 0;
		    mid = (mid + Math.imul(al4, bh8)) | 0;
		    mid = (mid + Math.imul(ah4, bl8)) | 0;
		    hi = (hi + Math.imul(ah4, bh8)) | 0;
		    lo = (lo + Math.imul(al3, bl9)) | 0;
		    mid = (mid + Math.imul(al3, bh9)) | 0;
		    mid = (mid + Math.imul(ah3, bl9)) | 0;
		    hi = (hi + Math.imul(ah3, bh9)) | 0;
		    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		    w12 &= 0x3ffffff;
		    /* k = 13 */
		    lo = Math.imul(al9, bl4);
		    mid = Math.imul(al9, bh4);
		    mid = (mid + Math.imul(ah9, bl4)) | 0;
		    hi = Math.imul(ah9, bh4);
		    lo = (lo + Math.imul(al8, bl5)) | 0;
		    mid = (mid + Math.imul(al8, bh5)) | 0;
		    mid = (mid + Math.imul(ah8, bl5)) | 0;
		    hi = (hi + Math.imul(ah8, bh5)) | 0;
		    lo = (lo + Math.imul(al7, bl6)) | 0;
		    mid = (mid + Math.imul(al7, bh6)) | 0;
		    mid = (mid + Math.imul(ah7, bl6)) | 0;
		    hi = (hi + Math.imul(ah7, bh6)) | 0;
		    lo = (lo + Math.imul(al6, bl7)) | 0;
		    mid = (mid + Math.imul(al6, bh7)) | 0;
		    mid = (mid + Math.imul(ah6, bl7)) | 0;
		    hi = (hi + Math.imul(ah6, bh7)) | 0;
		    lo = (lo + Math.imul(al5, bl8)) | 0;
		    mid = (mid + Math.imul(al5, bh8)) | 0;
		    mid = (mid + Math.imul(ah5, bl8)) | 0;
		    hi = (hi + Math.imul(ah5, bh8)) | 0;
		    lo = (lo + Math.imul(al4, bl9)) | 0;
		    mid = (mid + Math.imul(al4, bh9)) | 0;
		    mid = (mid + Math.imul(ah4, bl9)) | 0;
		    hi = (hi + Math.imul(ah4, bh9)) | 0;
		    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		    w13 &= 0x3ffffff;
		    /* k = 14 */
		    lo = Math.imul(al9, bl5);
		    mid = Math.imul(al9, bh5);
		    mid = (mid + Math.imul(ah9, bl5)) | 0;
		    hi = Math.imul(ah9, bh5);
		    lo = (lo + Math.imul(al8, bl6)) | 0;
		    mid = (mid + Math.imul(al8, bh6)) | 0;
		    mid = (mid + Math.imul(ah8, bl6)) | 0;
		    hi = (hi + Math.imul(ah8, bh6)) | 0;
		    lo = (lo + Math.imul(al7, bl7)) | 0;
		    mid = (mid + Math.imul(al7, bh7)) | 0;
		    mid = (mid + Math.imul(ah7, bl7)) | 0;
		    hi = (hi + Math.imul(ah7, bh7)) | 0;
		    lo = (lo + Math.imul(al6, bl8)) | 0;
		    mid = (mid + Math.imul(al6, bh8)) | 0;
		    mid = (mid + Math.imul(ah6, bl8)) | 0;
		    hi = (hi + Math.imul(ah6, bh8)) | 0;
		    lo = (lo + Math.imul(al5, bl9)) | 0;
		    mid = (mid + Math.imul(al5, bh9)) | 0;
		    mid = (mid + Math.imul(ah5, bl9)) | 0;
		    hi = (hi + Math.imul(ah5, bh9)) | 0;
		    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		    w14 &= 0x3ffffff;
		    /* k = 15 */
		    lo = Math.imul(al9, bl6);
		    mid = Math.imul(al9, bh6);
		    mid = (mid + Math.imul(ah9, bl6)) | 0;
		    hi = Math.imul(ah9, bh6);
		    lo = (lo + Math.imul(al8, bl7)) | 0;
		    mid = (mid + Math.imul(al8, bh7)) | 0;
		    mid = (mid + Math.imul(ah8, bl7)) | 0;
		    hi = (hi + Math.imul(ah8, bh7)) | 0;
		    lo = (lo + Math.imul(al7, bl8)) | 0;
		    mid = (mid + Math.imul(al7, bh8)) | 0;
		    mid = (mid + Math.imul(ah7, bl8)) | 0;
		    hi = (hi + Math.imul(ah7, bh8)) | 0;
		    lo = (lo + Math.imul(al6, bl9)) | 0;
		    mid = (mid + Math.imul(al6, bh9)) | 0;
		    mid = (mid + Math.imul(ah6, bl9)) | 0;
		    hi = (hi + Math.imul(ah6, bh9)) | 0;
		    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		    w15 &= 0x3ffffff;
		    /* k = 16 */
		    lo = Math.imul(al9, bl7);
		    mid = Math.imul(al9, bh7);
		    mid = (mid + Math.imul(ah9, bl7)) | 0;
		    hi = Math.imul(ah9, bh7);
		    lo = (lo + Math.imul(al8, bl8)) | 0;
		    mid = (mid + Math.imul(al8, bh8)) | 0;
		    mid = (mid + Math.imul(ah8, bl8)) | 0;
		    hi = (hi + Math.imul(ah8, bh8)) | 0;
		    lo = (lo + Math.imul(al7, bl9)) | 0;
		    mid = (mid + Math.imul(al7, bh9)) | 0;
		    mid = (mid + Math.imul(ah7, bl9)) | 0;
		    hi = (hi + Math.imul(ah7, bh9)) | 0;
		    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		    w16 &= 0x3ffffff;
		    /* k = 17 */
		    lo = Math.imul(al9, bl8);
		    mid = Math.imul(al9, bh8);
		    mid = (mid + Math.imul(ah9, bl8)) | 0;
		    hi = Math.imul(ah9, bh8);
		    lo = (lo + Math.imul(al8, bl9)) | 0;
		    mid = (mid + Math.imul(al8, bh9)) | 0;
		    mid = (mid + Math.imul(ah8, bl9)) | 0;
		    hi = (hi + Math.imul(ah8, bh9)) | 0;
		    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		    w17 &= 0x3ffffff;
		    /* k = 18 */
		    lo = Math.imul(al9, bl9);
		    mid = Math.imul(al9, bh9);
		    mid = (mid + Math.imul(ah9, bl9)) | 0;
		    hi = Math.imul(ah9, bh9);
		    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		    w18 &= 0x3ffffff;
		    o[0] = w0;
		    o[1] = w1;
		    o[2] = w2;
		    o[3] = w3;
		    o[4] = w4;
		    o[5] = w5;
		    o[6] = w6;
		    o[7] = w7;
		    o[8] = w8;
		    o[9] = w9;
		    o[10] = w10;
		    o[11] = w11;
		    o[12] = w12;
		    o[13] = w13;
		    o[14] = w14;
		    o[15] = w15;
		    o[16] = w16;
		    o[17] = w17;
		    o[18] = w18;
		    if (c !== 0) {
		      o[19] = c;
		      out.length++;
		    }
		    return out;
		  };

		  // Polyfill comb
		  if (!Math.imul) {
		    comb10MulTo = smallMulTo;
		  }

		  function bigMulTo (self, num, out) {
		    out.negative = num.negative ^ self.negative;
		    out.length = self.length + num.length;

		    var carry = 0;
		    var hncarry = 0;
		    for (var k = 0; k < out.length - 1; k++) {
		      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		      // note that ncarry could be >= 0x3ffffff
		      var ncarry = hncarry;
		      hncarry = 0;
		      var rword = carry & 0x3ffffff;
		      var maxJ = Math.min(k, num.length - 1);
		      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		        var i = k - j;
		        var a = self.words[i] | 0;
		        var b = num.words[j] | 0;
		        var r = a * b;

		        var lo = r & 0x3ffffff;
		        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		        lo = (lo + rword) | 0;
		        rword = lo & 0x3ffffff;
		        ncarry = (ncarry + (lo >>> 26)) | 0;

		        hncarry += ncarry >>> 26;
		        ncarry &= 0x3ffffff;
		      }
		      out.words[k] = rword;
		      carry = ncarry;
		      ncarry = hncarry;
		    }
		    if (carry !== 0) {
		      out.words[k] = carry;
		    } else {
		      out.length--;
		    }

		    return out.strip();
		  }

		  function jumboMulTo (self, num, out) {
		    var fftm = new FFTM();
		    return fftm.mulp(self, num, out);
		  }

		  BN.prototype.mulTo = function mulTo (num, out) {
		    var res;
		    var len = this.length + num.length;
		    if (this.length === 10 && num.length === 10) {
		      res = comb10MulTo(this, num, out);
		    } else if (len < 63) {
		      res = smallMulTo(this, num, out);
		    } else if (len < 1024) {
		      res = bigMulTo(this, num, out);
		    } else {
		      res = jumboMulTo(this, num, out);
		    }

		    return res;
		  };

		  // Cooley-Tukey algorithm for FFT
		  // slightly revisited to rely on looping instead of recursion

		  function FFTM (x, y) {
		    this.x = x;
		    this.y = y;
		  }

		  FFTM.prototype.makeRBT = function makeRBT (N) {
		    var t = new Array(N);
		    var l = BN.prototype._countBits(N) - 1;
		    for (var i = 0; i < N; i++) {
		      t[i] = this.revBin(i, l, N);
		    }

		    return t;
		  };

		  // Returns binary-reversed representation of `x`
		  FFTM.prototype.revBin = function revBin (x, l, N) {
		    if (x === 0 || x === N - 1) return x;

		    var rb = 0;
		    for (var i = 0; i < l; i++) {
		      rb |= (x & 1) << (l - i - 1);
		      x >>= 1;
		    }

		    return rb;
		  };

		  // Performs "tweedling" phase, therefore 'emulating'
		  // behaviour of the recursive algorithm
		  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		    for (var i = 0; i < N; i++) {
		      rtws[i] = rws[rbt[i]];
		      itws[i] = iws[rbt[i]];
		    }
		  };

		  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		    this.permute(rbt, rws, iws, rtws, itws, N);

		    for (var s = 1; s < N; s <<= 1) {
		      var l = s << 1;

		      var rtwdf = Math.cos(2 * Math.PI / l);
		      var itwdf = Math.sin(2 * Math.PI / l);

		      for (var p = 0; p < N; p += l) {
		        var rtwdf_ = rtwdf;
		        var itwdf_ = itwdf;

		        for (var j = 0; j < s; j++) {
		          var re = rtws[p + j];
		          var ie = itws[p + j];

		          var ro = rtws[p + j + s];
		          var io = itws[p + j + s];

		          var rx = rtwdf_ * ro - itwdf_ * io;

		          io = rtwdf_ * io + itwdf_ * ro;
		          ro = rx;

		          rtws[p + j] = re + ro;
		          itws[p + j] = ie + io;

		          rtws[p + j + s] = re - ro;
		          itws[p + j + s] = ie - io;

		          /* jshint maxdepth : false */
		          if (j !== l) {
		            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

		            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		            rtwdf_ = rx;
		          }
		        }
		      }
		    }
		  };

		  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		    var N = Math.max(m, n) | 1;
		    var odd = N & 1;
		    var i = 0;
		    for (N = N / 2 | 0; N; N = N >>> 1) {
		      i++;
		    }

		    return 1 << i + 1 + odd;
		  };

		  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		    if (N <= 1) return;

		    for (var i = 0; i < N / 2; i++) {
		      var t = rws[i];

		      rws[i] = rws[N - i - 1];
		      rws[N - i - 1] = t;

		      t = iws[i];

		      iws[i] = -iws[N - i - 1];
		      iws[N - i - 1] = -t;
		    }
		  };

		  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		    var carry = 0;
		    for (var i = 0; i < N / 2; i++) {
		      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
		        Math.round(ws[2 * i] / N) +
		        carry;

		      ws[i] = w & 0x3ffffff;

		      if (w < 0x4000000) {
		        carry = 0;
		      } else {
		        carry = w / 0x4000000 | 0;
		      }
		    }

		    return ws;
		  };

		  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		    var carry = 0;
		    for (var i = 0; i < len; i++) {
		      carry = carry + (ws[i] | 0);

		      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		    }

		    // Pad with zeroes
		    for (i = 2 * len; i < N; ++i) {
		      rws[i] = 0;
		    }

		    assert(carry === 0);
		    assert((carry & ~0x1fff) === 0);
		  };

		  FFTM.prototype.stub = function stub (N) {
		    var ph = new Array(N);
		    for (var i = 0; i < N; i++) {
		      ph[i] = 0;
		    }

		    return ph;
		  };

		  FFTM.prototype.mulp = function mulp (x, y, out) {
		    var N = 2 * this.guessLen13b(x.length, y.length);

		    var rbt = this.makeRBT(N);

		    var _ = this.stub(N);

		    var rws = new Array(N);
		    var rwst = new Array(N);
		    var iwst = new Array(N);

		    var nrws = new Array(N);
		    var nrwst = new Array(N);
		    var niwst = new Array(N);

		    var rmws = out.words;
		    rmws.length = N;

		    this.convert13b(x.words, x.length, rws, N);
		    this.convert13b(y.words, y.length, nrws, N);

		    this.transform(rws, _, rwst, iwst, N, rbt);
		    this.transform(nrws, _, nrwst, niwst, N, rbt);

		    for (var i = 0; i < N; i++) {
		      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		      rwst[i] = rx;
		    }

		    this.conjugate(rwst, iwst, N);
		    this.transform(rwst, iwst, rmws, _, N, rbt);
		    this.conjugate(rmws, _, N);
		    this.normalize13b(rmws, N);

		    out.negative = x.negative ^ y.negative;
		    out.length = x.length + y.length;
		    return out.strip();
		  };

		  // Multiply `this` by `num`
		  BN.prototype.mul = function mul (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return this.mulTo(num, out);
		  };

		  // Multiply employing FFT
		  BN.prototype.mulf = function mulf (num) {
		    var out = new BN(null);
		    out.words = new Array(this.length + num.length);
		    return jumboMulTo(this, num, out);
		  };

		  // In-place Multiplication
		  BN.prototype.imul = function imul (num) {
		    return this.clone().mulTo(num, this);
		  };

		  BN.prototype.imuln = function imuln (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);

		    // Carry
		    var carry = 0;
		    for (var i = 0; i < this.length; i++) {
		      var w = (this.words[i] | 0) * num;
		      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		      carry >>= 26;
		      carry += (w / 0x4000000) | 0;
		      // NOTE: lo is 27bit maximum
		      carry += lo >>> 26;
		      this.words[i] = lo & 0x3ffffff;
		    }

		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }

		    return this;
		  };

		  BN.prototype.muln = function muln (num) {
		    return this.clone().imuln(num);
		  };

		  // `this` * `this`
		  BN.prototype.sqr = function sqr () {
		    return this.mul(this);
		  };

		  // `this` * `this` in-place
		  BN.prototype.isqr = function isqr () {
		    return this.imul(this.clone());
		  };

		  // Math.pow(`this`, `num`)
		  BN.prototype.pow = function pow (num) {
		    var w = toBitArray(num);
		    if (w.length === 0) return new BN(1);

		    // Skip leading zeroes
		    var res = this;
		    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		      if (w[i] !== 0) break;
		    }

		    if (++i < w.length) {
		      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		        if (w[i] === 0) continue;

		        res = res.mul(q);
		      }
		    }

		    return res;
		  };

		  // Shift-left in-place
		  BN.prototype.iushln = function iushln (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;
		    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		    var i;

		    if (r !== 0) {
		      var carry = 0;

		      for (i = 0; i < this.length; i++) {
		        var newCarry = this.words[i] & carryMask;
		        var c = ((this.words[i] | 0) - newCarry) << r;
		        this.words[i] = c | carry;
		        carry = newCarry >>> (26 - r);
		      }

		      if (carry) {
		        this.words[i] = carry;
		        this.length++;
		      }
		    }

		    if (s !== 0) {
		      for (i = this.length - 1; i >= 0; i--) {
		        this.words[i + s] = this.words[i];
		      }

		      for (i = 0; i < s; i++) {
		        this.words[i] = 0;
		      }

		      this.length += s;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishln = function ishln (bits) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushln(bits);
		  };

		  // Shift-right in-place
		  // NOTE: `hint` is a lowest bit before trailing zeroes
		  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var h;
		    if (hint) {
		      h = (hint - (hint % 26)) / 26;
		    } else {
		      h = 0;
		    }

		    var r = bits % 26;
		    var s = Math.min((bits - r) / 26, this.length);
		    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		    var maskedWords = extended;

		    h -= s;
		    h = Math.max(0, h);

		    // Extended mode, copy masked part
		    if (maskedWords) {
		      for (var i = 0; i < s; i++) {
		        maskedWords.words[i] = this.words[i];
		      }
		      maskedWords.length = s;
		    }

		    if (s === 0) ; else if (this.length > s) {
		      this.length -= s;
		      for (i = 0; i < this.length; i++) {
		        this.words[i] = this.words[i + s];
		      }
		    } else {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    var carry = 0;
		    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		      var word = this.words[i] | 0;
		      this.words[i] = (carry << (26 - r)) | (word >>> r);
		      carry = word & mask;
		    }

		    // Push carried bits as a mask
		    if (maskedWords && carry !== 0) {
		      maskedWords.words[maskedWords.length++] = carry;
		    }

		    if (this.length === 0) {
		      this.words[0] = 0;
		      this.length = 1;
		    }

		    return this.strip();
		  };

		  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		    // TODO(indutny): implement me
		    assert(this.negative === 0);
		    return this.iushrn(bits, hint, extended);
		  };

		  // Shift-left
		  BN.prototype.shln = function shln (bits) {
		    return this.clone().ishln(bits);
		  };

		  BN.prototype.ushln = function ushln (bits) {
		    return this.clone().iushln(bits);
		  };

		  // Shift-right
		  BN.prototype.shrn = function shrn (bits) {
		    return this.clone().ishrn(bits);
		  };

		  BN.prototype.ushrn = function ushrn (bits) {
		    return this.clone().iushrn(bits);
		  };

		  // Test if n bit is set
		  BN.prototype.testn = function testn (bit) {
		    assert(typeof bit === 'number' && bit >= 0);
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) return false;

		    // Check bit and return
		    var w = this.words[s];

		    return !!(w & q);
		  };

		  // Return only lowers bits of number (in-place)
		  BN.prototype.imaskn = function imaskn (bits) {
		    assert(typeof bits === 'number' && bits >= 0);
		    var r = bits % 26;
		    var s = (bits - r) / 26;

		    assert(this.negative === 0, 'imaskn works only with positive numbers');

		    if (this.length <= s) {
		      return this;
		    }

		    if (r !== 0) {
		      s++;
		    }
		    this.length = Math.min(s, this.length);

		    if (r !== 0) {
		      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		      this.words[this.length - 1] &= mask;
		    }

		    return this.strip();
		  };

		  // Return only lowers bits of number
		  BN.prototype.maskn = function maskn (bits) {
		    return this.clone().imaskn(bits);
		  };

		  // Add plain number `num` to `this`
		  BN.prototype.iaddn = function iaddn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.isubn(-num);

		    // Possible sign change
		    if (this.negative !== 0) {
		      if (this.length === 1 && (this.words[0] | 0) < num) {
		        this.words[0] = num - (this.words[0] | 0);
		        this.negative = 0;
		        return this;
		      }

		      this.negative = 0;
		      this.isubn(num);
		      this.negative = 1;
		      return this;
		    }

		    // Add without checks
		    return this._iaddn(num);
		  };

		  BN.prototype._iaddn = function _iaddn (num) {
		    this.words[0] += num;

		    // Carry
		    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		      this.words[i] -= 0x4000000;
		      if (i === this.length - 1) {
		        this.words[i + 1] = 1;
		      } else {
		        this.words[i + 1]++;
		      }
		    }
		    this.length = Math.max(this.length, i + 1);

		    return this;
		  };

		  // Subtract plain number `num` from `this`
		  BN.prototype.isubn = function isubn (num) {
		    assert(typeof num === 'number');
		    assert(num < 0x4000000);
		    if (num < 0) return this.iaddn(-num);

		    if (this.negative !== 0) {
		      this.negative = 0;
		      this.iaddn(num);
		      this.negative = 1;
		      return this;
		    }

		    this.words[0] -= num;

		    if (this.length === 1 && this.words[0] < 0) {
		      this.words[0] = -this.words[0];
		      this.negative = 1;
		    } else {
		      // Carry
		      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		        this.words[i] += 0x4000000;
		        this.words[i + 1] -= 1;
		      }
		    }

		    return this.strip();
		  };

		  BN.prototype.addn = function addn (num) {
		    return this.clone().iaddn(num);
		  };

		  BN.prototype.subn = function subn (num) {
		    return this.clone().isubn(num);
		  };

		  BN.prototype.iabs = function iabs () {
		    this.negative = 0;

		    return this;
		  };

		  BN.prototype.abs = function abs () {
		    return this.clone().iabs();
		  };

		  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		    var len = num.length + shift;
		    var i;

		    this._expand(len);

		    var w;
		    var carry = 0;
		    for (i = 0; i < num.length; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      var right = (num.words[i] | 0) * mul;
		      w -= right & 0x3ffffff;
		      carry = (w >> 26) - ((right / 0x4000000) | 0);
		      this.words[i + shift] = w & 0x3ffffff;
		    }
		    for (; i < this.length - shift; i++) {
		      w = (this.words[i + shift] | 0) + carry;
		      carry = w >> 26;
		      this.words[i + shift] = w & 0x3ffffff;
		    }

		    if (carry === 0) return this.strip();

		    // Subtraction overflow
		    assert(carry === -1);
		    carry = 0;
		    for (i = 0; i < this.length; i++) {
		      w = -(this.words[i] | 0) + carry;
		      carry = w >> 26;
		      this.words[i] = w & 0x3ffffff;
		    }
		    this.negative = 1;

		    return this.strip();
		  };

		  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		    var shift = this.length - num.length;

		    var a = this.clone();
		    var b = num;

		    // Normalize
		    var bhi = b.words[b.length - 1] | 0;
		    var bhiBits = this._countBits(bhi);
		    shift = 26 - bhiBits;
		    if (shift !== 0) {
		      b = b.ushln(shift);
		      a.iushln(shift);
		      bhi = b.words[b.length - 1] | 0;
		    }

		    // Initialize quotient
		    var m = a.length - b.length;
		    var q;

		    if (mode !== 'mod') {
		      q = new BN(null);
		      q.length = m + 1;
		      q.words = new Array(q.length);
		      for (var i = 0; i < q.length; i++) {
		        q.words[i] = 0;
		      }
		    }

		    var diff = a.clone()._ishlnsubmul(b, 1, m);
		    if (diff.negative === 0) {
		      a = diff;
		      if (q) {
		        q.words[m] = 1;
		      }
		    }

		    for (var j = m - 1; j >= 0; j--) {
		      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		        (a.words[b.length + j - 1] | 0);

		      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		      // (0x7ffffff)
		      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		      a._ishlnsubmul(b, qj, j);
		      while (a.negative !== 0) {
		        qj--;
		        a.negative = 0;
		        a._ishlnsubmul(b, 1, j);
		        if (!a.isZero()) {
		          a.negative ^= 1;
		        }
		      }
		      if (q) {
		        q.words[j] = qj;
		      }
		    }
		    if (q) {
		      q.strip();
		    }
		    a.strip();

		    // Denormalize
		    if (mode !== 'div' && shift !== 0) {
		      a.iushrn(shift);
		    }

		    return {
		      div: q || null,
		      mod: a
		    };
		  };

		  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  //       to `div` to request div only, or be absent to
		  //       request both div & mod
		  //       2) `positive` is true if unsigned mod is requested
		  BN.prototype.divmod = function divmod (num, mode, positive) {
		    assert(!num.isZero());

		    if (this.isZero()) {
		      return {
		        div: new BN(0),
		        mod: new BN(0)
		      };
		    }

		    var div, mod, res;
		    if (this.negative !== 0 && num.negative === 0) {
		      res = this.neg().divmod(num, mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.iadd(num);
		        }
		      }

		      return {
		        div: div,
		        mod: mod
		      };
		    }

		    if (this.negative === 0 && num.negative !== 0) {
		      res = this.divmod(num.neg(), mode);

		      if (mode !== 'mod') {
		        div = res.div.neg();
		      }

		      return {
		        div: div,
		        mod: res.mod
		      };
		    }

		    if ((this.negative & num.negative) !== 0) {
		      res = this.neg().divmod(num.neg(), mode);

		      if (mode !== 'div') {
		        mod = res.mod.neg();
		        if (positive && mod.negative !== 0) {
		          mod.isub(num);
		        }
		      }

		      return {
		        div: res.div,
		        mod: mod
		      };
		    }

		    // Both numbers are positive at this point

		    // Strip both numbers to approximate shift value
		    if (num.length > this.length || this.cmp(num) < 0) {
		      return {
		        div: new BN(0),
		        mod: this
		      };
		    }

		    // Very short reduction
		    if (num.length === 1) {
		      if (mode === 'div') {
		        return {
		          div: this.divn(num.words[0]),
		          mod: null
		        };
		      }

		      if (mode === 'mod') {
		        return {
		          div: null,
		          mod: new BN(this.modn(num.words[0]))
		        };
		      }

		      return {
		        div: this.divn(num.words[0]),
		        mod: new BN(this.modn(num.words[0]))
		      };
		    }

		    return this._wordDiv(num, mode);
		  };

		  // Find `this` / `num`
		  BN.prototype.div = function div (num) {
		    return this.divmod(num, 'div', false).div;
		  };

		  // Find `this` % `num`
		  BN.prototype.mod = function mod (num) {
		    return this.divmod(num, 'mod', false).mod;
		  };

		  BN.prototype.umod = function umod (num) {
		    return this.divmod(num, 'mod', true).mod;
		  };

		  // Find Round(`this` / `num`)
		  BN.prototype.divRound = function divRound (num) {
		    var dm = this.divmod(num);

		    // Fast case - exact division
		    if (dm.mod.isZero()) return dm.div;

		    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		    var half = num.ushrn(1);
		    var r2 = num.andln(1);
		    var cmp = mod.cmp(half);

		    // Round down
		    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		    // Round up
		    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  };

		  BN.prototype.modn = function modn (num) {
		    assert(num <= 0x3ffffff);
		    var p = (1 << 26) % num;

		    var acc = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      acc = (p * acc + (this.words[i] | 0)) % num;
		    }

		    return acc;
		  };

		  // In-place division by number
		  BN.prototype.idivn = function idivn (num) {
		    assert(num <= 0x3ffffff);

		    var carry = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var w = (this.words[i] | 0) + carry * 0x4000000;
		      this.words[i] = (w / num) | 0;
		      carry = w % num;
		    }

		    return this.strip();
		  };

		  BN.prototype.divn = function divn (num) {
		    return this.clone().idivn(num);
		  };

		  BN.prototype.egcd = function egcd (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var x = this;
		    var y = p.clone();

		    if (x.negative !== 0) {
		      x = x.umod(p);
		    } else {
		      x = x.clone();
		    }

		    // A * x + B * y = x
		    var A = new BN(1);
		    var B = new BN(0);

		    // C * x + D * y = y
		    var C = new BN(0);
		    var D = new BN(1);

		    var g = 0;

		    while (x.isEven() && y.isEven()) {
		      x.iushrn(1);
		      y.iushrn(1);
		      ++g;
		    }

		    var yp = y.clone();
		    var xp = x.clone();

		    while (!x.isZero()) {
		      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        x.iushrn(i);
		        while (i-- > 0) {
		          if (A.isOdd() || B.isOdd()) {
		            A.iadd(yp);
		            B.isub(xp);
		          }

		          A.iushrn(1);
		          B.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        y.iushrn(j);
		        while (j-- > 0) {
		          if (C.isOdd() || D.isOdd()) {
		            C.iadd(yp);
		            D.isub(xp);
		          }

		          C.iushrn(1);
		          D.iushrn(1);
		        }
		      }

		      if (x.cmp(y) >= 0) {
		        x.isub(y);
		        A.isub(C);
		        B.isub(D);
		      } else {
		        y.isub(x);
		        C.isub(A);
		        D.isub(B);
		      }
		    }

		    return {
		      a: C,
		      b: D,
		      gcd: y.iushln(g)
		    };
		  };

		  // This is reduced incarnation of the binary EEA
		  // above, designated to invert members of the
		  // _prime_ fields F(p) at a maximal speed
		  BN.prototype._invmp = function _invmp (p) {
		    assert(p.negative === 0);
		    assert(!p.isZero());

		    var a = this;
		    var b = p.clone();

		    if (a.negative !== 0) {
		      a = a.umod(p);
		    } else {
		      a = a.clone();
		    }

		    var x1 = new BN(1);
		    var x2 = new BN(0);

		    var delta = b.clone();

		    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		      if (i > 0) {
		        a.iushrn(i);
		        while (i-- > 0) {
		          if (x1.isOdd()) {
		            x1.iadd(delta);
		          }

		          x1.iushrn(1);
		        }
		      }

		      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		      if (j > 0) {
		        b.iushrn(j);
		        while (j-- > 0) {
		          if (x2.isOdd()) {
		            x2.iadd(delta);
		          }

		          x2.iushrn(1);
		        }
		      }

		      if (a.cmp(b) >= 0) {
		        a.isub(b);
		        x1.isub(x2);
		      } else {
		        b.isub(a);
		        x2.isub(x1);
		      }
		    }

		    var res;
		    if (a.cmpn(1) === 0) {
		      res = x1;
		    } else {
		      res = x2;
		    }

		    if (res.cmpn(0) < 0) {
		      res.iadd(p);
		    }

		    return res;
		  };

		  BN.prototype.gcd = function gcd (num) {
		    if (this.isZero()) return num.abs();
		    if (num.isZero()) return this.abs();

		    var a = this.clone();
		    var b = num.clone();
		    a.negative = 0;
		    b.negative = 0;

		    // Remove common factor of two
		    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		      a.iushrn(1);
		      b.iushrn(1);
		    }

		    do {
		      while (a.isEven()) {
		        a.iushrn(1);
		      }
		      while (b.isEven()) {
		        b.iushrn(1);
		      }

		      var r = a.cmp(b);
		      if (r < 0) {
		        // Swap `a` and `b` to make `a` always bigger than `b`
		        var t = a;
		        a = b;
		        b = t;
		      } else if (r === 0 || b.cmpn(1) === 0) {
		        break;
		      }

		      a.isub(b);
		    } while (true);

		    return b.iushln(shift);
		  };

		  // Invert number in the field F(num)
		  BN.prototype.invm = function invm (num) {
		    return this.egcd(num).a.umod(num);
		  };

		  BN.prototype.isEven = function isEven () {
		    return (this.words[0] & 1) === 0;
		  };

		  BN.prototype.isOdd = function isOdd () {
		    return (this.words[0] & 1) === 1;
		  };

		  // And first word and num
		  BN.prototype.andln = function andln (num) {
		    return this.words[0] & num;
		  };

		  // Increment at the bit position in-line
		  BN.prototype.bincn = function bincn (bit) {
		    assert(typeof bit === 'number');
		    var r = bit % 26;
		    var s = (bit - r) / 26;
		    var q = 1 << r;

		    // Fast case: bit is much higher than all existing words
		    if (this.length <= s) {
		      this._expand(s + 1);
		      this.words[s] |= q;
		      return this;
		    }

		    // Add bit and propagate, if needed
		    var carry = q;
		    for (var i = s; carry !== 0 && i < this.length; i++) {
		      var w = this.words[i] | 0;
		      w += carry;
		      carry = w >>> 26;
		      w &= 0x3ffffff;
		      this.words[i] = w;
		    }
		    if (carry !== 0) {
		      this.words[i] = carry;
		      this.length++;
		    }
		    return this;
		  };

		  BN.prototype.isZero = function isZero () {
		    return this.length === 1 && this.words[0] === 0;
		  };

		  BN.prototype.cmpn = function cmpn (num) {
		    var negative = num < 0;

		    if (this.negative !== 0 && !negative) return -1;
		    if (this.negative === 0 && negative) return 1;

		    this.strip();

		    var res;
		    if (this.length > 1) {
		      res = 1;
		    } else {
		      if (negative) {
		        num = -num;
		      }

		      assert(num <= 0x3ffffff, 'Number is too big');

		      var w = this.words[0] | 0;
		      res = w === num ? 0 : w < num ? -1 : 1;
		    }
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Compare two numbers and return:
		  // 1 - if `this` > `num`
		  // 0 - if `this` == `num`
		  // -1 - if `this` < `num`
		  BN.prototype.cmp = function cmp (num) {
		    if (this.negative !== 0 && num.negative === 0) return -1;
		    if (this.negative === 0 && num.negative !== 0) return 1;

		    var res = this.ucmp(num);
		    if (this.negative !== 0) return -res | 0;
		    return res;
		  };

		  // Unsigned comparison
		  BN.prototype.ucmp = function ucmp (num) {
		    // At this point both numbers have the same sign
		    if (this.length > num.length) return 1;
		    if (this.length < num.length) return -1;

		    var res = 0;
		    for (var i = this.length - 1; i >= 0; i--) {
		      var a = this.words[i] | 0;
		      var b = num.words[i] | 0;

		      if (a === b) continue;
		      if (a < b) {
		        res = -1;
		      } else if (a > b) {
		        res = 1;
		      }
		      break;
		    }
		    return res;
		  };

		  BN.prototype.gtn = function gtn (num) {
		    return this.cmpn(num) === 1;
		  };

		  BN.prototype.gt = function gt (num) {
		    return this.cmp(num) === 1;
		  };

		  BN.prototype.gten = function gten (num) {
		    return this.cmpn(num) >= 0;
		  };

		  BN.prototype.gte = function gte (num) {
		    return this.cmp(num) >= 0;
		  };

		  BN.prototype.ltn = function ltn (num) {
		    return this.cmpn(num) === -1;
		  };

		  BN.prototype.lt = function lt (num) {
		    return this.cmp(num) === -1;
		  };

		  BN.prototype.lten = function lten (num) {
		    return this.cmpn(num) <= 0;
		  };

		  BN.prototype.lte = function lte (num) {
		    return this.cmp(num) <= 0;
		  };

		  BN.prototype.eqn = function eqn (num) {
		    return this.cmpn(num) === 0;
		  };

		  BN.prototype.eq = function eq (num) {
		    return this.cmp(num) === 0;
		  };

		  //
		  // A reduce context, could be using montgomery or something better, depending
		  // on the `m` itself.
		  //
		  BN.red = function red (num) {
		    return new Red(num);
		  };

		  BN.prototype.toRed = function toRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    assert(this.negative === 0, 'red works only with positives');
		    return ctx.convertTo(this)._forceRed(ctx);
		  };

		  BN.prototype.fromRed = function fromRed () {
		    assert(this.red, 'fromRed works only with numbers in reduction context');
		    return this.red.convertFrom(this);
		  };

		  BN.prototype._forceRed = function _forceRed (ctx) {
		    this.red = ctx;
		    return this;
		  };

		  BN.prototype.forceRed = function forceRed (ctx) {
		    assert(!this.red, 'Already a number in reduction context');
		    return this._forceRed(ctx);
		  };

		  BN.prototype.redAdd = function redAdd (num) {
		    assert(this.red, 'redAdd works only with red numbers');
		    return this.red.add(this, num);
		  };

		  BN.prototype.redIAdd = function redIAdd (num) {
		    assert(this.red, 'redIAdd works only with red numbers');
		    return this.red.iadd(this, num);
		  };

		  BN.prototype.redSub = function redSub (num) {
		    assert(this.red, 'redSub works only with red numbers');
		    return this.red.sub(this, num);
		  };

		  BN.prototype.redISub = function redISub (num) {
		    assert(this.red, 'redISub works only with red numbers');
		    return this.red.isub(this, num);
		  };

		  BN.prototype.redShl = function redShl (num) {
		    assert(this.red, 'redShl works only with red numbers');
		    return this.red.shl(this, num);
		  };

		  BN.prototype.redMul = function redMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.mul(this, num);
		  };

		  BN.prototype.redIMul = function redIMul (num) {
		    assert(this.red, 'redMul works only with red numbers');
		    this.red._verify2(this, num);
		    return this.red.imul(this, num);
		  };

		  BN.prototype.redSqr = function redSqr () {
		    assert(this.red, 'redSqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqr(this);
		  };

		  BN.prototype.redISqr = function redISqr () {
		    assert(this.red, 'redISqr works only with red numbers');
		    this.red._verify1(this);
		    return this.red.isqr(this);
		  };

		  // Square root over p
		  BN.prototype.redSqrt = function redSqrt () {
		    assert(this.red, 'redSqrt works only with red numbers');
		    this.red._verify1(this);
		    return this.red.sqrt(this);
		  };

		  BN.prototype.redInvm = function redInvm () {
		    assert(this.red, 'redInvm works only with red numbers');
		    this.red._verify1(this);
		    return this.red.invm(this);
		  };

		  // Return negative clone of `this` % `red modulo`
		  BN.prototype.redNeg = function redNeg () {
		    assert(this.red, 'redNeg works only with red numbers');
		    this.red._verify1(this);
		    return this.red.neg(this);
		  };

		  BN.prototype.redPow = function redPow (num) {
		    assert(this.red && !num.red, 'redPow(normalNum)');
		    this.red._verify1(this);
		    return this.red.pow(this, num);
		  };

		  // Prime numbers with efficient reduction
		  var primes = {
		    k256: null,
		    p224: null,
		    p192: null,
		    p25519: null
		  };

		  // Pseudo-Mersenne prime
		  function MPrime (name, p) {
		    // P = 2 ^ N - K
		    this.name = name;
		    this.p = new BN(p, 16);
		    this.n = this.p.bitLength();
		    this.k = new BN(1).iushln(this.n).isub(this.p);

		    this.tmp = this._tmp();
		  }

		  MPrime.prototype._tmp = function _tmp () {
		    var tmp = new BN(null);
		    tmp.words = new Array(Math.ceil(this.n / 13));
		    return tmp;
		  };

		  MPrime.prototype.ireduce = function ireduce (num) {
		    // Assumes that `num` is less than `P^2`
		    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		    var r = num;
		    var rlen;

		    do {
		      this.split(r, this.tmp);
		      r = this.imulK(r);
		      r = r.iadd(this.tmp);
		      rlen = r.bitLength();
		    } while (rlen > this.n);

		    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		    if (cmp === 0) {
		      r.words[0] = 0;
		      r.length = 1;
		    } else if (cmp > 0) {
		      r.isub(this.p);
		    } else {
		      if (r.strip !== undefined) {
		        // r is BN v4 instance
		        r.strip();
		      } else {
		        // r is BN v5 instance
		        r._strip();
		      }
		    }

		    return r;
		  };

		  MPrime.prototype.split = function split (input, out) {
		    input.iushrn(this.n, 0, out);
		  };

		  MPrime.prototype.imulK = function imulK (num) {
		    return num.imul(this.k);
		  };

		  function K256 () {
		    MPrime.call(
		      this,
		      'k256',
		      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  }
		  inherits(K256, MPrime);

		  K256.prototype.split = function split (input, output) {
		    // 256 = 9 * 26 + 22
		    var mask = 0x3fffff;

		    var outLen = Math.min(input.length, 9);
		    for (var i = 0; i < outLen; i++) {
		      output.words[i] = input.words[i];
		    }
		    output.length = outLen;

		    if (input.length <= 9) {
		      input.words[0] = 0;
		      input.length = 1;
		      return;
		    }

		    // Shift by 9 limbs
		    var prev = input.words[9];
		    output.words[output.length++] = prev & mask;

		    for (i = 10; i < input.length; i++) {
		      var next = input.words[i] | 0;
		      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		      prev = next;
		    }
		    prev >>>= 22;
		    input.words[i - 10] = prev;
		    if (prev === 0 && input.length > 10) {
		      input.length -= 10;
		    } else {
		      input.length -= 9;
		    }
		  };

		  K256.prototype.imulK = function imulK (num) {
		    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		    num.words[num.length] = 0;
		    num.words[num.length + 1] = 0;
		    num.length += 2;

		    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		    var lo = 0;
		    for (var i = 0; i < num.length; i++) {
		      var w = num.words[i] | 0;
		      lo += w * 0x3d1;
		      num.words[i] = lo & 0x3ffffff;
		      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		    }

		    // Fast length reduction
		    if (num.words[num.length - 1] === 0) {
		      num.length--;
		      if (num.words[num.length - 1] === 0) {
		        num.length--;
		      }
		    }
		    return num;
		  };

		  function P224 () {
		    MPrime.call(
		      this,
		      'p224',
		      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  }
		  inherits(P224, MPrime);

		  function P192 () {
		    MPrime.call(
		      this,
		      'p192',
		      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  }
		  inherits(P192, MPrime);

		  function P25519 () {
		    // 2 ^ 255 - 19
		    MPrime.call(
		      this,
		      '25519',
		      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  }
		  inherits(P25519, MPrime);

		  P25519.prototype.imulK = function imulK (num) {
		    // K = 0x13
		    var carry = 0;
		    for (var i = 0; i < num.length; i++) {
		      var hi = (num.words[i] | 0) * 0x13 + carry;
		      var lo = hi & 0x3ffffff;
		      hi >>>= 26;

		      num.words[i] = lo;
		      carry = hi;
		    }
		    if (carry !== 0) {
		      num.words[num.length++] = carry;
		    }
		    return num;
		  };

		  // Exported mostly for testing purposes, use plain name instead
		  BN._prime = function prime (name) {
		    // Cached version of prime
		    if (primes[name]) return primes[name];

		    var prime;
		    if (name === 'k256') {
		      prime = new K256();
		    } else if (name === 'p224') {
		      prime = new P224();
		    } else if (name === 'p192') {
		      prime = new P192();
		    } else if (name === 'p25519') {
		      prime = new P25519();
		    } else {
		      throw new Error('Unknown prime ' + name);
		    }
		    primes[name] = prime;

		    return prime;
		  };

		  //
		  // Base reduction engine
		  //
		  function Red (m) {
		    if (typeof m === 'string') {
		      var prime = BN._prime(m);
		      this.m = prime.p;
		      this.prime = prime;
		    } else {
		      assert(m.gtn(1), 'modulus must be greater than 1');
		      this.m = m;
		      this.prime = null;
		    }
		  }

		  Red.prototype._verify1 = function _verify1 (a) {
		    assert(a.negative === 0, 'red works only with positives');
		    assert(a.red, 'red works only with red numbers');
		  };

		  Red.prototype._verify2 = function _verify2 (a, b) {
		    assert((a.negative | b.negative) === 0, 'red works only with positives');
		    assert(a.red && a.red === b.red,
		      'red works only with red numbers');
		  };

		  Red.prototype.imod = function imod (a) {
		    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		    return a.umod(this.m)._forceRed(this);
		  };

		  Red.prototype.neg = function neg (a) {
		    if (a.isZero()) {
		      return a.clone();
		    }

		    return this.m.sub(a)._forceRed(this);
		  };

		  Red.prototype.add = function add (a, b) {
		    this._verify2(a, b);

		    var res = a.add(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.iadd = function iadd (a, b) {
		    this._verify2(a, b);

		    var res = a.iadd(b);
		    if (res.cmp(this.m) >= 0) {
		      res.isub(this.m);
		    }
		    return res;
		  };

		  Red.prototype.sub = function sub (a, b) {
		    this._verify2(a, b);

		    var res = a.sub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res._forceRed(this);
		  };

		  Red.prototype.isub = function isub (a, b) {
		    this._verify2(a, b);

		    var res = a.isub(b);
		    if (res.cmpn(0) < 0) {
		      res.iadd(this.m);
		    }
		    return res;
		  };

		  Red.prototype.shl = function shl (a, num) {
		    this._verify1(a);
		    return this.imod(a.ushln(num));
		  };

		  Red.prototype.imul = function imul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.imul(b));
		  };

		  Red.prototype.mul = function mul (a, b) {
		    this._verify2(a, b);
		    return this.imod(a.mul(b));
		  };

		  Red.prototype.isqr = function isqr (a) {
		    return this.imul(a, a.clone());
		  };

		  Red.prototype.sqr = function sqr (a) {
		    return this.mul(a, a);
		  };

		  Red.prototype.sqrt = function sqrt (a) {
		    if (a.isZero()) return a.clone();

		    var mod3 = this.m.andln(3);
		    assert(mod3 % 2 === 1);

		    // Fast case
		    if (mod3 === 3) {
		      var pow = this.m.add(new BN(1)).iushrn(2);
		      return this.pow(a, pow);
		    }

		    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		    //
		    // Find Q and S, that Q * 2 ^ S = (P - 1)
		    var q = this.m.subn(1);
		    var s = 0;
		    while (!q.isZero() && q.andln(1) === 0) {
		      s++;
		      q.iushrn(1);
		    }
		    assert(!q.isZero());

		    var one = new BN(1).toRed(this);
		    var nOne = one.redNeg();

		    // Find quadratic non-residue
		    // NOTE: Max is such because of generalized Riemann hypothesis.
		    var lpow = this.m.subn(1).iushrn(1);
		    var z = this.m.bitLength();
		    z = new BN(2 * z * z).toRed(this);

		    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		      z.redIAdd(nOne);
		    }

		    var c = this.pow(z, q);
		    var r = this.pow(a, q.addn(1).iushrn(1));
		    var t = this.pow(a, q);
		    var m = s;
		    while (t.cmp(one) !== 0) {
		      var tmp = t;
		      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		        tmp = tmp.redSqr();
		      }
		      assert(i < m);
		      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		      r = r.redMul(b);
		      c = b.redSqr();
		      t = t.redMul(c);
		      m = i;
		    }

		    return r;
		  };

		  Red.prototype.invm = function invm (a) {
		    var inv = a._invmp(this.m);
		    if (inv.negative !== 0) {
		      inv.negative = 0;
		      return this.imod(inv).redNeg();
		    } else {
		      return this.imod(inv);
		    }
		  };

		  Red.prototype.pow = function pow (a, num) {
		    if (num.isZero()) return new BN(1).toRed(this);
		    if (num.cmpn(1) === 0) return a.clone();

		    var windowSize = 4;
		    var wnd = new Array(1 << windowSize);
		    wnd[0] = new BN(1).toRed(this);
		    wnd[1] = a;
		    for (var i = 2; i < wnd.length; i++) {
		      wnd[i] = this.mul(wnd[i - 1], a);
		    }

		    var res = wnd[0];
		    var current = 0;
		    var currentLen = 0;
		    var start = num.bitLength() % 26;
		    if (start === 0) {
		      start = 26;
		    }

		    for (i = num.length - 1; i >= 0; i--) {
		      var word = num.words[i];
		      for (var j = start - 1; j >= 0; j--) {
		        var bit = (word >> j) & 1;
		        if (res !== wnd[0]) {
		          res = this.sqr(res);
		        }

		        if (bit === 0 && current === 0) {
		          currentLen = 0;
		          continue;
		        }

		        current <<= 1;
		        current |= bit;
		        currentLen++;
		        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		        res = this.mul(res, wnd[current]);
		        currentLen = 0;
		        current = 0;
		      }
		      start = 26;
		    }

		    return res;
		  };

		  Red.prototype.convertTo = function convertTo (num) {
		    var r = num.umod(this.m);

		    return r === num ? r.clone() : r;
		  };

		  Red.prototype.convertFrom = function convertFrom (num) {
		    var res = num.clone();
		    res.red = null;
		    return res;
		  };

		  //
		  // Montgomery method engine
		  //

		  BN.mont = function mont (num) {
		    return new Mont(num);
		  };

		  function Mont (m) {
		    Red.call(this, m);

		    this.shift = this.m.bitLength();
		    if (this.shift % 26 !== 0) {
		      this.shift += 26 - (this.shift % 26);
		    }

		    this.r = new BN(1).iushln(this.shift);
		    this.r2 = this.imod(this.r.sqr());
		    this.rinv = this.r._invmp(this.m);

		    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		    this.minv = this.minv.umod(this.r);
		    this.minv = this.r.sub(this.minv);
		  }
		  inherits(Mont, Red);

		  Mont.prototype.convertTo = function convertTo (num) {
		    return this.imod(num.ushln(this.shift));
		  };

		  Mont.prototype.convertFrom = function convertFrom (num) {
		    var r = this.imod(num.mul(this.rinv));
		    r.red = null;
		    return r;
		  };

		  Mont.prototype.imul = function imul (a, b) {
		    if (a.isZero() || b.isZero()) {
		      a.words[0] = 0;
		      a.length = 1;
		      return a;
		    }

		    var t = a.imul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;

		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.mul = function mul (a, b) {
		    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		    var t = a.mul(b);
		    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		    var u = t.isub(c).iushrn(this.shift);
		    var res = u;
		    if (u.cmp(this.m) >= 0) {
		      res = u.isub(this.m);
		    } else if (u.cmpn(0) < 0) {
		      res = u.iadd(this.m);
		    }

		    return res._forceRed(this);
		  };

		  Mont.prototype.invm = function invm (a) {
		    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		    var res = this.imod(a._invmp(this.m).mul(this.r2));
		    return res._forceRed(this);
		  };
		})(module, commonjsGlobal); 
	} (bn));

	var bnExports = bn.exports;

	var minimalisticAssert = assert$f;

	function assert$f(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$f.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils$l = {};

	(function (exports) {

		var utils = exports;

		function toArray(msg, enc) {
		  if (Array.isArray(msg))
		    return msg.slice();
		  if (!msg)
		    return [];
		  var res = [];
		  if (typeof msg !== 'string') {
		    for (var i = 0; i < msg.length; i++)
		      res[i] = msg[i] | 0;
		    return res;
		  }
		  if (enc === 'hex') {
		    msg = msg.replace(/[^a-z0-9]+/ig, '');
		    if (msg.length % 2 !== 0)
		      msg = '0' + msg;
		    for (var i = 0; i < msg.length; i += 2)
		      res.push(parseInt(msg[i] + msg[i + 1], 16));
		  } else {
		    for (var i = 0; i < msg.length; i++) {
		      var c = msg.charCodeAt(i);
		      var hi = c >> 8;
		      var lo = c & 0xff;
		      if (hi)
		        res.push(hi, lo);
		      else
		        res.push(lo);
		    }
		  }
		  return res;
		}
		utils.toArray = toArray;

		function zero2(word) {
		  if (word.length === 1)
		    return '0' + word;
		  else
		    return word;
		}
		utils.zero2 = zero2;

		function toHex(msg) {
		  var res = '';
		  for (var i = 0; i < msg.length; i++)
		    res += zero2(msg[i].toString(16));
		  return res;
		}
		utils.toHex = toHex;

		utils.encode = function encode(arr, enc) {
		  if (enc === 'hex')
		    return toHex(arr);
		  else
		    return arr;
		}; 
	} (utils$l));

	(function (exports) {

		var utils = exports;
		var BN = bnExports;
		var minAssert = minimalisticAssert;
		var minUtils = utils$l;

		utils.assert = minAssert;
		utils.toArray = minUtils.toArray;
		utils.zero2 = minUtils.zero2;
		utils.toHex = minUtils.toHex;
		utils.encode = minUtils.encode;

		// Represent num in a w-NAF form
		function getNAF(num, w, bits) {
		  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
		  naf.fill(0);

		  var ws = 1 << (w + 1);
		  var k = num.clone();

		  for (var i = 0; i < naf.length; i++) {
		    var z;
		    var mod = k.andln(ws - 1);
		    if (k.isOdd()) {
		      if (mod > (ws >> 1) - 1)
		        z = (ws >> 1) - mod;
		      else
		        z = mod;
		      k.isubn(z);
		    } else {
		      z = 0;
		    }

		    naf[i] = z;
		    k.iushrn(1);
		  }

		  return naf;
		}
		utils.getNAF = getNAF;

		// Represent k1, k2 in a Joint Sparse Form
		function getJSF(k1, k2) {
		  var jsf = [
		    [],
		    [],
		  ];

		  k1 = k1.clone();
		  k2 = k2.clone();
		  var d1 = 0;
		  var d2 = 0;
		  var m8;
		  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
		    // First phase
		    var m14 = (k1.andln(3) + d1) & 3;
		    var m24 = (k2.andln(3) + d2) & 3;
		    if (m14 === 3)
		      m14 = -1;
		    if (m24 === 3)
		      m24 = -1;
		    var u1;
		    if ((m14 & 1) === 0) {
		      u1 = 0;
		    } else {
		      m8 = (k1.andln(7) + d1) & 7;
		      if ((m8 === 3 || m8 === 5) && m24 === 2)
		        u1 = -m14;
		      else
		        u1 = m14;
		    }
		    jsf[0].push(u1);

		    var u2;
		    if ((m24 & 1) === 0) {
		      u2 = 0;
		    } else {
		      m8 = (k2.andln(7) + d2) & 7;
		      if ((m8 === 3 || m8 === 5) && m14 === 2)
		        u2 = -m24;
		      else
		        u2 = m24;
		    }
		    jsf[1].push(u2);

		    // Second phase
		    if (2 * d1 === u1 + 1)
		      d1 = 1 - d1;
		    if (2 * d2 === u2 + 1)
		      d2 = 1 - d2;
		    k1.iushrn(1);
		    k2.iushrn(1);
		  }

		  return jsf;
		}
		utils.getJSF = getJSF;

		function cachedProperty(obj, name, computer) {
		  var key = '_' + name;
		  obj.prototype[name] = function cachedProperty() {
		    return this[key] !== undefined ? this[key] :
		      this[key] = computer.call(this);
		  };
		}
		utils.cachedProperty = cachedProperty;

		function parseBytes(bytes) {
		  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
		    bytes;
		}
		utils.parseBytes = parseBytes;

		function intFromLE(bytes) {
		  return new BN(bytes, 'hex', 'le');
		}
		utils.intFromLE = intFromLE; 
	} (utils$m));

	var brorand = {exports: {}};

	var _polyfillNode_crypto = {};

	var _polyfillNode_crypto$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': _polyfillNode_crypto
	});

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_crypto$1);

	var r$1;

	brorand.exports = function rand(len) {
	  if (!r$1)
	    r$1 = new Rand(null);

	  return r$1.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	brorand.exports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$1 = require$$0$2;
	    if (typeof crypto$1.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$1.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}

	var brorandExports = brorand.exports;

	var curve$1 = {};

	var BN$7 = bnExports;
	var utils$k = utils$m;
	var getNAF = utils$k.getNAF;
	var getJSF = utils$k.getJSF;
	var assert$e = utils$k.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN$7(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$7(0).toRed(this.red);
	  this.one = new BN$7(1).toRed(this.red);
	  this.two = new BN$7(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$7(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$e(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$e(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils$k.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$e(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$e(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils$k.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits$f;
	if (typeof Object.create === 'function'){
	  inherits$f = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$f = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$g = inherits$f;

	var _polyfillNode_inherits = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': inherits$g
	});

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_inherits);

	var utils$j = utils$m;
	var BN$6 = bnExports;
	var inherits$e = require$$0$1;
	var Base$2 = base;

	var assert$d = utils$j.assert;

	function ShortCurve(conf) {
	  Base$2.call(this, 'short', conf);

	  this.a = new BN$6(conf.a, 16).toRed(this.red);
	  this.b = new BN$6(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$e(ShortCurve, Base$2);
	var short = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$6(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$6(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$6(vec.a, 16),
	        b: new BN$6(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$6.mont(num);
	  var tinv = new BN$6(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$6(1);
	  var y1 = new BN$6(0);
	  var x2 = new BN$6(0);
	  var y2 = new BN$6(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$6(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$2(curve, x, y, isRed) {
	  Base$2.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$6(x, 16);
	    this.y = new BN$6(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$e(Point$2, Base$2.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point$2(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$2.fromJSON(this, obj, red);
	};

	Point$2.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$2.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$2.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$2.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$2.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$2.prototype.mul = function mul(k) {
	  k = new BN$6(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$2.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$2.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$2.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base$2.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$6(0);
	  } else {
	    this.x = new BN$6(x, 16);
	    this.y = new BN$6(y, 16);
	    this.z = new BN$6(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$e(JPoint, Base$2.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN$6(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var BN$5 = bnExports;
	var inherits$d = require$$0$1;
	var Base$1 = base;

	var utils$i = utils$m;

	function MontCurve(conf) {
	  Base$1.call(this, 'mont', conf);

	  this.a = new BN$5(conf.a, 16).toRed(this.red);
	  this.b = new BN$5(conf.b, 16).toRed(this.red);
	  this.i4 = new BN$5(4).toRed(this.red).redInvm();
	  this.two = new BN$5(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$d(MontCurve, Base$1);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  Base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN$5(x, 16);
	    this.z = new BN$5(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$d(Point$1, Base$1.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils$i.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var utils$h = utils$m;
	var BN$4 = bnExports;
	var inherits$c = require$$0$1;
	var Base = base;

	var assert$c = utils$h.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new BN$4(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN$4(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN$4(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$c(EdwardsCurve, Base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$4(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN$4(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN$4(x, 16);
	    this.y = new BN$4(y, 16);
	    this.z = z ? new BN$4(z, 16) : this.curve.one;
	    this.t = t && new BN$4(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$c(Point, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;

	(function (exports) {

		var curve = exports;

		curve.base = base;
		curve.short = short;
		curve.mont = mont;
		curve.edwards = edwards; 
	} (curve$1));

	var curves$2 = {};

	var hash$4 = {};

	var utils$g = {};

	var assert$b = minimalisticAssert;
	var inherits$b = require$$0$1;

	utils$g.inherits = inherits$b;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils$g.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils$g.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils$g.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils$g.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils$g.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils$g.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert$b(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils$g.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils$g.split32 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils$g.rotr32 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils$g.rotl32 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	utils$g.sum32 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils$g.sum32_3 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils$g.sum32_4 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils$g.sum32_5 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	utils$g.sum64 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	utils$g.sum64_hi = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	utils$g.sum64_lo = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	utils$g.sum64_4_hi = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	utils$g.sum64_4_lo = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	utils$g.sum64_5_hi = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	utils$g.sum64_5_lo = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	utils$g.rotr64_hi = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$g.rotr64_lo = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	utils$g.shr64_hi = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$g.shr64_lo = shr64_lo$1;

	var common$5 = {};

	var utils$f = utils$g;
	var assert$a = minimalisticAssert;

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	common$5.BlockHash = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$f.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$f.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert$a(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var sha$2 = {};

	var common$4 = {};

	var utils$e = utils$g;
	var rotr32 = utils$e.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	common$4.ft_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	common$4.ch32 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	common$4.maj32 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	common$4.p32 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	common$4.s0_256 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	common$4.s1_256 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	common$4.g0_256 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	common$4.g1_256 = g1_256$1;

	var utils$d = utils$g;
	var common$3 = common$5;
	var shaCommon$1 = common$4;

	var rotl32$1 = utils$d.rotl32;
	var sum32$2 = utils$d.sum32;
	var sum32_5$1 = utils$d.sum32_5;
	var ft_1 = shaCommon$1.ft_1;
	var BlockHash$3 = common$3.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$d.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$d.toHex32(this.h, 'big');
	  else
	    return utils$d.split32(this.h, 'big');
	};

	var utils$c = utils$g;
	var common$2 = common$5;
	var shaCommon = common$4;
	var assert$9 = minimalisticAssert;

	var sum32$1 = utils$c.sum32;
	var sum32_4$1 = utils$c.sum32_4;
	var sum32_5 = utils$c.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash$2 = common$2.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$1() {
	  if (!(this instanceof SHA256$1))
	    return new SHA256$1();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$c.inherits(SHA256$1, BlockHash$2);
	var _256 = SHA256$1;

	SHA256$1.blockSize = 512;
	SHA256$1.outSize = 256;
	SHA256$1.hmacStrength = 192;
	SHA256$1.padLength = 64;

	SHA256$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert$9(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$c.toHex32(this.h, 'big');
	  else
	    return utils$c.split32(this.h, 'big');
	};

	var utils$b = utils$g;
	var SHA256 = _256;

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$b.inherits(SHA224, SHA256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$b.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$b.split32(this.h.slice(0, 7), 'big');
	};

	var utils$a = utils$g;
	var common$1 = common$5;
	var assert$8 = minimalisticAssert;

	var rotr64_hi = utils$a.rotr64_hi;
	var rotr64_lo = utils$a.rotr64_lo;
	var shr64_hi = utils$a.shr64_hi;
	var shr64_lo = utils$a.shr64_lo;
	var sum64 = utils$a.sum64;
	var sum64_hi = utils$a.sum64_hi;
	var sum64_lo = utils$a.sum64_lo;
	var sum64_4_hi = utils$a.sum64_4_hi;
	var sum64_4_lo = utils$a.sum64_4_lo;
	var sum64_5_hi = utils$a.sum64_5_hi;
	var sum64_5_lo = utils$a.sum64_5_lo;

	var BlockHash$1 = common$1.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$2() {
	  if (!(this instanceof SHA512$2))
	    return new SHA512$2();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$a.inherits(SHA512$2, BlockHash$1);
	var _512 = SHA512$2;

	SHA512$2.blockSize = 1024;
	SHA512$2.outSize = 512;
	SHA512$2.hmacStrength = 192;
	SHA512$2.padLength = 128;

	SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$2.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert$8(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$a.toHex32(this.h, 'big');
	  else
	    return utils$a.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	var utils$9 = utils$g;

	var SHA512$1 = _512;

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512$1.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$9.inherits(SHA384, SHA512$1);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$9.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$9.split32(this.h.slice(0, 12), 'big');
	};

	sha$2.sha1 = _1;
	sha$2.sha224 = _224;
	sha$2.sha256 = _256;
	sha$2.sha384 = _384;
	sha$2.sha512 = _512;

	var ripemd = {};

	var utils$8 = utils$g;
	var common = common$5;

	var rotl32 = utils$8.rotl32;
	var sum32 = utils$8.sum32;
	var sum32_3 = utils$8.sum32_3;
	var sum32_4 = utils$8.sum32_4;
	var BlockHash = common.BlockHash;

	function RIPEMD160$2() {
	  if (!(this instanceof RIPEMD160$2))
	    return new RIPEMD160$2();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$8.inherits(RIPEMD160$2, BlockHash);
	ripemd.ripemd160 = RIPEMD160$2;

	RIPEMD160$2.blockSize = 512;
	RIPEMD160$2.outSize = 160;
	RIPEMD160$2.hmacStrength = 192;
	RIPEMD160$2.padLength = 64;

	RIPEMD160$2.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K$4(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160$2.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$8.toHex32(this.h, 'little');
	  else
	    return utils$8.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K$4(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var utils$7 = utils$g;
	var assert$7 = minimalisticAssert;

	function Hmac$1(hash, key, enc) {
	  if (!(this instanceof Hmac$1))
	    return new Hmac$1(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$7.toArray(key, enc));
	}
	var hmac$1 = Hmac$1;

	Hmac$1.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert$7(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac$1.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac$1.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	(function (exports) {
		var hash = exports;

		hash.utils = utils$g;
		hash.common = common$5;
		hash.sha = sha$2;
		hash.ripemd = ripemd;
		hash.hmac = hmac$1;

		// Proxy hash functions to the main object
		hash.sha1 = hash.sha.sha1;
		hash.sha256 = hash.sha.sha256;
		hash.sha224 = hash.sha.sha224;
		hash.sha384 = hash.sha.sha384;
		hash.sha512 = hash.sha.sha512;
		hash.ripemd160 = hash.ripemd.ripemd160; 
	} (hash$4));

	var hashjs = /*@__PURE__*/getDefaultExportFromCjs(hash$4);

	var secp256k1$2;
	var hasRequiredSecp256k1;

	function requireSecp256k1 () {
		if (hasRequiredSecp256k1) return secp256k1$2;
		hasRequiredSecp256k1 = 1;
		secp256k1$2 = {
		  doubles: {
		    step: 4,
		    points: [
		      [
		        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
		        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
		      ],
		      [
		        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
		        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
		      ],
		      [
		        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
		        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
		      ],
		      [
		        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
		        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
		      ],
		      [
		        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
		        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
		      ],
		      [
		        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
		        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
		      ],
		      [
		        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
		        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
		      ],
		      [
		        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
		        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
		      ],
		      [
		        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
		        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
		      ],
		      [
		        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
		        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
		      ],
		      [
		        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
		        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
		      ],
		      [
		        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
		        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
		      ],
		      [
		        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
		        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
		      ],
		      [
		        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
		        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
		      ],
		      [
		        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
		        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
		      ],
		      [
		        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
		        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
		      ],
		      [
		        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
		        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
		      ],
		      [
		        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
		        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
		      ],
		      [
		        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
		        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
		      ],
		      [
		        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
		        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
		      ],
		      [
		        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
		        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
		      ],
		      [
		        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
		        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
		      ],
		      [
		        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
		        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
		      ],
		      [
		        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
		        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
		      ],
		      [
		        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
		        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
		      ],
		      [
		        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
		        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
		      ],
		      [
		        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
		        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
		      ],
		      [
		        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
		        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
		      ],
		      [
		        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
		        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
		      ],
		      [
		        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
		        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
		      ],
		      [
		        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
		        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
		      ],
		      [
		        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
		        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
		      ],
		      [
		        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
		        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
		      ],
		      [
		        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
		        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
		      ],
		      [
		        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
		        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
		      ],
		      [
		        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
		        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
		      ],
		      [
		        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
		        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
		      ],
		      [
		        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
		        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
		      ],
		      [
		        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
		        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
		      ],
		      [
		        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
		        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
		      ],
		      [
		        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
		        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
		      ],
		      [
		        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
		        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
		      ],
		      [
		        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
		        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
		      ],
		      [
		        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
		        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
		      ],
		      [
		        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
		        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
		      ],
		      [
		        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
		        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
		      ],
		      [
		        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
		        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
		      ],
		      [
		        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
		        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
		      ],
		      [
		        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
		        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
		      ],
		      [
		        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
		        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
		      ],
		      [
		        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
		        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
		      ],
		      [
		        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
		        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
		      ],
		      [
		        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
		        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
		      ],
		      [
		        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
		        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
		      ],
		      [
		        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
		        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
		      ],
		      [
		        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
		        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
		      ],
		      [
		        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
		        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
		      ],
		      [
		        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
		        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
		      ],
		      [
		        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
		        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
		      ],
		      [
		        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
		        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
		      ],
		      [
		        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
		        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
		      ],
		      [
		        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
		        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
		      ],
		      [
		        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
		        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
		      ],
		      [
		        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
		        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
		      ],
		      [
		        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
		        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
		      ],
		    ],
		  },
		  naf: {
		    wnd: 7,
		    points: [
		      [
		        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
		        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
		      ],
		      [
		        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
		        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
		      ],
		      [
		        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
		        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
		      ],
		      [
		        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
		        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
		      ],
		      [
		        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
		        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
		      ],
		      [
		        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
		        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
		      ],
		      [
		        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
		        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
		      ],
		      [
		        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
		        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
		      ],
		      [
		        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
		        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
		      ],
		      [
		        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
		        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
		      ],
		      [
		        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
		        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
		      ],
		      [
		        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
		        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
		      ],
		      [
		        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
		        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
		      ],
		      [
		        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
		        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
		      ],
		      [
		        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
		        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
		      ],
		      [
		        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
		        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
		      ],
		      [
		        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
		        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
		      ],
		      [
		        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
		        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
		      ],
		      [
		        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
		        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
		      ],
		      [
		        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
		        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
		      ],
		      [
		        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
		        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
		      ],
		      [
		        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
		        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
		      ],
		      [
		        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
		        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
		      ],
		      [
		        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
		        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
		      ],
		      [
		        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
		        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
		      ],
		      [
		        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
		        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
		      ],
		      [
		        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
		        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
		      ],
		      [
		        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
		        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
		      ],
		      [
		        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
		        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
		      ],
		      [
		        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
		        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
		      ],
		      [
		        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
		        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
		      ],
		      [
		        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
		        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
		      ],
		      [
		        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
		        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
		      ],
		      [
		        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
		        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
		      ],
		      [
		        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
		        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
		      ],
		      [
		        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
		        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
		      ],
		      [
		        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
		        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
		      ],
		      [
		        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
		        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
		      ],
		      [
		        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
		        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
		      ],
		      [
		        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
		        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
		      ],
		      [
		        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
		        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
		      ],
		      [
		        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
		        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
		      ],
		      [
		        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
		        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
		      ],
		      [
		        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
		        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
		      ],
		      [
		        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
		        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
		      ],
		      [
		        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
		        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
		      ],
		      [
		        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
		        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
		      ],
		      [
		        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
		        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
		      ],
		      [
		        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
		        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
		      ],
		      [
		        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
		        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
		      ],
		      [
		        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
		        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
		      ],
		      [
		        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
		        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
		      ],
		      [
		        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
		        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
		      ],
		      [
		        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
		        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
		      ],
		      [
		        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
		        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
		      ],
		      [
		        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
		        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
		      ],
		      [
		        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
		        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
		      ],
		      [
		        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
		        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
		      ],
		      [
		        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
		        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
		      ],
		      [
		        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
		        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
		      ],
		      [
		        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
		        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
		      ],
		      [
		        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
		        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
		      ],
		      [
		        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
		        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
		      ],
		      [
		        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
		        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
		      ],
		      [
		        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
		        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
		      ],
		      [
		        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
		        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
		      ],
		      [
		        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
		        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
		      ],
		      [
		        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
		        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
		      ],
		      [
		        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
		        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
		      ],
		      [
		        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
		        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
		      ],
		      [
		        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
		        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
		      ],
		      [
		        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
		        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
		      ],
		      [
		        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
		        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
		      ],
		      [
		        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
		        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
		      ],
		      [
		        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
		        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
		      ],
		      [
		        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
		        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
		      ],
		      [
		        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
		        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
		      ],
		      [
		        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
		        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
		      ],
		      [
		        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
		        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
		      ],
		      [
		        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
		        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
		      ],
		      [
		        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
		        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
		      ],
		      [
		        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
		        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
		      ],
		      [
		        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
		        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
		      ],
		      [
		        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
		        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
		      ],
		      [
		        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
		        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
		      ],
		      [
		        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
		        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
		      ],
		      [
		        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
		        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
		      ],
		      [
		        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
		        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
		      ],
		      [
		        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
		        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
		      ],
		      [
		        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
		        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
		      ],
		      [
		        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
		        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
		      ],
		      [
		        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
		        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
		      ],
		      [
		        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
		        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
		      ],
		      [
		        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
		        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
		      ],
		      [
		        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
		        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
		      ],
		      [
		        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
		        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
		      ],
		      [
		        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
		        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
		      ],
		      [
		        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
		        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
		      ],
		      [
		        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
		        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
		      ],
		      [
		        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
		        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
		      ],
		      [
		        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
		        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
		      ],
		      [
		        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
		        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
		      ],
		      [
		        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
		        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
		      ],
		      [
		        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
		        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
		      ],
		      [
		        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
		        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
		      ],
		      [
		        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
		        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
		      ],
		      [
		        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
		        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
		      ],
		      [
		        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
		        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
		      ],
		      [
		        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
		        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
		      ],
		      [
		        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
		        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
		      ],
		      [
		        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
		        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
		      ],
		      [
		        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
		        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
		      ],
		      [
		        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
		        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
		      ],
		      [
		        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
		        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
		      ],
		      [
		        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
		        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
		      ],
		      [
		        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
		        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
		      ],
		      [
		        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
		        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
		      ],
		      [
		        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
		        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
		      ],
		      [
		        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
		        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
		      ],
		      [
		        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
		        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
		      ],
		      [
		        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
		        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
		      ],
		      [
		        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
		        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
		      ],
		      [
		        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
		        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
		      ],
		      [
		        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
		        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
		      ],
		      [
		        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
		        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
		      ],
		      [
		        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
		        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
		      ],
		      [
		        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
		        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
		      ],
		    ],
		  },
		};
		return secp256k1$2;
	}

	(function (exports) {

		var curves = exports;

		var hash = hash$4;
		var curve = curve$1;
		var utils = utils$m;

		var assert = utils.assert;

		function PresetCurve(options) {
		  if (options.type === 'short')
		    this.curve = new curve.short(options);
		  else if (options.type === 'edwards')
		    this.curve = new curve.edwards(options);
		  else
		    this.curve = new curve.mont(options);
		  this.g = this.curve.g;
		  this.n = this.curve.n;
		  this.hash = options.hash;

		  assert(this.g.validate(), 'Invalid curve');
		  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
		}
		curves.PresetCurve = PresetCurve;

		function defineCurve(name, options) {
		  Object.defineProperty(curves, name, {
		    configurable: true,
		    enumerable: true,
		    get: function() {
		      var curve = new PresetCurve(options);
		      Object.defineProperty(curves, name, {
		        configurable: true,
		        enumerable: true,
		        value: curve,
		      });
		      return curve;
		    },
		  });
		}

		defineCurve('p192', {
		  type: 'short',
		  prime: 'p192',
		  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
		  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
		  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
		    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
		  ],
		});

		defineCurve('p224', {
		  type: 'short',
		  prime: 'p224',
		  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
		  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
		  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
		  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
		    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
		  ],
		});

		defineCurve('p256', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
		  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
		  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
		  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
		    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
		  ],
		});

		defineCurve('p384', {
		  type: 'short',
		  prime: null,
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 ffffffff',
		  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'fffffffe ffffffff 00000000 00000000 fffffffc',
		  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
		     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
		  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
		     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
		  hash: hash.sha384,
		  gRed: false,
		  g: [
		    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
		    '5502f25d bf55296c 3a545e38 72760ab7',
		    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
		    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
		  ],
		});

		defineCurve('p521', {
		  type: 'short',
		  prime: null,
		  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff',
		  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff ffffffff ffffffff fffffffc',
		  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
		     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
		     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
		  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
		     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
		  hash: hash.sha512,
		  gRed: false,
		  g: [
		    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
		    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
		    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
		    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
		    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
		    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
		  ],
		});

		defineCurve('curve25519', {
		  type: 'mont',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '76d06',
		  b: '1',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '9',
		  ],
		});

		defineCurve('ed25519', {
		  type: 'edwards',
		  prime: 'p25519',
		  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
		  a: '-1',
		  c: '1',
		  // -121665 * (121666^(-1)) (mod P)
		  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
		  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
		  hash: hash.sha256,
		  gRed: false,
		  g: [
		    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

		    // 4/5
		    '6666666666666666666666666666666666666666666666666666666666666658',
		  ],
		});

		var pre;
		try {
		  pre = requireSecp256k1();
		} catch (e) {
		  pre = undefined;
		}

		defineCurve('secp256k1', {
		  type: 'short',
		  prime: 'k256',
		  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
		  a: '0',
		  b: '7',
		  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
		  h: '1',
		  hash: hash.sha256,

		  // Precomputed endomorphism
		  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
		  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
		  basis: [
		    {
		      a: '3086d221a7d46bcde86c90e49284eb15',
		      b: '-e4437ed6010e88286f547fa90abfe4c3',
		    },
		    {
		      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
		      b: '3086d221a7d46bcde86c90e49284eb15',
		    },
		  ],

		  gRed: false,
		  g: [
		    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
		    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
		    pre,
		  ],
		}); 
	} (curves$2));

	var hash$3 = hash$4;
	var utils$6 = utils$l;
	var assert$6 = minimalisticAssert;

	function HmacDRBG$1(options) {
	  if (!(this instanceof HmacDRBG$1))
	    return new HmacDRBG$1(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils$6.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils$6.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils$6.toArray(options.pers, options.persEnc || 'hex');
	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG$1;

	HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG$1.prototype._hmac = function hmac() {
	  return new hash$3.hmac(this.hash, this.K);
	};

	HmacDRBG$1.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils$6.toArray(entropy, entropyEnc);
	  add = utils$6.toArray(add, addEnc);

	  assert$6(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils$6.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils$6.encode(res, enc);
	};

	var DRBG = /*@__PURE__*/getDefaultExportFromCjs(hmacDrbg);

	var BN$3 = bnExports;
	var utils$5 = utils$m;
	var assert$5 = utils$5.assert;

	function KeyPair$3(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$1 = KeyPair$3;

	KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$3)
	    return pub;

	  return new KeyPair$3(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$3)
	    return priv;

	  return new KeyPair$3(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$3.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$3(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$5(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$5(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$3.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$5(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$3.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$3.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$3.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var BN$2 = bnExports;

	var utils$4 = utils$m;
	var assert$4 = utils$4.assert;

	function Signature$4(options, enc) {
	  if (options instanceof Signature$4)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$2(options.r, 16);
	  this.s = new BN$2(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$1 = Signature$4;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$4.prototype._importDER = function _importDER(data, enc) {
	  data = utils$4.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$2(r);
	  this.s = new BN$2(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$4.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils$4.encode(res, enc);
	};

	var BN$1 = bnExports;
	var HmacDRBG = hmacDrbg;
	var utils$3 = utils$m;
	var curves$1 = curves$2;
	var rand = brorandExports;
	var assert$3 = utils$3.assert;

	var KeyPair$2 = key$1;
	var Signature$3 = signature$1;

	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
	      'Unknown curve ' + options);

	    options = curves$1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves$1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec$1 = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new KeyPair$2(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair$2.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair$2.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$1(2));
	  for (;;) {
	    var priv = new BN$1(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$1(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$1(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$1(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature$3({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN$1(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature$3(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$3((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature$3(signature, enc);

	  var n = this.n;
	  var e = new BN$1(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature$3(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var utils$2 = utils$m;
	var assert$2 = utils$2.assert;
	var parseBytes$2 = utils$2.parseBytes;
	var cachedProperty$1 = utils$2.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$2(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$2(this._secret, 'KeyPair is public only');
	  return utils$2.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils$2.encode(this.pubBytes(), enc);
	};

	var key = KeyPair$1;

	var BN = bnExports;
	var utils$1 = utils$m;
	var assert$1 = utils$1.assert;
	var cachedProperty = utils$1.cachedProperty;
	var parseBytes$1 = utils$1.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$2(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$1(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature$2, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature$2, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature$2, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature$2, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$2.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$2.prototype.toHex = function toHex() {
	  return utils$1.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature = Signature$2;

	var hash$2 = hash$4;
	var curves = curves$2;
	var utils = utils$m;
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = key;
	var Signature$1 = signature;

	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash$2.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature$1)
	    return sig;
	  return new Signature$1(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	(function (exports) {

		var elliptic = exports;

		elliptic.version = require$$0$4.version;
		elliptic.utils = utils$m;
		elliptic.rand = brorandExports;
		elliptic.curve = curve$1;
		elliptic.curves = curves$2;

		// Protocols
		elliptic.ec = ec$1;
		elliptic.eddsa = eddsa; 
	} (elliptic$1));

	var elliptic = /*@__PURE__*/getDefaultExportFromCjs(elliptic$1);

	var bundle = {exports: {}};

	bundle.exports;

	(function (module, exports) {
		(function (global, factory) {
		  factory(exports) ;
		})(commonjsGlobal, (function (exports) {
		  //  Copyright (C) 2018 Zilliqa
		  //
		  //  This file is part of zilliqa-js
		  //
		  //  This program is free software: you can redistribute it and/or modify
		  //  it under the terms of the GNU General Public License as published by
		  //  the Free Software Foundation, either version 3 of the License, or
		  //  (at your option) any later version.
		  //
		  //  This program is distributed in the hope that it will be useful,
		  //  but WITHOUT ANY WARRANTY; without even the implied warranty of
		  //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		  //  GNU General Public License for more details.
		  //
		  //  You should have received a copy of the GNU General Public License
		  //  along with this program.  If not, see <https://www.gnu.org/licenses/>.
		  /**
		   * intToHexArray
		   *
		   * @param {number} int - the number to be converted to hex
		   * @param {number)} size - the desired width of the hex value. will pad.
		   *
		   * @returns {string[]}
		   */
		  var intToHexArray = function (int, size) {
		      var hex = [];
		      var hexRep = [];
		      var hexVal = int.toString(16);
		      // TODO: this really needs to be refactored.
		      for (var i = 0; i < hexVal.length; i++) {
		          hexRep[i] = hexVal[i].toString();
		      }
		      for (var i = 0; i < size - hexVal.length; i++) {
		          hex.push('0');
		      }
		      for (var i = 0; i < hexVal.length; i++) {
		          hex.push(hexRep[i]);
		      }
		      return hex;
		  };
		  /**
		   * intToByteArray
		   *
		   * Converts a number to Uint8Array
		   *
		   * @param {number} num
		   * @param {number} size
		   *
		   * @returns {Uint8Array}
		   */
		  var intToByteArray = function (num, size) {
		      var x = num;
		      var res = [];
		      while (x > 0) {
		          res.push(x & 255);
		          x = x >> 8;
		      }
		      var pad = size - res.length;
		      for (var i = 0; i < pad; i++) {
		          res.unshift(0);
		      }
		      return Uint8Array.from(res);
		  };
		  /**
		   * hexToByteArray
		   *
		   * Convers a hex string to a Uint8Array
		   *
		   * @param {string} hex
		   * @returns {Uint8Array}
		   */
		  var hexToByteArray = function (hex) {
		      var res = new Uint8Array(hex.length / 2);
		      for (var i = 0; i < hex.length; i += 2) {
		          res[i / 2] = parseInt(hex.substring(i, i + 2), 16);
		      }
		      return res;
		  };
		  /**
		   * hexToIntArray
		   *
		   * @param {string} hex
		   * @returns {number[]}
		   */
		  var hexToIntArray = function (hex) {
		      if (!hex || !isHex(hex)) {
		          return [];
		      }
		      var res = [];
		      for (var i = 0; i < hex.length; i++) {
		          var c = hex.charCodeAt(i);
		          var hi = c >> 8;
		          var lo = c & 0xff;
		          hi ? res.push(hi, lo) : res.push(lo);
		      }
		      return res;
		  };
		  /**
		   * pack
		   *
		   * Takes two 16-bit integers and combines them. Used to compute version.
		   *
		   * @param {number} a
		   * @param {number} b
		   *
		   * @returns {number} - a 32-bit number
		   */
		  var pack = function (a, b) {
		      if (a >> 16 > 0 || b >> 16 > 0) {
		          throw new Error('Both a and b must be 16 bits or less');
		      }
		      return (a << 16) + b;
		  };
		  /**
		   * compareBytes
		   *
		   * A constant time HMAC comparison function.
		   *
		   * @param {string} a
		   * @param {string} b
		   * @returns {boolean}
		   */
		  var isEqual = function (a, b) {
		      var bzA = hexToIntArray(a);
		      var bzB = hexToIntArray(b);
		      if (bzA.length !== bzB.length) {
		          return false;
		      }
		      var result = 0;
		      for (var i = 0; i < bzA.length; i++) {
		          result |= bzA[i] ^ bzB[i];
		      }
		      return result === 0;
		  };
		  /**
		   * isHex
		   *
		   * @param {string} str - string to be tested
		   * @returns {boolean}
		   */
		  var isHex = function (str) {
		      var plain = str.replace('0x', '');
		      return /[0-9a-f]*$/i.test(plain);
		  };

		  var bytes = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    intToHexArray: intToHexArray,
		    intToByteArray: intToByteArray,
		    hexToByteArray: hexToByteArray,
		    hexToIntArray: hexToIntArray,
		    pack: pack,
		    isEqual: isEqual,
		    isHex: isHex
		  });

		  /******************************************************************************
		  Copyright (c) Microsoft Corporation.

		  Permission to use, copy, modify, and/or distribute this software for any
		  purpose with or without fee is hereby granted.

		  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
		  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
		  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
		  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
		  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
		  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
		  PERFORMANCE OF THIS SOFTWARE.
		  ***************************************************************************** */

		  function __values(o) {
		      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
		      if (m) return m.call(o);
		      if (o && typeof o.length === "number") return {
		          next: function () {
		              if (o && i >= o.length) o = void 0;
		              return { value: o && o[i++], done: !o };
		          }
		      };
		      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
		  }

		  function __read(o, n) {
		      var m = typeof Symbol === "function" && o[Symbol.iterator];
		      if (!m) return o;
		      var i = m.call(o), r, ar = [], e;
		      try {
		          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		      }
		      catch (error) { e = { error: error }; }
		      finally {
		          try {
		              if (r && !r.done && (m = i["return"])) m.call(i);
		          }
		          finally { if (e) throw e.error; }
		      }
		      return ar;
		  }

		  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

		  function getDefaultExportFromCjs (x) {
		  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
		  }

		  function getAugmentedNamespace(n) {
		    if (n.__esModule) return n;
		    var f = n.default;
		  	if (typeof f == "function") {
		  		var a = function a () {
		  			if (this instanceof a) {
		  				var args = [null];
		  				args.push.apply(args, arguments);
		  				var Ctor = Function.bind.apply(f, args);
		  				return new Ctor();
		  			}
		  			return f.apply(this, arguments);
		  		};
		  		a.prototype = f.prototype;
		    } else a = {};
		    Object.defineProperty(a, '__esModule', {value: true});
		  	Object.keys(n).forEach(function (k) {
		  		var d = Object.getOwnPropertyDescriptor(n, k);
		  		Object.defineProperty(a, k, d.get ? d : {
		  			enumerable: true,
		  			get: function () {
		  				return n[k];
		  			}
		  		});
		  	});
		  	return a;
		  }

		  var bn = {exports: {}};

		  var global$1 = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal :
		    typeof self !== "undefined" ? self :
		    typeof window !== "undefined" ? window : {});

		  var lookup = [];
		  var revLookup = [];
		  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
		  var inited = false;
		  function init () {
		    inited = true;
		    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		    for (var i = 0, len = code.length; i < len; ++i) {
		      lookup[i] = code[i];
		      revLookup[code.charCodeAt(i)] = i;
		    }

		    revLookup['-'.charCodeAt(0)] = 62;
		    revLookup['_'.charCodeAt(0)] = 63;
		  }

		  function toByteArray (b64) {
		    if (!inited) {
		      init();
		    }
		    var i, j, l, tmp, placeHolders, arr;
		    var len = b64.length;

		    if (len % 4 > 0) {
		      throw new Error('Invalid string. Length must be a multiple of 4')
		    }

		    // the number of equal signs (place holders)
		    // if there are two placeholders, than the two characters before it
		    // represent one byte
		    // if there is only one, then the three characters before it represent 2 bytes
		    // this is just a cheap hack to not do indexOf twice
		    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

		    // base64 is 4/3 + up to two characters of the original data
		    arr = new Arr(len * 3 / 4 - placeHolders);

		    // if there are placeholders, only get up to the last complete 4 chars
		    l = placeHolders > 0 ? len - 4 : len;

		    var L = 0;

		    for (i = 0, j = 0; i < l; i += 4, j += 3) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
		      arr[L++] = (tmp >> 16) & 0xFF;
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    if (placeHolders === 2) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
		      arr[L++] = tmp & 0xFF;
		    } else if (placeHolders === 1) {
		      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
		      arr[L++] = (tmp >> 8) & 0xFF;
		      arr[L++] = tmp & 0xFF;
		    }

		    return arr
		  }

		  function tripletToBase64 (num) {
		    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
		  }

		  function encodeChunk (uint8, start, end) {
		    var tmp;
		    var output = [];
		    for (var i = start; i < end; i += 3) {
		      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
		      output.push(tripletToBase64(tmp));
		    }
		    return output.join('')
		  }

		  function fromByteArray (uint8) {
		    if (!inited) {
		      init();
		    }
		    var tmp;
		    var len = uint8.length;
		    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
		    var output = '';
		    var parts = [];
		    var maxChunkLength = 16383; // must be multiple of 3

		    // go through the array every three bytes, we'll deal with trailing stuff later
		    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
		    }

		    // pad the end with zeros, but make sure to not forget the extra bytes
		    if (extraBytes === 1) {
		      tmp = uint8[len - 1];
		      output += lookup[tmp >> 2];
		      output += lookup[(tmp << 4) & 0x3F];
		      output += '==';
		    } else if (extraBytes === 2) {
		      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
		      output += lookup[tmp >> 10];
		      output += lookup[(tmp >> 4) & 0x3F];
		      output += lookup[(tmp << 2) & 0x3F];
		      output += '=';
		    }

		    parts.push(output);

		    return parts.join('')
		  }

		  function read (buffer, offset, isLE, mLen, nBytes) {
		    var e, m;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var nBits = -7;
		    var i = isLE ? (nBytes - 1) : 0;
		    var d = isLE ? -1 : 1;
		    var s = buffer[offset + i];

		    i += d;

		    e = s & ((1 << (-nBits)) - 1);
		    s >>= (-nBits);
		    nBits += eLen;
		    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    m = e & ((1 << (-nBits)) - 1);
		    e >>= (-nBits);
		    nBits += mLen;
		    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		    if (e === 0) {
		      e = 1 - eBias;
		    } else if (e === eMax) {
		      return m ? NaN : ((s ? -1 : 1) * Infinity)
		    } else {
		      m = m + Math.pow(2, mLen);
		      e = e - eBias;
		    }
		    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		  }

		  function write (buffer, value, offset, isLE, mLen, nBytes) {
		    var e, m, c;
		    var eLen = nBytes * 8 - mLen - 1;
		    var eMax = (1 << eLen) - 1;
		    var eBias = eMax >> 1;
		    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
		    var i = isLE ? 0 : (nBytes - 1);
		    var d = isLE ? 1 : -1;
		    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

		    value = Math.abs(value);

		    if (isNaN(value) || value === Infinity) {
		      m = isNaN(value) ? 1 : 0;
		      e = eMax;
		    } else {
		      e = Math.floor(Math.log(value) / Math.LN2);
		      if (value * (c = Math.pow(2, -e)) < 1) {
		        e--;
		        c *= 2;
		      }
		      if (e + eBias >= 1) {
		        value += rt / c;
		      } else {
		        value += rt * Math.pow(2, 1 - eBias);
		      }
		      if (value * c >= 2) {
		        e++;
		        c /= 2;
		      }

		      if (e + eBias >= eMax) {
		        m = 0;
		        e = eMax;
		      } else if (e + eBias >= 1) {
		        m = (value * c - 1) * Math.pow(2, mLen);
		        e = e + eBias;
		      } else {
		        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
		        e = 0;
		      }
		    }

		    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		    e = (e << mLen) | m;
		    eLen += mLen;
		    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		    buffer[offset + i - d] |= s * 128;
		  }

		  var toString = {}.toString;

		  var isArray = Array.isArray || function (arr) {
		    return toString.call(arr) == '[object Array]';
		  };

		  /*!
		   * The buffer module from node.js, for the browser.
		   *
		   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		   * @license  MIT
		   */

		  var INSPECT_MAX_BYTES = 50;

		  /**
		   * If `Buffer.TYPED_ARRAY_SUPPORT`:
		   *   === true    Use Uint8Array implementation (fastest)
		   *   === false   Use Object implementation (most compatible, even IE6)
		   *
		   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		   * Opera 11.6+, iOS 4.2+.
		   *
		   * Due to various browser bugs, sometimes the Object implementation will be used even
		   * when the browser supports typed arrays.
		   *
		   * Note:
		   *
		   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		   *
		   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		   *
		   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		   *     incorrect length in some situations.

		   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		   * get the Object implementation, which is slower but behaves correctly.
		   */
		  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
		    ? global$1.TYPED_ARRAY_SUPPORT
		    : true;

		  /*
		   * Export kMaxLength after typed array support is determined.
		   */
		  var _kMaxLength = kMaxLength();

		  function kMaxLength () {
		    return Buffer.TYPED_ARRAY_SUPPORT
		      ? 0x7fffffff
		      : 0x3fffffff
		  }

		  function createBuffer (that, length) {
		    if (kMaxLength() < length) {
		      throw new RangeError('Invalid typed array length')
		    }
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = new Uint8Array(length);
		      that.__proto__ = Buffer.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      if (that === null) {
		        that = new Buffer(length);
		      }
		      that.length = length;
		    }

		    return that
		  }

		  /**
		   * The Buffer constructor returns instances of `Uint8Array` that have their
		   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		   * returns a single octet.
		   *
		   * The `Uint8Array` prototype remains unmodified.
		   */

		  function Buffer (arg, encodingOrOffset, length) {
		    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
		      return new Buffer(arg, encodingOrOffset, length)
		    }

		    // Common case.
		    if (typeof arg === 'number') {
		      if (typeof encodingOrOffset === 'string') {
		        throw new Error(
		          'If encoding is specified then the first argument must be a string'
		        )
		      }
		      return allocUnsafe(this, arg)
		    }
		    return from(this, arg, encodingOrOffset, length)
		  }

		  Buffer.poolSize = 8192; // not used by this implementation

		  // TODO: Legacy, not needed anymore. Remove in next major version.
		  Buffer._augment = function (arr) {
		    arr.__proto__ = Buffer.prototype;
		    return arr
		  };

		  function from (that, value, encodingOrOffset, length) {
		    if (typeof value === 'number') {
		      throw new TypeError('"value" argument must not be a number')
		    }

		    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		      return fromArrayBuffer(that, value, encodingOrOffset, length)
		    }

		    if (typeof value === 'string') {
		      return fromString$1(that, value, encodingOrOffset)
		    }

		    return fromObject(that, value)
		  }

		  /**
		   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		   * if value is a number.
		   * Buffer.from(str[, encoding])
		   * Buffer.from(array)
		   * Buffer.from(buffer)
		   * Buffer.from(arrayBuffer[, byteOffset[, length]])
		   **/
		  Buffer.from = function (value, encodingOrOffset, length) {
		    return from(null, value, encodingOrOffset, length)
		  };

		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    Buffer.prototype.__proto__ = Uint8Array.prototype;
		    Buffer.__proto__ = Uint8Array;
		    if (typeof Symbol !== 'undefined' && Symbol.species &&
		        Buffer[Symbol.species] === Buffer) ;
		  }

		  function assertSize (size) {
		    if (typeof size !== 'number') {
		      throw new TypeError('"size" argument must be a number')
		    } else if (size < 0) {
		      throw new RangeError('"size" argument must not be negative')
		    }
		  }

		  function alloc (that, size, fill, encoding) {
		    assertSize(size);
		    if (size <= 0) {
		      return createBuffer(that, size)
		    }
		    if (fill !== undefined) {
		      // Only pay attention to encoding if it's a string. This
		      // prevents accidentally sending in a number that would
		      // be interpretted as a start offset.
		      return typeof encoding === 'string'
		        ? createBuffer(that, size).fill(fill, encoding)
		        : createBuffer(that, size).fill(fill)
		    }
		    return createBuffer(that, size)
		  }

		  /**
		   * Creates a new filled Buffer instance.
		   * alloc(size[, fill[, encoding]])
		   **/
		  Buffer.alloc = function (size, fill, encoding) {
		    return alloc(null, size, fill, encoding)
		  };

		  function allocUnsafe (that, size) {
		    assertSize(size);
		    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) {
		      for (var i = 0; i < size; ++i) {
		        that[i] = 0;
		      }
		    }
		    return that
		  }

		  /**
		   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		   * */
		  Buffer.allocUnsafe = function (size) {
		    return allocUnsafe(null, size)
		  };
		  /**
		   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		   */
		  Buffer.allocUnsafeSlow = function (size) {
		    return allocUnsafe(null, size)
		  };

		  function fromString$1 (that, string, encoding) {
		    if (typeof encoding !== 'string' || encoding === '') {
		      encoding = 'utf8';
		    }

		    if (!Buffer.isEncoding(encoding)) {
		      throw new TypeError('"encoding" must be a valid string encoding')
		    }

		    var length = byteLength(string, encoding) | 0;
		    that = createBuffer(that, length);

		    var actual = that.write(string, encoding);

		    if (actual !== length) {
		      // Writing a hex string, for example, that contains invalid characters will
		      // cause everything after the first invalid character to be ignored. (e.g.
		      // 'abxxcd' will be treated as 'ab')
		      that = that.slice(0, actual);
		    }

		    return that
		  }

		  function fromArrayLike (that, array) {
		    var length = array.length < 0 ? 0 : checked(array.length) | 0;
		    that = createBuffer(that, length);
		    for (var i = 0; i < length; i += 1) {
		      that[i] = array[i] & 255;
		    }
		    return that
		  }

		  function fromArrayBuffer (that, array, byteOffset, length) {
		    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

		    if (byteOffset < 0 || array.byteLength < byteOffset) {
		      throw new RangeError('\'offset\' is out of bounds')
		    }

		    if (array.byteLength < byteOffset + (length || 0)) {
		      throw new RangeError('\'length\' is out of bounds')
		    }

		    if (byteOffset === undefined && length === undefined) {
		      array = new Uint8Array(array);
		    } else if (length === undefined) {
		      array = new Uint8Array(array, byteOffset);
		    } else {
		      array = new Uint8Array(array, byteOffset, length);
		    }

		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      // Return an augmented `Uint8Array` instance, for best performance
		      that = array;
		      that.__proto__ = Buffer.prototype;
		    } else {
		      // Fallback: Return an object instance of the Buffer class
		      that = fromArrayLike(that, array);
		    }
		    return that
		  }

		  function fromObject (that, obj) {
		    if (internalIsBuffer(obj)) {
		      var len = checked(obj.length) | 0;
		      that = createBuffer(that, len);

		      if (that.length === 0) {
		        return that
		      }

		      obj.copy(that, 0, 0, len);
		      return that
		    }

		    if (obj) {
		      if ((typeof ArrayBuffer !== 'undefined' &&
		          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		        if (typeof obj.length !== 'number' || isnan(obj.length)) {
		          return createBuffer(that, 0)
		        }
		        return fromArrayLike(that, obj)
		      }

		      if (obj.type === 'Buffer' && isArray(obj.data)) {
		        return fromArrayLike(that, obj.data)
		      }
		    }

		    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		  }

		  function checked (length) {
		    // Note: cannot use `length < kMaxLength()` here because that fails when
		    // length is NaN (which is otherwise coerced to zero.)
		    if (length >= kMaxLength()) {
		      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
		    }
		    return length | 0
		  }

		  function SlowBuffer (length) {
		    if (+length != length) { // eslint-disable-line eqeqeq
		      length = 0;
		    }
		    return Buffer.alloc(+length)
		  }
		  Buffer.isBuffer = isBuffer;
		  function internalIsBuffer (b) {
		    return !!(b != null && b._isBuffer)
		  }

		  Buffer.compare = function compare (a, b) {
		    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
		      throw new TypeError('Arguments must be Buffers')
		    }

		    if (a === b) return 0

		    var x = a.length;
		    var y = b.length;

		    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		      if (a[i] !== b[i]) {
		        x = a[i];
		        y = b[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  Buffer.isEncoding = function isEncoding (encoding) {
		    switch (String(encoding).toLowerCase()) {
		      case 'hex':
		      case 'utf8':
		      case 'utf-8':
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		      case 'base64':
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return true
		      default:
		        return false
		    }
		  };

		  Buffer.concat = function concat (list, length) {
		    if (!isArray(list)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }

		    if (list.length === 0) {
		      return Buffer.alloc(0)
		    }

		    var i;
		    if (length === undefined) {
		      length = 0;
		      for (i = 0; i < list.length; ++i) {
		        length += list[i].length;
		      }
		    }

		    var buffer = Buffer.allocUnsafe(length);
		    var pos = 0;
		    for (i = 0; i < list.length; ++i) {
		      var buf = list[i];
		      if (!internalIsBuffer(buf)) {
		        throw new TypeError('"list" argument must be an Array of Buffers')
		      }
		      buf.copy(buffer, pos);
		      pos += buf.length;
		    }
		    return buffer
		  };

		  function byteLength (string, encoding) {
		    if (internalIsBuffer(string)) {
		      return string.length
		    }
		    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		      return string.byteLength
		    }
		    if (typeof string !== 'string') {
		      string = '' + string;
		    }

		    var len = string.length;
		    if (len === 0) return 0

		    // Use a for loop to avoid recursion
		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'ascii':
		        case 'latin1':
		        case 'binary':
		          return len
		        case 'utf8':
		        case 'utf-8':
		        case undefined:
		          return utf8ToBytes(string).length
		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return len * 2
		        case 'hex':
		          return len >>> 1
		        case 'base64':
		          return base64ToBytes(string).length
		        default:
		          if (loweredCase) return utf8ToBytes(string).length // assume utf8
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }
		  Buffer.byteLength = byteLength;

		  function slowToString (encoding, start, end) {
		    var loweredCase = false;

		    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		    // property of a typed array.

		    // This behaves neither like String nor Uint8Array in that we set start/end
		    // to their upper/lower bounds if the value passed is out of range.
		    // undefined is handled specially as per ECMA-262 6th Edition,
		    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		    if (start === undefined || start < 0) {
		      start = 0;
		    }
		    // Return early if start > this.length. Done here to prevent potential uint32
		    // coercion fail below.
		    if (start > this.length) {
		      return ''
		    }

		    if (end === undefined || end > this.length) {
		      end = this.length;
		    }

		    if (end <= 0) {
		      return ''
		    }

		    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		    end >>>= 0;
		    start >>>= 0;

		    if (end <= start) {
		      return ''
		    }

		    if (!encoding) encoding = 'utf8';

		    while (true) {
		      switch (encoding) {
		        case 'hex':
		          return hexSlice(this, start, end)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Slice(this, start, end)

		        case 'ascii':
		          return asciiSlice(this, start, end)

		        case 'latin1':
		        case 'binary':
		          return latin1Slice(this, start, end)

		        case 'base64':
		          return base64Slice(this, start, end)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return utf16leSlice(this, start, end)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = (encoding + '').toLowerCase();
		          loweredCase = true;
		      }
		    }
		  }

		  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		  // Buffer instances.
		  Buffer.prototype._isBuffer = true;

		  function swap (b, n, m) {
		    var i = b[n];
		    b[n] = b[m];
		    b[m] = i;
		  }

		  Buffer.prototype.swap16 = function swap16 () {
		    var len = this.length;
		    if (len % 2 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 16-bits')
		    }
		    for (var i = 0; i < len; i += 2) {
		      swap(this, i, i + 1);
		    }
		    return this
		  };

		  Buffer.prototype.swap32 = function swap32 () {
		    var len = this.length;
		    if (len % 4 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 32-bits')
		    }
		    for (var i = 0; i < len; i += 4) {
		      swap(this, i, i + 3);
		      swap(this, i + 1, i + 2);
		    }
		    return this
		  };

		  Buffer.prototype.swap64 = function swap64 () {
		    var len = this.length;
		    if (len % 8 !== 0) {
		      throw new RangeError('Buffer size must be a multiple of 64-bits')
		    }
		    for (var i = 0; i < len; i += 8) {
		      swap(this, i, i + 7);
		      swap(this, i + 1, i + 6);
		      swap(this, i + 2, i + 5);
		      swap(this, i + 3, i + 4);
		    }
		    return this
		  };

		  Buffer.prototype.toString = function toString () {
		    var length = this.length | 0;
		    if (length === 0) return ''
		    if (arguments.length === 0) return utf8Slice(this, 0, length)
		    return slowToString.apply(this, arguments)
		  };

		  Buffer.prototype.equals = function equals (b) {
		    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
		    if (this === b) return true
		    return Buffer.compare(this, b) === 0
		  };

		  Buffer.prototype.inspect = function inspect () {
		    var str = '';
		    var max = INSPECT_MAX_BYTES;
		    if (this.length > 0) {
		      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
		      if (this.length > max) str += ' ... ';
		    }
		    return '<Buffer ' + str + '>'
		  };

		  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		    if (!internalIsBuffer(target)) {
		      throw new TypeError('Argument must be a Buffer')
		    }

		    if (start === undefined) {
		      start = 0;
		    }
		    if (end === undefined) {
		      end = target ? target.length : 0;
		    }
		    if (thisStart === undefined) {
		      thisStart = 0;
		    }
		    if (thisEnd === undefined) {
		      thisEnd = this.length;
		    }

		    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		      throw new RangeError('out of range index')
		    }

		    if (thisStart >= thisEnd && start >= end) {
		      return 0
		    }
		    if (thisStart >= thisEnd) {
		      return -1
		    }
		    if (start >= end) {
		      return 1
		    }

		    start >>>= 0;
		    end >>>= 0;
		    thisStart >>>= 0;
		    thisEnd >>>= 0;

		    if (this === target) return 0

		    var x = thisEnd - thisStart;
		    var y = end - start;
		    var len = Math.min(x, y);

		    var thisCopy = this.slice(thisStart, thisEnd);
		    var targetCopy = target.slice(start, end);

		    for (var i = 0; i < len; ++i) {
		      if (thisCopy[i] !== targetCopy[i]) {
		        x = thisCopy[i];
		        y = targetCopy[i];
		        break
		      }
		    }

		    if (x < y) return -1
		    if (y < x) return 1
		    return 0
		  };

		  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		  //
		  // Arguments:
		  // - buffer - a Buffer to search
		  // - val - a string, Buffer, or number
		  // - byteOffset - an index into `buffer`; will be clamped to an int32
		  // - encoding - an optional encoding, relevant is val is a string
		  // - dir - true for indexOf, false for lastIndexOf
		  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		    // Empty buffer means no match
		    if (buffer.length === 0) return -1

		    // Normalize byteOffset
		    if (typeof byteOffset === 'string') {
		      encoding = byteOffset;
		      byteOffset = 0;
		    } else if (byteOffset > 0x7fffffff) {
		      byteOffset = 0x7fffffff;
		    } else if (byteOffset < -0x80000000) {
		      byteOffset = -0x80000000;
		    }
		    byteOffset = +byteOffset;  // Coerce to Number.
		    if (isNaN(byteOffset)) {
		      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		      byteOffset = dir ? 0 : (buffer.length - 1);
		    }

		    // Normalize byteOffset: negative offsets start from the end of the buffer
		    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		    if (byteOffset >= buffer.length) {
		      if (dir) return -1
		      else byteOffset = buffer.length - 1;
		    } else if (byteOffset < 0) {
		      if (dir) byteOffset = 0;
		      else return -1
		    }

		    // Normalize val
		    if (typeof val === 'string') {
		      val = Buffer.from(val, encoding);
		    }

		    // Finally, search either indexOf (if dir is true) or lastIndexOf
		    if (internalIsBuffer(val)) {
		      // Special case: looking for empty string/buffer always fails
		      if (val.length === 0) {
		        return -1
		      }
		      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		    } else if (typeof val === 'number') {
		      val = val & 0xFF; // Search for a byte value [0-255]
		      if (Buffer.TYPED_ARRAY_SUPPORT &&
		          typeof Uint8Array.prototype.indexOf === 'function') {
		        if (dir) {
		          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		        } else {
		          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		        }
		      }
		      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		    }

		    throw new TypeError('val must be string, number or Buffer')
		  }

		  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		    var indexSize = 1;
		    var arrLength = arr.length;
		    var valLength = val.length;

		    if (encoding !== undefined) {
		      encoding = String(encoding).toLowerCase();
		      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		          encoding === 'utf16le' || encoding === 'utf-16le') {
		        if (arr.length < 2 || val.length < 2) {
		          return -1
		        }
		        indexSize = 2;
		        arrLength /= 2;
		        valLength /= 2;
		        byteOffset /= 2;
		      }
		    }

		    function read (buf, i) {
		      if (indexSize === 1) {
		        return buf[i]
		      } else {
		        return buf.readUInt16BE(i * indexSize)
		      }
		    }

		    var i;
		    if (dir) {
		      var foundIndex = -1;
		      for (i = byteOffset; i < arrLength; i++) {
		        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		          if (foundIndex === -1) foundIndex = i;
		          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		        } else {
		          if (foundIndex !== -1) i -= i - foundIndex;
		          foundIndex = -1;
		        }
		      }
		    } else {
		      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
		      for (i = byteOffset; i >= 0; i--) {
		        var found = true;
		        for (var j = 0; j < valLength; j++) {
		          if (read(arr, i + j) !== read(val, j)) {
		            found = false;
		            break
		          }
		        }
		        if (found) return i
		      }
		    }

		    return -1
		  }

		  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		    return this.indexOf(val, byteOffset, encoding) !== -1
		  };

		  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		  };

		  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		  };

		  function hexWrite (buf, string, offset, length) {
		    offset = Number(offset) || 0;
		    var remaining = buf.length - offset;
		    if (!length) {
		      length = remaining;
		    } else {
		      length = Number(length);
		      if (length > remaining) {
		        length = remaining;
		      }
		    }

		    // must be an even number of digits
		    var strLen = string.length;
		    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		    if (length > strLen / 2) {
		      length = strLen / 2;
		    }
		    for (var i = 0; i < length; ++i) {
		      var parsed = parseInt(string.substr(i * 2, 2), 16);
		      if (isNaN(parsed)) return i
		      buf[offset + i] = parsed;
		    }
		    return i
		  }

		  function utf8Write (buf, string, offset, length) {
		    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		  }

		  function asciiWrite (buf, string, offset, length) {
		    return blitBuffer(asciiToBytes(string), buf, offset, length)
		  }

		  function latin1Write (buf, string, offset, length) {
		    return asciiWrite(buf, string, offset, length)
		  }

		  function base64Write (buf, string, offset, length) {
		    return blitBuffer(base64ToBytes(string), buf, offset, length)
		  }

		  function ucs2Write (buf, string, offset, length) {
		    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		  }

		  Buffer.prototype.write = function write (string, offset, length, encoding) {
		    // Buffer#write(string)
		    if (offset === undefined) {
		      encoding = 'utf8';
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, encoding)
		    } else if (length === undefined && typeof offset === 'string') {
		      encoding = offset;
		      length = this.length;
		      offset = 0;
		    // Buffer#write(string, offset[, length][, encoding])
		    } else if (isFinite(offset)) {
		      offset = offset | 0;
		      if (isFinite(length)) {
		        length = length | 0;
		        if (encoding === undefined) encoding = 'utf8';
		      } else {
		        encoding = length;
		        length = undefined;
		      }
		    // legacy write(string, encoding, offset, length) - remove in v0.13
		    } else {
		      throw new Error(
		        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		      )
		    }

		    var remaining = this.length - offset;
		    if (length === undefined || length > remaining) length = remaining;

		    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		      throw new RangeError('Attempt to write outside buffer bounds')
		    }

		    if (!encoding) encoding = 'utf8';

		    var loweredCase = false;
		    for (;;) {
		      switch (encoding) {
		        case 'hex':
		          return hexWrite(this, string, offset, length)

		        case 'utf8':
		        case 'utf-8':
		          return utf8Write(this, string, offset, length)

		        case 'ascii':
		          return asciiWrite(this, string, offset, length)

		        case 'latin1':
		        case 'binary':
		          return latin1Write(this, string, offset, length)

		        case 'base64':
		          // Warning: maxLength not taken into account in base64Write
		          return base64Write(this, string, offset, length)

		        case 'ucs2':
		        case 'ucs-2':
		        case 'utf16le':
		        case 'utf-16le':
		          return ucs2Write(this, string, offset, length)

		        default:
		          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		          encoding = ('' + encoding).toLowerCase();
		          loweredCase = true;
		      }
		    }
		  };

		  Buffer.prototype.toJSON = function toJSON () {
		    return {
		      type: 'Buffer',
		      data: Array.prototype.slice.call(this._arr || this, 0)
		    }
		  };

		  function base64Slice (buf, start, end) {
		    if (start === 0 && end === buf.length) {
		      return fromByteArray(buf)
		    } else {
		      return fromByteArray(buf.slice(start, end))
		    }
		  }

		  function utf8Slice (buf, start, end) {
		    end = Math.min(buf.length, end);
		    var res = [];

		    var i = start;
		    while (i < end) {
		      var firstByte = buf[i];
		      var codePoint = null;
		      var bytesPerSequence = (firstByte > 0xEF) ? 4
		        : (firstByte > 0xDF) ? 3
		        : (firstByte > 0xBF) ? 2
		        : 1;

		      if (i + bytesPerSequence <= end) {
		        var secondByte, thirdByte, fourthByte, tempCodePoint;

		        switch (bytesPerSequence) {
		          case 1:
		            if (firstByte < 0x80) {
		              codePoint = firstByte;
		            }
		            break
		          case 2:
		            secondByte = buf[i + 1];
		            if ((secondByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
		              if (tempCodePoint > 0x7F) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 3:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
		              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		                codePoint = tempCodePoint;
		              }
		            }
		            break
		          case 4:
		            secondByte = buf[i + 1];
		            thirdByte = buf[i + 2];
		            fourthByte = buf[i + 3];
		            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
		              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		                codePoint = tempCodePoint;
		              }
		            }
		        }
		      }

		      if (codePoint === null) {
		        // we did not generate a valid codePoint so insert a
		        // replacement char (U+FFFD) and advance only 1 byte
		        codePoint = 0xFFFD;
		        bytesPerSequence = 1;
		      } else if (codePoint > 0xFFFF) {
		        // encode to utf16 (surrogate pair dance)
		        codePoint -= 0x10000;
		        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
		        codePoint = 0xDC00 | codePoint & 0x3FF;
		      }

		      res.push(codePoint);
		      i += bytesPerSequence;
		    }

		    return decodeCodePointsArray(res)
		  }

		  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
		  // the lowest limit is Chrome, with 0x10000 args.
		  // We go 1 magnitude less, for safety
		  var MAX_ARGUMENTS_LENGTH = 0x1000;

		  function decodeCodePointsArray (codePoints) {
		    var len = codePoints.length;
		    if (len <= MAX_ARGUMENTS_LENGTH) {
		      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		    }

		    // Decode in chunks to avoid "call stack size exceeded".
		    var res = '';
		    var i = 0;
		    while (i < len) {
		      res += String.fromCharCode.apply(
		        String,
		        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		      );
		    }
		    return res
		  }

		  function asciiSlice (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i] & 0x7F);
		    }
		    return ret
		  }

		  function latin1Slice (buf, start, end) {
		    var ret = '';
		    end = Math.min(buf.length, end);

		    for (var i = start; i < end; ++i) {
		      ret += String.fromCharCode(buf[i]);
		    }
		    return ret
		  }

		  function hexSlice (buf, start, end) {
		    var len = buf.length;

		    if (!start || start < 0) start = 0;
		    if (!end || end < 0 || end > len) end = len;

		    var out = '';
		    for (var i = start; i < end; ++i) {
		      out += toHex(buf[i]);
		    }
		    return out
		  }

		  function utf16leSlice (buf, start, end) {
		    var bytes = buf.slice(start, end);
		    var res = '';
		    for (var i = 0; i < bytes.length; i += 2) {
		      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
		    }
		    return res
		  }

		  Buffer.prototype.slice = function slice (start, end) {
		    var len = this.length;
		    start = ~~start;
		    end = end === undefined ? len : ~~end;

		    if (start < 0) {
		      start += len;
		      if (start < 0) start = 0;
		    } else if (start > len) {
		      start = len;
		    }

		    if (end < 0) {
		      end += len;
		      if (end < 0) end = 0;
		    } else if (end > len) {
		      end = len;
		    }

		    if (end < start) end = start;

		    var newBuf;
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      newBuf = this.subarray(start, end);
		      newBuf.__proto__ = Buffer.prototype;
		    } else {
		      var sliceLen = end - start;
		      newBuf = new Buffer(sliceLen, undefined);
		      for (var i = 0; i < sliceLen; ++i) {
		        newBuf[i] = this[i + start];
		      }
		    }

		    return newBuf
		  };

		  /*
		   * Need to make sure that buffer isn't trying to write out of bounds.
		   */
		  function checkOffset (offset, ext, length) {
		    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		  }

		  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }

		    return val
		  };

		  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      checkOffset(offset, byteLength, this.length);
		    }

		    var val = this[offset + --byteLength];
		    var mul = 1;
		    while (byteLength > 0 && (mul *= 0x100)) {
		      val += this[offset + --byteLength] * mul;
		    }

		    return val
		  };

		  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 1, this.length);
		    return this[offset]
		  };

		  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    return this[offset] | (this[offset + 1] << 8)
		  };

		  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    return (this[offset] << 8) | this[offset + 1]
		  };

		  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return ((this[offset]) |
		        (this[offset + 1] << 8) |
		        (this[offset + 2] << 16)) +
		        (this[offset + 3] * 0x1000000)
		  };

		  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset] * 0x1000000) +
		      ((this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      this[offset + 3])
		  };

		  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var val = this[offset];
		    var mul = 1;
		    var i = 0;
		    while (++i < byteLength && (mul *= 0x100)) {
		      val += this[offset + i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) checkOffset(offset, byteLength, this.length);

		    var i = byteLength;
		    var mul = 1;
		    var val = this[offset + --i];
		    while (i > 0 && (mul *= 0x100)) {
		      val += this[offset + --i] * mul;
		    }
		    mul *= 0x80;

		    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

		    return val
		  };

		  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 1, this.length);
		    if (!(this[offset] & 0x80)) return (this[offset])
		    return ((0xff - this[offset] + 1) * -1)
		  };

		  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    var val = this[offset] | (this[offset + 1] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 2, this.length);
		    var val = this[offset + 1] | (this[offset] << 8);
		    return (val & 0x8000) ? val | 0xFFFF0000 : val
		  };

		  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16) |
		      (this[offset + 3] << 24)
		  };

		  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);

		    return (this[offset] << 24) |
		      (this[offset + 1] << 16) |
		      (this[offset + 2] << 8) |
		      (this[offset + 3])
		  };

		  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);
		    return read(this, offset, true, 23, 4)
		  };

		  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 4, this.length);
		    return read(this, offset, false, 23, 4)
		  };

		  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 8, this.length);
		    return read(this, offset, true, 52, 8)
		  };

		  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		    if (!noAssert) checkOffset(offset, 8, this.length);
		    return read(this, offset, false, 52, 8)
		  };

		  function checkInt (buf, value, offset, ext, max, min) {
		    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  }

		  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var mul = 1;
		    var i = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    byteLength = byteLength | 0;
		    if (!noAssert) {
		      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
		      checkInt(this, value, offset, byteLength, maxBytes, 0);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      this[offset + i] = (value / mul) & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  function objectWriteUInt16 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		        (littleEndian ? i : 1 - i) * 8;
		    }
		  }

		  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  function objectWriteUInt32 (buf, value, offset, littleEndian) {
		    if (value < 0) value = 0xffffffff + value + 1;
		    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
		    }
		  }

		  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset + 3] = (value >>> 24);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 1] = (value >>> 8);
		      this[offset] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = 0;
		    var mul = 1;
		    var sub = 0;
		    this[offset] = value & 0xFF;
		    while (++i < byteLength && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) {
		      var limit = Math.pow(2, 8 * byteLength - 1);

		      checkInt(this, value, offset, byteLength, limit - 1, -limit);
		    }

		    var i = byteLength - 1;
		    var mul = 1;
		    var sub = 0;
		    this[offset + i] = value & 0xFF;
		    while (--i >= 0 && (mul *= 0x100)) {
		      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		        sub = 1;
		      }
		      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
		    }

		    return offset + byteLength
		  };

		  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
		    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
		    if (value < 0) value = 0xff + value + 1;
		    this[offset] = (value & 0xff);
		    return offset + 1
		  };

		  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		    } else {
		      objectWriteUInt16(this, value, offset, true);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 8);
		      this[offset + 1] = (value & 0xff);
		    } else {
		      objectWriteUInt16(this, value, offset, false);
		    }
		    return offset + 2
		  };

		  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value & 0xff);
		      this[offset + 1] = (value >>> 8);
		      this[offset + 2] = (value >>> 16);
		      this[offset + 3] = (value >>> 24);
		    } else {
		      objectWriteUInt32(this, value, offset, true);
		    }
		    return offset + 4
		  };

		  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		    value = +value;
		    offset = offset | 0;
		    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
		    if (value < 0) value = 0xffffffff + value + 1;
		    if (Buffer.TYPED_ARRAY_SUPPORT) {
		      this[offset] = (value >>> 24);
		      this[offset + 1] = (value >>> 16);
		      this[offset + 2] = (value >>> 8);
		      this[offset + 3] = (value & 0xff);
		    } else {
		      objectWriteUInt32(this, value, offset, false);
		    }
		    return offset + 4
		  };

		  function checkIEEE754 (buf, value, offset, ext, max, min) {
		    if (offset + ext > buf.length) throw new RangeError('Index out of range')
		    if (offset < 0) throw new RangeError('Index out of range')
		  }

		  function writeFloat (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754(buf, value, offset, 4);
		    }
		    write(buf, value, offset, littleEndian, 23, 4);
		    return offset + 4
		  }

		  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		    return writeFloat(this, value, offset, true, noAssert)
		  };

		  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		    return writeFloat(this, value, offset, false, noAssert)
		  };

		  function writeDouble (buf, value, offset, littleEndian, noAssert) {
		    if (!noAssert) {
		      checkIEEE754(buf, value, offset, 8);
		    }
		    write(buf, value, offset, littleEndian, 52, 8);
		    return offset + 8
		  }

		  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		    return writeDouble(this, value, offset, true, noAssert)
		  };

		  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		    return writeDouble(this, value, offset, false, noAssert)
		  };

		  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		    if (!start) start = 0;
		    if (!end && end !== 0) end = this.length;
		    if (targetStart >= target.length) targetStart = target.length;
		    if (!targetStart) targetStart = 0;
		    if (end > 0 && end < start) end = start;

		    // Copy 0 bytes; we're done
		    if (end === start) return 0
		    if (target.length === 0 || this.length === 0) return 0

		    // Fatal error conditions
		    if (targetStart < 0) {
		      throw new RangeError('targetStart out of bounds')
		    }
		    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		    if (end < 0) throw new RangeError('sourceEnd out of bounds')

		    // Are we oob?
		    if (end > this.length) end = this.length;
		    if (target.length - targetStart < end - start) {
		      end = target.length - targetStart + start;
		    }

		    var len = end - start;
		    var i;

		    if (this === target && start < targetStart && targetStart < end) {
		      // descending copy from end
		      for (i = len - 1; i >= 0; --i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
		      // ascending copy from start
		      for (i = 0; i < len; ++i) {
		        target[i + targetStart] = this[i + start];
		      }
		    } else {
		      Uint8Array.prototype.set.call(
		        target,
		        this.subarray(start, start + len),
		        targetStart
		      );
		    }

		    return len
		  };

		  // Usage:
		  //    buffer.fill(number[, offset[, end]])
		  //    buffer.fill(buffer[, offset[, end]])
		  //    buffer.fill(string[, offset[, end]][, encoding])
		  Buffer.prototype.fill = function fill (val, start, end, encoding) {
		    // Handle string cases:
		    if (typeof val === 'string') {
		      if (typeof start === 'string') {
		        encoding = start;
		        start = 0;
		        end = this.length;
		      } else if (typeof end === 'string') {
		        encoding = end;
		        end = this.length;
		      }
		      if (val.length === 1) {
		        var code = val.charCodeAt(0);
		        if (code < 256) {
		          val = code;
		        }
		      }
		      if (encoding !== undefined && typeof encoding !== 'string') {
		        throw new TypeError('encoding must be a string')
		      }
		      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		        throw new TypeError('Unknown encoding: ' + encoding)
		      }
		    } else if (typeof val === 'number') {
		      val = val & 255;
		    }

		    // Invalid ranges are not set to a default, so can range check early.
		    if (start < 0 || this.length < start || this.length < end) {
		      throw new RangeError('Out of range index')
		    }

		    if (end <= start) {
		      return this
		    }

		    start = start >>> 0;
		    end = end === undefined ? this.length : end >>> 0;

		    if (!val) val = 0;

		    var i;
		    if (typeof val === 'number') {
		      for (i = start; i < end; ++i) {
		        this[i] = val;
		      }
		    } else {
		      var bytes = internalIsBuffer(val)
		        ? val
		        : utf8ToBytes(new Buffer(val, encoding).toString());
		      var len = bytes.length;
		      for (i = 0; i < end - start; ++i) {
		        this[i + start] = bytes[i % len];
		      }
		    }

		    return this
		  };

		  // HELPER FUNCTIONS
		  // ================

		  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

		  function base64clean (str) {
		    // Node strips out invalid characters like \n and \t from the string, base64-js does not
		    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
		    // Node converts strings with length < 2 to ''
		    if (str.length < 2) return ''
		    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		    while (str.length % 4 !== 0) {
		      str = str + '=';
		    }
		    return str
		  }

		  function stringtrim (str) {
		    if (str.trim) return str.trim()
		    return str.replace(/^\s+|\s+$/g, '')
		  }

		  function toHex (n) {
		    if (n < 16) return '0' + n.toString(16)
		    return n.toString(16)
		  }

		  function utf8ToBytes (string, units) {
		    units = units || Infinity;
		    var codePoint;
		    var length = string.length;
		    var leadSurrogate = null;
		    var bytes = [];

		    for (var i = 0; i < length; ++i) {
		      codePoint = string.charCodeAt(i);

		      // is surrogate component
		      if (codePoint > 0xD7FF && codePoint < 0xE000) {
		        // last char was a lead
		        if (!leadSurrogate) {
		          // no lead yet
		          if (codePoint > 0xDBFF) {
		            // unexpected trail
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          } else if (i + 1 === length) {
		            // unpaired lead
		            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		            continue
		          }

		          // valid lead
		          leadSurrogate = codePoint;

		          continue
		        }

		        // 2 leads in a row
		        if (codePoint < 0xDC00) {
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		          leadSurrogate = codePoint;
		          continue
		        }

		        // valid surrogate pair
		        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
		      } else if (leadSurrogate) {
		        // valid bmp char, but last char was a lead
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
		      }

		      leadSurrogate = null;

		      // encode utf8
		      if (codePoint < 0x80) {
		        if ((units -= 1) < 0) break
		        bytes.push(codePoint);
		      } else if (codePoint < 0x800) {
		        if ((units -= 2) < 0) break
		        bytes.push(
		          codePoint >> 0x6 | 0xC0,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x10000) {
		        if ((units -= 3) < 0) break
		        bytes.push(
		          codePoint >> 0xC | 0xE0,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else if (codePoint < 0x110000) {
		        if ((units -= 4) < 0) break
		        bytes.push(
		          codePoint >> 0x12 | 0xF0,
		          codePoint >> 0xC & 0x3F | 0x80,
		          codePoint >> 0x6 & 0x3F | 0x80,
		          codePoint & 0x3F | 0x80
		        );
		      } else {
		        throw new Error('Invalid code point')
		      }
		    }

		    return bytes
		  }

		  function asciiToBytes (str) {
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      // Node's code seems to be doing this and not & 0x7F..
		      byteArray.push(str.charCodeAt(i) & 0xFF);
		    }
		    return byteArray
		  }

		  function utf16leToBytes (str, units) {
		    var c, hi, lo;
		    var byteArray = [];
		    for (var i = 0; i < str.length; ++i) {
		      if ((units -= 2) < 0) break

		      c = str.charCodeAt(i);
		      hi = c >> 8;
		      lo = c % 256;
		      byteArray.push(lo);
		      byteArray.push(hi);
		    }

		    return byteArray
		  }


		  function base64ToBytes (str) {
		    return toByteArray(base64clean(str))
		  }

		  function blitBuffer (src, dst, offset, length) {
		    for (var i = 0; i < length; ++i) {
		      if ((i + offset >= dst.length) || (i >= src.length)) break
		      dst[i + offset] = src[i];
		    }
		    return i
		  }

		  function isnan (val) {
		    return val !== val // eslint-disable-line no-self-compare
		  }


		  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
		  // The _isBuffer check is for Safari 5-7 support, because it's missing
		  // Object.prototype.constructor. Remove this eventually
		  function isBuffer(obj) {
		    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
		  }

		  function isFastBuffer (obj) {
		    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
		  }

		  // For Node v0.10 support. Remove this eventually.
		  function isSlowBuffer (obj) {
		    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
		  }

		  var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    Buffer: Buffer,
		    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		    SlowBuffer: SlowBuffer,
		    isBuffer: isBuffer,
		    kMaxLength: _kMaxLength
		  });

		  var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

		  bn.exports;

		  (function (module) {
		  	(function (module, exports) {

		  	  // Utils
		  	  function assert (val, msg) {
		  	    if (!val) throw new Error(msg || 'Assertion failed');
		  	  }

		  	  // Could use `inherits` module, but don't want to move from single file
		  	  // architecture yet.
		  	  function inherits (ctor, superCtor) {
		  	    ctor.super_ = superCtor;
		  	    var TempCtor = function () {};
		  	    TempCtor.prototype = superCtor.prototype;
		  	    ctor.prototype = new TempCtor();
		  	    ctor.prototype.constructor = ctor;
		  	  }

		  	  // BN

		  	  function BN (number, base, endian) {
		  	    if (BN.isBN(number)) {
		  	      return number;
		  	    }

		  	    this.negative = 0;
		  	    this.words = null;
		  	    this.length = 0;

		  	    // Reduction context
		  	    this.red = null;

		  	    if (number !== null) {
		  	      if (base === 'le' || base === 'be') {
		  	        endian = base;
		  	        base = 10;
		  	      }

		  	      this._init(number || 0, base || 10, endian || 'be');
		  	    }
		  	  }
		  	  if (typeof module === 'object') {
		  	    module.exports = BN;
		  	  } else {
		  	    exports.BN = BN;
		  	  }

		  	  BN.BN = BN;
		  	  BN.wordSize = 26;

		  	  var Buffer;
		  	  try {
		  	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		  	      Buffer = window.Buffer;
		  	    } else {
		  	      Buffer = require$$0.Buffer;
		  	    }
		  	  } catch (e) {
		  	  }

		  	  BN.isBN = function isBN (num) {
		  	    if (num instanceof BN) {
		  	      return true;
		  	    }

		  	    return num !== null && typeof num === 'object' &&
		  	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
		  	  };

		  	  BN.max = function max (left, right) {
		  	    if (left.cmp(right) > 0) return left;
		  	    return right;
		  	  };

		  	  BN.min = function min (left, right) {
		  	    if (left.cmp(right) < 0) return left;
		  	    return right;
		  	  };

		  	  BN.prototype._init = function init (number, base, endian) {
		  	    if (typeof number === 'number') {
		  	      return this._initNumber(number, base, endian);
		  	    }

		  	    if (typeof number === 'object') {
		  	      return this._initArray(number, base, endian);
		  	    }

		  	    if (base === 'hex') {
		  	      base = 16;
		  	    }
		  	    assert(base === (base | 0) && base >= 2 && base <= 36);

		  	    number = number.toString().replace(/\s+/g, '');
		  	    var start = 0;
		  	    if (number[0] === '-') {
		  	      start++;
		  	      this.negative = 1;
		  	    }

		  	    if (start < number.length) {
		  	      if (base === 16) {
		  	        this._parseHex(number, start, endian);
		  	      } else {
		  	        this._parseBase(number, base, start);
		  	        if (endian === 'le') {
		  	          this._initArray(this.toArray(), base, endian);
		  	        }
		  	      }
		  	    }
		  	  };

		  	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		  	    if (number < 0) {
		  	      this.negative = 1;
		  	      number = -number;
		  	    }
		  	    if (number < 0x4000000) {
		  	      this.words = [ number & 0x3ffffff ];
		  	      this.length = 1;
		  	    } else if (number < 0x10000000000000) {
		  	      this.words = [
		  	        number & 0x3ffffff,
		  	        (number / 0x4000000) & 0x3ffffff
		  	      ];
		  	      this.length = 2;
		  	    } else {
		  	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		  	      this.words = [
		  	        number & 0x3ffffff,
		  	        (number / 0x4000000) & 0x3ffffff,
		  	        1
		  	      ];
		  	      this.length = 3;
		  	    }

		  	    if (endian !== 'le') return;

		  	    // Reverse the bytes
		  	    this._initArray(this.toArray(), base, endian);
		  	  };

		  	  BN.prototype._initArray = function _initArray (number, base, endian) {
		  	    // Perhaps a Uint8Array
		  	    assert(typeof number.length === 'number');
		  	    if (number.length <= 0) {
		  	      this.words = [ 0 ];
		  	      this.length = 1;
		  	      return this;
		  	    }

		  	    this.length = Math.ceil(number.length / 3);
		  	    this.words = new Array(this.length);
		  	    for (var i = 0; i < this.length; i++) {
		  	      this.words[i] = 0;
		  	    }

		  	    var j, w;
		  	    var off = 0;
		  	    if (endian === 'be') {
		  	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
		  	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
		  	        this.words[j] |= (w << off) & 0x3ffffff;
		  	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		  	        off += 24;
		  	        if (off >= 26) {
		  	          off -= 26;
		  	          j++;
		  	        }
		  	      }
		  	    } else if (endian === 'le') {
		  	      for (i = 0, j = 0; i < number.length; i += 3) {
		  	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
		  	        this.words[j] |= (w << off) & 0x3ffffff;
		  	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
		  	        off += 24;
		  	        if (off >= 26) {
		  	          off -= 26;
		  	          j++;
		  	        }
		  	      }
		  	    }
		  	    return this.strip();
		  	  };

		  	  function parseHex4Bits (string, index) {
		  	    var c = string.charCodeAt(index);
		  	    // 'A' - 'F'
		  	    if (c >= 65 && c <= 70) {
		  	      return c - 55;
		  	    // 'a' - 'f'
		  	    } else if (c >= 97 && c <= 102) {
		  	      return c - 87;
		  	    // '0' - '9'
		  	    } else {
		  	      return (c - 48) & 0xf;
		  	    }
		  	  }

		  	  function parseHexByte (string, lowerBound, index) {
		  	    var r = parseHex4Bits(string, index);
		  	    if (index - 1 >= lowerBound) {
		  	      r |= parseHex4Bits(string, index - 1) << 4;
		  	    }
		  	    return r;
		  	  }

		  	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		  	    // Create possibly bigger array to ensure that it fits the number
		  	    this.length = Math.ceil((number.length - start) / 6);
		  	    this.words = new Array(this.length);
		  	    for (var i = 0; i < this.length; i++) {
		  	      this.words[i] = 0;
		  	    }

		  	    // 24-bits chunks
		  	    var off = 0;
		  	    var j = 0;

		  	    var w;
		  	    if (endian === 'be') {
		  	      for (i = number.length - 1; i >= start; i -= 2) {
		  	        w = parseHexByte(number, start, i) << off;
		  	        this.words[j] |= w & 0x3ffffff;
		  	        if (off >= 18) {
		  	          off -= 18;
		  	          j += 1;
		  	          this.words[j] |= w >>> 26;
		  	        } else {
		  	          off += 8;
		  	        }
		  	      }
		  	    } else {
		  	      var parseLength = number.length - start;
		  	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
		  	        w = parseHexByte(number, start, i) << off;
		  	        this.words[j] |= w & 0x3ffffff;
		  	        if (off >= 18) {
		  	          off -= 18;
		  	          j += 1;
		  	          this.words[j] |= w >>> 26;
		  	        } else {
		  	          off += 8;
		  	        }
		  	      }
		  	    }

		  	    this.strip();
		  	  };

		  	  function parseBase (str, start, end, mul) {
		  	    var r = 0;
		  	    var len = Math.min(str.length, end);
		  	    for (var i = start; i < len; i++) {
		  	      var c = str.charCodeAt(i) - 48;

		  	      r *= mul;

		  	      // 'a'
		  	      if (c >= 49) {
		  	        r += c - 49 + 0xa;

		  	      // 'A'
		  	      } else if (c >= 17) {
		  	        r += c - 17 + 0xa;

		  	      // '0' - '9'
		  	      } else {
		  	        r += c;
		  	      }
		  	    }
		  	    return r;
		  	  }

		  	  BN.prototype._parseBase = function _parseBase (number, base, start) {
		  	    // Initialize as zero
		  	    this.words = [ 0 ];
		  	    this.length = 1;

		  	    // Find length of limb in base
		  	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		  	      limbLen++;
		  	    }
		  	    limbLen--;
		  	    limbPow = (limbPow / base) | 0;

		  	    var total = number.length - start;
		  	    var mod = total % limbLen;
		  	    var end = Math.min(total, total - mod) + start;

		  	    var word = 0;
		  	    for (var i = start; i < end; i += limbLen) {
		  	      word = parseBase(number, i, i + limbLen, base);

		  	      this.imuln(limbPow);
		  	      if (this.words[0] + word < 0x4000000) {
		  	        this.words[0] += word;
		  	      } else {
		  	        this._iaddn(word);
		  	      }
		  	    }

		  	    if (mod !== 0) {
		  	      var pow = 1;
		  	      word = parseBase(number, i, number.length, base);

		  	      for (i = 0; i < mod; i++) {
		  	        pow *= base;
		  	      }

		  	      this.imuln(pow);
		  	      if (this.words[0] + word < 0x4000000) {
		  	        this.words[0] += word;
		  	      } else {
		  	        this._iaddn(word);
		  	      }
		  	    }

		  	    this.strip();
		  	  };

		  	  BN.prototype.copy = function copy (dest) {
		  	    dest.words = new Array(this.length);
		  	    for (var i = 0; i < this.length; i++) {
		  	      dest.words[i] = this.words[i];
		  	    }
		  	    dest.length = this.length;
		  	    dest.negative = this.negative;
		  	    dest.red = this.red;
		  	  };

		  	  BN.prototype.clone = function clone () {
		  	    var r = new BN(null);
		  	    this.copy(r);
		  	    return r;
		  	  };

		  	  BN.prototype._expand = function _expand (size) {
		  	    while (this.length < size) {
		  	      this.words[this.length++] = 0;
		  	    }
		  	    return this;
		  	  };

		  	  // Remove leading `0` from `this`
		  	  BN.prototype.strip = function strip () {
		  	    while (this.length > 1 && this.words[this.length - 1] === 0) {
		  	      this.length--;
		  	    }
		  	    return this._normSign();
		  	  };

		  	  BN.prototype._normSign = function _normSign () {
		  	    // -0 = 0
		  	    if (this.length === 1 && this.words[0] === 0) {
		  	      this.negative = 0;
		  	    }
		  	    return this;
		  	  };

		  	  BN.prototype.inspect = function inspect () {
		  	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
		  	  };

		  	  /*

		  	  var zeros = [];
		  	  var groupSizes = [];
		  	  var groupBases = [];

		  	  var s = '';
		  	  var i = -1;
		  	  while (++i < BN.wordSize) {
		  	    zeros[i] = s;
		  	    s += '0';
		  	  }
		  	  groupSizes[0] = 0;
		  	  groupSizes[1] = 0;
		  	  groupBases[0] = 0;
		  	  groupBases[1] = 0;
		  	  var base = 2 - 1;
		  	  while (++base < 36 + 1) {
		  	    var groupSize = 0;
		  	    var groupBase = 1;
		  	    while (groupBase < (1 << BN.wordSize) / base) {
		  	      groupBase *= base;
		  	      groupSize += 1;
		  	    }
		  	    groupSizes[base] = groupSize;
		  	    groupBases[base] = groupBase;
		  	  }

		  	  */

		  	  var zeros = [
		  	    '',
		  	    '0',
		  	    '00',
		  	    '000',
		  	    '0000',
		  	    '00000',
		  	    '000000',
		  	    '0000000',
		  	    '00000000',
		  	    '000000000',
		  	    '0000000000',
		  	    '00000000000',
		  	    '000000000000',
		  	    '0000000000000',
		  	    '00000000000000',
		  	    '000000000000000',
		  	    '0000000000000000',
		  	    '00000000000000000',
		  	    '000000000000000000',
		  	    '0000000000000000000',
		  	    '00000000000000000000',
		  	    '000000000000000000000',
		  	    '0000000000000000000000',
		  	    '00000000000000000000000',
		  	    '000000000000000000000000',
		  	    '0000000000000000000000000'
		  	  ];

		  	  var groupSizes = [
		  	    0, 0,
		  	    25, 16, 12, 11, 10, 9, 8,
		  	    8, 7, 7, 7, 7, 6, 6,
		  	    6, 6, 6, 6, 6, 5, 5,
		  	    5, 5, 5, 5, 5, 5, 5,
		  	    5, 5, 5, 5, 5, 5, 5
		  	  ];

		  	  var groupBases = [
		  	    0, 0,
		  	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		  	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		  	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		  	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		  	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
		  	  ];

		  	  BN.prototype.toString = function toString (base, padding) {
		  	    base = base || 10;
		  	    padding = padding | 0 || 1;

		  	    var out;
		  	    if (base === 16 || base === 'hex') {
		  	      out = '';
		  	      var off = 0;
		  	      var carry = 0;
		  	      for (var i = 0; i < this.length; i++) {
		  	        var w = this.words[i];
		  	        var word = (((w << off) | carry) & 0xffffff).toString(16);
		  	        carry = (w >>> (24 - off)) & 0xffffff;
		  	        if (carry !== 0 || i !== this.length - 1) {
		  	          out = zeros[6 - word.length] + word + out;
		  	        } else {
		  	          out = word + out;
		  	        }
		  	        off += 2;
		  	        if (off >= 26) {
		  	          off -= 26;
		  	          i--;
		  	        }
		  	      }
		  	      if (carry !== 0) {
		  	        out = carry.toString(16) + out;
		  	      }
		  	      while (out.length % padding !== 0) {
		  	        out = '0' + out;
		  	      }
		  	      if (this.negative !== 0) {
		  	        out = '-' + out;
		  	      }
		  	      return out;
		  	    }

		  	    if (base === (base | 0) && base >= 2 && base <= 36) {
		  	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		  	      var groupSize = groupSizes[base];
		  	      // var groupBase = Math.pow(base, groupSize);
		  	      var groupBase = groupBases[base];
		  	      out = '';
		  	      var c = this.clone();
		  	      c.negative = 0;
		  	      while (!c.isZero()) {
		  	        var r = c.modn(groupBase).toString(base);
		  	        c = c.idivn(groupBase);

		  	        if (!c.isZero()) {
		  	          out = zeros[groupSize - r.length] + r + out;
		  	        } else {
		  	          out = r + out;
		  	        }
		  	      }
		  	      if (this.isZero()) {
		  	        out = '0' + out;
		  	      }
		  	      while (out.length % padding !== 0) {
		  	        out = '0' + out;
		  	      }
		  	      if (this.negative !== 0) {
		  	        out = '-' + out;
		  	      }
		  	      return out;
		  	    }

		  	    assert(false, 'Base should be between 2 and 36');
		  	  };

		  	  BN.prototype.toNumber = function toNumber () {
		  	    var ret = this.words[0];
		  	    if (this.length === 2) {
		  	      ret += this.words[1] * 0x4000000;
		  	    } else if (this.length === 3 && this.words[2] === 0x01) {
		  	      // NOTE: at this stage it is known that the top bit is set
		  	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		  	    } else if (this.length > 2) {
		  	      assert(false, 'Number can only safely store up to 53 bits');
		  	    }
		  	    return (this.negative !== 0) ? -ret : ret;
		  	  };

		  	  BN.prototype.toJSON = function toJSON () {
		  	    return this.toString(16);
		  	  };

		  	  BN.prototype.toBuffer = function toBuffer (endian, length) {
		  	    assert(typeof Buffer !== 'undefined');
		  	    return this.toArrayLike(Buffer, endian, length);
		  	  };

		  	  BN.prototype.toArray = function toArray (endian, length) {
		  	    return this.toArrayLike(Array, endian, length);
		  	  };

		  	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		  	    var byteLength = this.byteLength();
		  	    var reqLength = length || Math.max(1, byteLength);
		  	    assert(byteLength <= reqLength, 'byte array longer than desired length');
		  	    assert(reqLength > 0, 'Requested array length <= 0');

		  	    this.strip();
		  	    var littleEndian = endian === 'le';
		  	    var res = new ArrayType(reqLength);

		  	    var b, i;
		  	    var q = this.clone();
		  	    if (!littleEndian) {
		  	      // Assume big-endian
		  	      for (i = 0; i < reqLength - byteLength; i++) {
		  	        res[i] = 0;
		  	      }

		  	      for (i = 0; !q.isZero(); i++) {
		  	        b = q.andln(0xff);
		  	        q.iushrn(8);

		  	        res[reqLength - i - 1] = b;
		  	      }
		  	    } else {
		  	      for (i = 0; !q.isZero(); i++) {
		  	        b = q.andln(0xff);
		  	        q.iushrn(8);

		  	        res[i] = b;
		  	      }

		  	      for (; i < reqLength; i++) {
		  	        res[i] = 0;
		  	      }
		  	    }

		  	    return res;
		  	  };

		  	  if (Math.clz32) {
		  	    BN.prototype._countBits = function _countBits (w) {
		  	      return 32 - Math.clz32(w);
		  	    };
		  	  } else {
		  	    BN.prototype._countBits = function _countBits (w) {
		  	      var t = w;
		  	      var r = 0;
		  	      if (t >= 0x1000) {
		  	        r += 13;
		  	        t >>>= 13;
		  	      }
		  	      if (t >= 0x40) {
		  	        r += 7;
		  	        t >>>= 7;
		  	      }
		  	      if (t >= 0x8) {
		  	        r += 4;
		  	        t >>>= 4;
		  	      }
		  	      if (t >= 0x02) {
		  	        r += 2;
		  	        t >>>= 2;
		  	      }
		  	      return r + t;
		  	    };
		  	  }

		  	  BN.prototype._zeroBits = function _zeroBits (w) {
		  	    // Short-cut
		  	    if (w === 0) return 26;

		  	    var t = w;
		  	    var r = 0;
		  	    if ((t & 0x1fff) === 0) {
		  	      r += 13;
		  	      t >>>= 13;
		  	    }
		  	    if ((t & 0x7f) === 0) {
		  	      r += 7;
		  	      t >>>= 7;
		  	    }
		  	    if ((t & 0xf) === 0) {
		  	      r += 4;
		  	      t >>>= 4;
		  	    }
		  	    if ((t & 0x3) === 0) {
		  	      r += 2;
		  	      t >>>= 2;
		  	    }
		  	    if ((t & 0x1) === 0) {
		  	      r++;
		  	    }
		  	    return r;
		  	  };

		  	  // Return number of used bits in a BN
		  	  BN.prototype.bitLength = function bitLength () {
		  	    var w = this.words[this.length - 1];
		  	    var hi = this._countBits(w);
		  	    return (this.length - 1) * 26 + hi;
		  	  };

		  	  function toBitArray (num) {
		  	    var w = new Array(num.bitLength());

		  	    for (var bit = 0; bit < w.length; bit++) {
		  	      var off = (bit / 26) | 0;
		  	      var wbit = bit % 26;

		  	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		  	    }

		  	    return w;
		  	  }

		  	  // Number of trailing zero bits
		  	  BN.prototype.zeroBits = function zeroBits () {
		  	    if (this.isZero()) return 0;

		  	    var r = 0;
		  	    for (var i = 0; i < this.length; i++) {
		  	      var b = this._zeroBits(this.words[i]);
		  	      r += b;
		  	      if (b !== 26) break;
		  	    }
		  	    return r;
		  	  };

		  	  BN.prototype.byteLength = function byteLength () {
		  	    return Math.ceil(this.bitLength() / 8);
		  	  };

		  	  BN.prototype.toTwos = function toTwos (width) {
		  	    if (this.negative !== 0) {
		  	      return this.abs().inotn(width).iaddn(1);
		  	    }
		  	    return this.clone();
		  	  };

		  	  BN.prototype.fromTwos = function fromTwos (width) {
		  	    if (this.testn(width - 1)) {
		  	      return this.notn(width).iaddn(1).ineg();
		  	    }
		  	    return this.clone();
		  	  };

		  	  BN.prototype.isNeg = function isNeg () {
		  	    return this.negative !== 0;
		  	  };

		  	  // Return negative clone of `this`
		  	  BN.prototype.neg = function neg () {
		  	    return this.clone().ineg();
		  	  };

		  	  BN.prototype.ineg = function ineg () {
		  	    if (!this.isZero()) {
		  	      this.negative ^= 1;
		  	    }

		  	    return this;
		  	  };

		  	  // Or `num` with `this` in-place
		  	  BN.prototype.iuor = function iuor (num) {
		  	    while (this.length < num.length) {
		  	      this.words[this.length++] = 0;
		  	    }

		  	    for (var i = 0; i < num.length; i++) {
		  	      this.words[i] = this.words[i] | num.words[i];
		  	    }

		  	    return this.strip();
		  	  };

		  	  BN.prototype.ior = function ior (num) {
		  	    assert((this.negative | num.negative) === 0);
		  	    return this.iuor(num);
		  	  };

		  	  // Or `num` with `this`
		  	  BN.prototype.or = function or (num) {
		  	    if (this.length > num.length) return this.clone().ior(num);
		  	    return num.clone().ior(this);
		  	  };

		  	  BN.prototype.uor = function uor (num) {
		  	    if (this.length > num.length) return this.clone().iuor(num);
		  	    return num.clone().iuor(this);
		  	  };

		  	  // And `num` with `this` in-place
		  	  BN.prototype.iuand = function iuand (num) {
		  	    // b = min-length(num, this)
		  	    var b;
		  	    if (this.length > num.length) {
		  	      b = num;
		  	    } else {
		  	      b = this;
		  	    }

		  	    for (var i = 0; i < b.length; i++) {
		  	      this.words[i] = this.words[i] & num.words[i];
		  	    }

		  	    this.length = b.length;

		  	    return this.strip();
		  	  };

		  	  BN.prototype.iand = function iand (num) {
		  	    assert((this.negative | num.negative) === 0);
		  	    return this.iuand(num);
		  	  };

		  	  // And `num` with `this`
		  	  BN.prototype.and = function and (num) {
		  	    if (this.length > num.length) return this.clone().iand(num);
		  	    return num.clone().iand(this);
		  	  };

		  	  BN.prototype.uand = function uand (num) {
		  	    if (this.length > num.length) return this.clone().iuand(num);
		  	    return num.clone().iuand(this);
		  	  };

		  	  // Xor `num` with `this` in-place
		  	  BN.prototype.iuxor = function iuxor (num) {
		  	    // a.length > b.length
		  	    var a;
		  	    var b;
		  	    if (this.length > num.length) {
		  	      a = this;
		  	      b = num;
		  	    } else {
		  	      a = num;
		  	      b = this;
		  	    }

		  	    for (var i = 0; i < b.length; i++) {
		  	      this.words[i] = a.words[i] ^ b.words[i];
		  	    }

		  	    if (this !== a) {
		  	      for (; i < a.length; i++) {
		  	        this.words[i] = a.words[i];
		  	      }
		  	    }

		  	    this.length = a.length;

		  	    return this.strip();
		  	  };

		  	  BN.prototype.ixor = function ixor (num) {
		  	    assert((this.negative | num.negative) === 0);
		  	    return this.iuxor(num);
		  	  };

		  	  // Xor `num` with `this`
		  	  BN.prototype.xor = function xor (num) {
		  	    if (this.length > num.length) return this.clone().ixor(num);
		  	    return num.clone().ixor(this);
		  	  };

		  	  BN.prototype.uxor = function uxor (num) {
		  	    if (this.length > num.length) return this.clone().iuxor(num);
		  	    return num.clone().iuxor(this);
		  	  };

		  	  // Not ``this`` with ``width`` bitwidth
		  	  BN.prototype.inotn = function inotn (width) {
		  	    assert(typeof width === 'number' && width >= 0);

		  	    var bytesNeeded = Math.ceil(width / 26) | 0;
		  	    var bitsLeft = width % 26;

		  	    // Extend the buffer with leading zeroes
		  	    this._expand(bytesNeeded);

		  	    if (bitsLeft > 0) {
		  	      bytesNeeded--;
		  	    }

		  	    // Handle complete words
		  	    for (var i = 0; i < bytesNeeded; i++) {
		  	      this.words[i] = ~this.words[i] & 0x3ffffff;
		  	    }

		  	    // Handle the residue
		  	    if (bitsLeft > 0) {
		  	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		  	    }

		  	    // And remove leading zeroes
		  	    return this.strip();
		  	  };

		  	  BN.prototype.notn = function notn (width) {
		  	    return this.clone().inotn(width);
		  	  };

		  	  // Set `bit` of `this`
		  	  BN.prototype.setn = function setn (bit, val) {
		  	    assert(typeof bit === 'number' && bit >= 0);

		  	    var off = (bit / 26) | 0;
		  	    var wbit = bit % 26;

		  	    this._expand(off + 1);

		  	    if (val) {
		  	      this.words[off] = this.words[off] | (1 << wbit);
		  	    } else {
		  	      this.words[off] = this.words[off] & ~(1 << wbit);
		  	    }

		  	    return this.strip();
		  	  };

		  	  // Add `num` to `this` in-place
		  	  BN.prototype.iadd = function iadd (num) {
		  	    var r;

		  	    // negative + positive
		  	    if (this.negative !== 0 && num.negative === 0) {
		  	      this.negative = 0;
		  	      r = this.isub(num);
		  	      this.negative ^= 1;
		  	      return this._normSign();

		  	    // positive + negative
		  	    } else if (this.negative === 0 && num.negative !== 0) {
		  	      num.negative = 0;
		  	      r = this.isub(num);
		  	      num.negative = 1;
		  	      return r._normSign();
		  	    }

		  	    // a.length > b.length
		  	    var a, b;
		  	    if (this.length > num.length) {
		  	      a = this;
		  	      b = num;
		  	    } else {
		  	      a = num;
		  	      b = this;
		  	    }

		  	    var carry = 0;
		  	    for (var i = 0; i < b.length; i++) {
		  	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		  	      this.words[i] = r & 0x3ffffff;
		  	      carry = r >>> 26;
		  	    }
		  	    for (; carry !== 0 && i < a.length; i++) {
		  	      r = (a.words[i] | 0) + carry;
		  	      this.words[i] = r & 0x3ffffff;
		  	      carry = r >>> 26;
		  	    }

		  	    this.length = a.length;
		  	    if (carry !== 0) {
		  	      this.words[this.length] = carry;
		  	      this.length++;
		  	    // Copy the rest of the words
		  	    } else if (a !== this) {
		  	      for (; i < a.length; i++) {
		  	        this.words[i] = a.words[i];
		  	      }
		  	    }

		  	    return this;
		  	  };

		  	  // Add `num` to `this`
		  	  BN.prototype.add = function add (num) {
		  	    var res;
		  	    if (num.negative !== 0 && this.negative === 0) {
		  	      num.negative = 0;
		  	      res = this.sub(num);
		  	      num.negative ^= 1;
		  	      return res;
		  	    } else if (num.negative === 0 && this.negative !== 0) {
		  	      this.negative = 0;
		  	      res = num.sub(this);
		  	      this.negative = 1;
		  	      return res;
		  	    }

		  	    if (this.length > num.length) return this.clone().iadd(num);

		  	    return num.clone().iadd(this);
		  	  };

		  	  // Subtract `num` from `this` in-place
		  	  BN.prototype.isub = function isub (num) {
		  	    // this - (-num) = this + num
		  	    if (num.negative !== 0) {
		  	      num.negative = 0;
		  	      var r = this.iadd(num);
		  	      num.negative = 1;
		  	      return r._normSign();

		  	    // -this - num = -(this + num)
		  	    } else if (this.negative !== 0) {
		  	      this.negative = 0;
		  	      this.iadd(num);
		  	      this.negative = 1;
		  	      return this._normSign();
		  	    }

		  	    // At this point both numbers are positive
		  	    var cmp = this.cmp(num);

		  	    // Optimization - zeroify
		  	    if (cmp === 0) {
		  	      this.negative = 0;
		  	      this.length = 1;
		  	      this.words[0] = 0;
		  	      return this;
		  	    }

		  	    // a > b
		  	    var a, b;
		  	    if (cmp > 0) {
		  	      a = this;
		  	      b = num;
		  	    } else {
		  	      a = num;
		  	      b = this;
		  	    }

		  	    var carry = 0;
		  	    for (var i = 0; i < b.length; i++) {
		  	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		  	      carry = r >> 26;
		  	      this.words[i] = r & 0x3ffffff;
		  	    }
		  	    for (; carry !== 0 && i < a.length; i++) {
		  	      r = (a.words[i] | 0) + carry;
		  	      carry = r >> 26;
		  	      this.words[i] = r & 0x3ffffff;
		  	    }

		  	    // Copy rest of the words
		  	    if (carry === 0 && i < a.length && a !== this) {
		  	      for (; i < a.length; i++) {
		  	        this.words[i] = a.words[i];
		  	      }
		  	    }

		  	    this.length = Math.max(this.length, i);

		  	    if (a !== this) {
		  	      this.negative = 1;
		  	    }

		  	    return this.strip();
		  	  };

		  	  // Subtract `num` from `this`
		  	  BN.prototype.sub = function sub (num) {
		  	    return this.clone().isub(num);
		  	  };

		  	  function smallMulTo (self, num, out) {
		  	    out.negative = num.negative ^ self.negative;
		  	    var len = (self.length + num.length) | 0;
		  	    out.length = len;
		  	    len = (len - 1) | 0;

		  	    // Peel one iteration (compiler can't do it, because of code complexity)
		  	    var a = self.words[0] | 0;
		  	    var b = num.words[0] | 0;
		  	    var r = a * b;

		  	    var lo = r & 0x3ffffff;
		  	    var carry = (r / 0x4000000) | 0;
		  	    out.words[0] = lo;

		  	    for (var k = 1; k < len; k++) {
		  	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  	      // note that ncarry could be >= 0x3ffffff
		  	      var ncarry = carry >>> 26;
		  	      var rword = carry & 0x3ffffff;
		  	      var maxJ = Math.min(k, num.length - 1);
		  	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		  	        var i = (k - j) | 0;
		  	        a = self.words[i] | 0;
		  	        b = num.words[j] | 0;
		  	        r = a * b + rword;
		  	        ncarry += (r / 0x4000000) | 0;
		  	        rword = r & 0x3ffffff;
		  	      }
		  	      out.words[k] = rword | 0;
		  	      carry = ncarry | 0;
		  	    }
		  	    if (carry !== 0) {
		  	      out.words[k] = carry | 0;
		  	    } else {
		  	      out.length--;
		  	    }

		  	    return out.strip();
		  	  }

		  	  // TODO(indutny): it may be reasonable to omit it for users who don't need
		  	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
		  	  // multiplication (like elliptic secp256k1).
		  	  var comb10MulTo = function comb10MulTo (self, num, out) {
		  	    var a = self.words;
		  	    var b = num.words;
		  	    var o = out.words;
		  	    var c = 0;
		  	    var lo;
		  	    var mid;
		  	    var hi;
		  	    var a0 = a[0] | 0;
		  	    var al0 = a0 & 0x1fff;
		  	    var ah0 = a0 >>> 13;
		  	    var a1 = a[1] | 0;
		  	    var al1 = a1 & 0x1fff;
		  	    var ah1 = a1 >>> 13;
		  	    var a2 = a[2] | 0;
		  	    var al2 = a2 & 0x1fff;
		  	    var ah2 = a2 >>> 13;
		  	    var a3 = a[3] | 0;
		  	    var al3 = a3 & 0x1fff;
		  	    var ah3 = a3 >>> 13;
		  	    var a4 = a[4] | 0;
		  	    var al4 = a4 & 0x1fff;
		  	    var ah4 = a4 >>> 13;
		  	    var a5 = a[5] | 0;
		  	    var al5 = a5 & 0x1fff;
		  	    var ah5 = a5 >>> 13;
		  	    var a6 = a[6] | 0;
		  	    var al6 = a6 & 0x1fff;
		  	    var ah6 = a6 >>> 13;
		  	    var a7 = a[7] | 0;
		  	    var al7 = a7 & 0x1fff;
		  	    var ah7 = a7 >>> 13;
		  	    var a8 = a[8] | 0;
		  	    var al8 = a8 & 0x1fff;
		  	    var ah8 = a8 >>> 13;
		  	    var a9 = a[9] | 0;
		  	    var al9 = a9 & 0x1fff;
		  	    var ah9 = a9 >>> 13;
		  	    var b0 = b[0] | 0;
		  	    var bl0 = b0 & 0x1fff;
		  	    var bh0 = b0 >>> 13;
		  	    var b1 = b[1] | 0;
		  	    var bl1 = b1 & 0x1fff;
		  	    var bh1 = b1 >>> 13;
		  	    var b2 = b[2] | 0;
		  	    var bl2 = b2 & 0x1fff;
		  	    var bh2 = b2 >>> 13;
		  	    var b3 = b[3] | 0;
		  	    var bl3 = b3 & 0x1fff;
		  	    var bh3 = b3 >>> 13;
		  	    var b4 = b[4] | 0;
		  	    var bl4 = b4 & 0x1fff;
		  	    var bh4 = b4 >>> 13;
		  	    var b5 = b[5] | 0;
		  	    var bl5 = b5 & 0x1fff;
		  	    var bh5 = b5 >>> 13;
		  	    var b6 = b[6] | 0;
		  	    var bl6 = b6 & 0x1fff;
		  	    var bh6 = b6 >>> 13;
		  	    var b7 = b[7] | 0;
		  	    var bl7 = b7 & 0x1fff;
		  	    var bh7 = b7 >>> 13;
		  	    var b8 = b[8] | 0;
		  	    var bl8 = b8 & 0x1fff;
		  	    var bh8 = b8 >>> 13;
		  	    var b9 = b[9] | 0;
		  	    var bl9 = b9 & 0x1fff;
		  	    var bh9 = b9 >>> 13;

		  	    out.negative = self.negative ^ num.negative;
		  	    out.length = 19;
		  	    /* k = 0 */
		  	    lo = Math.imul(al0, bl0);
		  	    mid = Math.imul(al0, bh0);
		  	    mid = (mid + Math.imul(ah0, bl0)) | 0;
		  	    hi = Math.imul(ah0, bh0);
		  	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		  	    w0 &= 0x3ffffff;
		  	    /* k = 1 */
		  	    lo = Math.imul(al1, bl0);
		  	    mid = Math.imul(al1, bh0);
		  	    mid = (mid + Math.imul(ah1, bl0)) | 0;
		  	    hi = Math.imul(ah1, bh0);
		  	    lo = (lo + Math.imul(al0, bl1)) | 0;
		  	    mid = (mid + Math.imul(al0, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh1)) | 0;
		  	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		  	    w1 &= 0x3ffffff;
		  	    /* k = 2 */
		  	    lo = Math.imul(al2, bl0);
		  	    mid = Math.imul(al2, bh0);
		  	    mid = (mid + Math.imul(ah2, bl0)) | 0;
		  	    hi = Math.imul(ah2, bh0);
		  	    lo = (lo + Math.imul(al1, bl1)) | 0;
		  	    mid = (mid + Math.imul(al1, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh1)) | 0;
		  	    lo = (lo + Math.imul(al0, bl2)) | 0;
		  	    mid = (mid + Math.imul(al0, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh2)) | 0;
		  	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		  	    w2 &= 0x3ffffff;
		  	    /* k = 3 */
		  	    lo = Math.imul(al3, bl0);
		  	    mid = Math.imul(al3, bh0);
		  	    mid = (mid + Math.imul(ah3, bl0)) | 0;
		  	    hi = Math.imul(ah3, bh0);
		  	    lo = (lo + Math.imul(al2, bl1)) | 0;
		  	    mid = (mid + Math.imul(al2, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh1)) | 0;
		  	    lo = (lo + Math.imul(al1, bl2)) | 0;
		  	    mid = (mid + Math.imul(al1, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh2)) | 0;
		  	    lo = (lo + Math.imul(al0, bl3)) | 0;
		  	    mid = (mid + Math.imul(al0, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh3)) | 0;
		  	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		  	    w3 &= 0x3ffffff;
		  	    /* k = 4 */
		  	    lo = Math.imul(al4, bl0);
		  	    mid = Math.imul(al4, bh0);
		  	    mid = (mid + Math.imul(ah4, bl0)) | 0;
		  	    hi = Math.imul(ah4, bh0);
		  	    lo = (lo + Math.imul(al3, bl1)) | 0;
		  	    mid = (mid + Math.imul(al3, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh1)) | 0;
		  	    lo = (lo + Math.imul(al2, bl2)) | 0;
		  	    mid = (mid + Math.imul(al2, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh2)) | 0;
		  	    lo = (lo + Math.imul(al1, bl3)) | 0;
		  	    mid = (mid + Math.imul(al1, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh3)) | 0;
		  	    lo = (lo + Math.imul(al0, bl4)) | 0;
		  	    mid = (mid + Math.imul(al0, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh4)) | 0;
		  	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		  	    w4 &= 0x3ffffff;
		  	    /* k = 5 */
		  	    lo = Math.imul(al5, bl0);
		  	    mid = Math.imul(al5, bh0);
		  	    mid = (mid + Math.imul(ah5, bl0)) | 0;
		  	    hi = Math.imul(ah5, bh0);
		  	    lo = (lo + Math.imul(al4, bl1)) | 0;
		  	    mid = (mid + Math.imul(al4, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh1)) | 0;
		  	    lo = (lo + Math.imul(al3, bl2)) | 0;
		  	    mid = (mid + Math.imul(al3, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh2)) | 0;
		  	    lo = (lo + Math.imul(al2, bl3)) | 0;
		  	    mid = (mid + Math.imul(al2, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh3)) | 0;
		  	    lo = (lo + Math.imul(al1, bl4)) | 0;
		  	    mid = (mid + Math.imul(al1, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh4)) | 0;
		  	    lo = (lo + Math.imul(al0, bl5)) | 0;
		  	    mid = (mid + Math.imul(al0, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh5)) | 0;
		  	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		  	    w5 &= 0x3ffffff;
		  	    /* k = 6 */
		  	    lo = Math.imul(al6, bl0);
		  	    mid = Math.imul(al6, bh0);
		  	    mid = (mid + Math.imul(ah6, bl0)) | 0;
		  	    hi = Math.imul(ah6, bh0);
		  	    lo = (lo + Math.imul(al5, bl1)) | 0;
		  	    mid = (mid + Math.imul(al5, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh1)) | 0;
		  	    lo = (lo + Math.imul(al4, bl2)) | 0;
		  	    mid = (mid + Math.imul(al4, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh2)) | 0;
		  	    lo = (lo + Math.imul(al3, bl3)) | 0;
		  	    mid = (mid + Math.imul(al3, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh3)) | 0;
		  	    lo = (lo + Math.imul(al2, bl4)) | 0;
		  	    mid = (mid + Math.imul(al2, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh4)) | 0;
		  	    lo = (lo + Math.imul(al1, bl5)) | 0;
		  	    mid = (mid + Math.imul(al1, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh5)) | 0;
		  	    lo = (lo + Math.imul(al0, bl6)) | 0;
		  	    mid = (mid + Math.imul(al0, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh6)) | 0;
		  	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		  	    w6 &= 0x3ffffff;
		  	    /* k = 7 */
		  	    lo = Math.imul(al7, bl0);
		  	    mid = Math.imul(al7, bh0);
		  	    mid = (mid + Math.imul(ah7, bl0)) | 0;
		  	    hi = Math.imul(ah7, bh0);
		  	    lo = (lo + Math.imul(al6, bl1)) | 0;
		  	    mid = (mid + Math.imul(al6, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh1)) | 0;
		  	    lo = (lo + Math.imul(al5, bl2)) | 0;
		  	    mid = (mid + Math.imul(al5, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh2)) | 0;
		  	    lo = (lo + Math.imul(al4, bl3)) | 0;
		  	    mid = (mid + Math.imul(al4, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh3)) | 0;
		  	    lo = (lo + Math.imul(al3, bl4)) | 0;
		  	    mid = (mid + Math.imul(al3, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh4)) | 0;
		  	    lo = (lo + Math.imul(al2, bl5)) | 0;
		  	    mid = (mid + Math.imul(al2, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh5)) | 0;
		  	    lo = (lo + Math.imul(al1, bl6)) | 0;
		  	    mid = (mid + Math.imul(al1, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh6)) | 0;
		  	    lo = (lo + Math.imul(al0, bl7)) | 0;
		  	    mid = (mid + Math.imul(al0, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh7)) | 0;
		  	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		  	    w7 &= 0x3ffffff;
		  	    /* k = 8 */
		  	    lo = Math.imul(al8, bl0);
		  	    mid = Math.imul(al8, bh0);
		  	    mid = (mid + Math.imul(ah8, bl0)) | 0;
		  	    hi = Math.imul(ah8, bh0);
		  	    lo = (lo + Math.imul(al7, bl1)) | 0;
		  	    mid = (mid + Math.imul(al7, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh1)) | 0;
		  	    lo = (lo + Math.imul(al6, bl2)) | 0;
		  	    mid = (mid + Math.imul(al6, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh2)) | 0;
		  	    lo = (lo + Math.imul(al5, bl3)) | 0;
		  	    mid = (mid + Math.imul(al5, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh3)) | 0;
		  	    lo = (lo + Math.imul(al4, bl4)) | 0;
		  	    mid = (mid + Math.imul(al4, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh4)) | 0;
		  	    lo = (lo + Math.imul(al3, bl5)) | 0;
		  	    mid = (mid + Math.imul(al3, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh5)) | 0;
		  	    lo = (lo + Math.imul(al2, bl6)) | 0;
		  	    mid = (mid + Math.imul(al2, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh6)) | 0;
		  	    lo = (lo + Math.imul(al1, bl7)) | 0;
		  	    mid = (mid + Math.imul(al1, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh7)) | 0;
		  	    lo = (lo + Math.imul(al0, bl8)) | 0;
		  	    mid = (mid + Math.imul(al0, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh8)) | 0;
		  	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		  	    w8 &= 0x3ffffff;
		  	    /* k = 9 */
		  	    lo = Math.imul(al9, bl0);
		  	    mid = Math.imul(al9, bh0);
		  	    mid = (mid + Math.imul(ah9, bl0)) | 0;
		  	    hi = Math.imul(ah9, bh0);
		  	    lo = (lo + Math.imul(al8, bl1)) | 0;
		  	    mid = (mid + Math.imul(al8, bh1)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl1)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh1)) | 0;
		  	    lo = (lo + Math.imul(al7, bl2)) | 0;
		  	    mid = (mid + Math.imul(al7, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh2)) | 0;
		  	    lo = (lo + Math.imul(al6, bl3)) | 0;
		  	    mid = (mid + Math.imul(al6, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh3)) | 0;
		  	    lo = (lo + Math.imul(al5, bl4)) | 0;
		  	    mid = (mid + Math.imul(al5, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh4)) | 0;
		  	    lo = (lo + Math.imul(al4, bl5)) | 0;
		  	    mid = (mid + Math.imul(al4, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh5)) | 0;
		  	    lo = (lo + Math.imul(al3, bl6)) | 0;
		  	    mid = (mid + Math.imul(al3, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh6)) | 0;
		  	    lo = (lo + Math.imul(al2, bl7)) | 0;
		  	    mid = (mid + Math.imul(al2, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh7)) | 0;
		  	    lo = (lo + Math.imul(al1, bl8)) | 0;
		  	    mid = (mid + Math.imul(al1, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh8)) | 0;
		  	    lo = (lo + Math.imul(al0, bl9)) | 0;
		  	    mid = (mid + Math.imul(al0, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah0, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah0, bh9)) | 0;
		  	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		  	    w9 &= 0x3ffffff;
		  	    /* k = 10 */
		  	    lo = Math.imul(al9, bl1);
		  	    mid = Math.imul(al9, bh1);
		  	    mid = (mid + Math.imul(ah9, bl1)) | 0;
		  	    hi = Math.imul(ah9, bh1);
		  	    lo = (lo + Math.imul(al8, bl2)) | 0;
		  	    mid = (mid + Math.imul(al8, bh2)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl2)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh2)) | 0;
		  	    lo = (lo + Math.imul(al7, bl3)) | 0;
		  	    mid = (mid + Math.imul(al7, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh3)) | 0;
		  	    lo = (lo + Math.imul(al6, bl4)) | 0;
		  	    mid = (mid + Math.imul(al6, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh4)) | 0;
		  	    lo = (lo + Math.imul(al5, bl5)) | 0;
		  	    mid = (mid + Math.imul(al5, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh5)) | 0;
		  	    lo = (lo + Math.imul(al4, bl6)) | 0;
		  	    mid = (mid + Math.imul(al4, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh6)) | 0;
		  	    lo = (lo + Math.imul(al3, bl7)) | 0;
		  	    mid = (mid + Math.imul(al3, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh7)) | 0;
		  	    lo = (lo + Math.imul(al2, bl8)) | 0;
		  	    mid = (mid + Math.imul(al2, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh8)) | 0;
		  	    lo = (lo + Math.imul(al1, bl9)) | 0;
		  	    mid = (mid + Math.imul(al1, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah1, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah1, bh9)) | 0;
		  	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		  	    w10 &= 0x3ffffff;
		  	    /* k = 11 */
		  	    lo = Math.imul(al9, bl2);
		  	    mid = Math.imul(al9, bh2);
		  	    mid = (mid + Math.imul(ah9, bl2)) | 0;
		  	    hi = Math.imul(ah9, bh2);
		  	    lo = (lo + Math.imul(al8, bl3)) | 0;
		  	    mid = (mid + Math.imul(al8, bh3)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl3)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh3)) | 0;
		  	    lo = (lo + Math.imul(al7, bl4)) | 0;
		  	    mid = (mid + Math.imul(al7, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh4)) | 0;
		  	    lo = (lo + Math.imul(al6, bl5)) | 0;
		  	    mid = (mid + Math.imul(al6, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh5)) | 0;
		  	    lo = (lo + Math.imul(al5, bl6)) | 0;
		  	    mid = (mid + Math.imul(al5, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh6)) | 0;
		  	    lo = (lo + Math.imul(al4, bl7)) | 0;
		  	    mid = (mid + Math.imul(al4, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh7)) | 0;
		  	    lo = (lo + Math.imul(al3, bl8)) | 0;
		  	    mid = (mid + Math.imul(al3, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh8)) | 0;
		  	    lo = (lo + Math.imul(al2, bl9)) | 0;
		  	    mid = (mid + Math.imul(al2, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah2, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah2, bh9)) | 0;
		  	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		  	    w11 &= 0x3ffffff;
		  	    /* k = 12 */
		  	    lo = Math.imul(al9, bl3);
		  	    mid = Math.imul(al9, bh3);
		  	    mid = (mid + Math.imul(ah9, bl3)) | 0;
		  	    hi = Math.imul(ah9, bh3);
		  	    lo = (lo + Math.imul(al8, bl4)) | 0;
		  	    mid = (mid + Math.imul(al8, bh4)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl4)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh4)) | 0;
		  	    lo = (lo + Math.imul(al7, bl5)) | 0;
		  	    mid = (mid + Math.imul(al7, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh5)) | 0;
		  	    lo = (lo + Math.imul(al6, bl6)) | 0;
		  	    mid = (mid + Math.imul(al6, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh6)) | 0;
		  	    lo = (lo + Math.imul(al5, bl7)) | 0;
		  	    mid = (mid + Math.imul(al5, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh7)) | 0;
		  	    lo = (lo + Math.imul(al4, bl8)) | 0;
		  	    mid = (mid + Math.imul(al4, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh8)) | 0;
		  	    lo = (lo + Math.imul(al3, bl9)) | 0;
		  	    mid = (mid + Math.imul(al3, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah3, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah3, bh9)) | 0;
		  	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		  	    w12 &= 0x3ffffff;
		  	    /* k = 13 */
		  	    lo = Math.imul(al9, bl4);
		  	    mid = Math.imul(al9, bh4);
		  	    mid = (mid + Math.imul(ah9, bl4)) | 0;
		  	    hi = Math.imul(ah9, bh4);
		  	    lo = (lo + Math.imul(al8, bl5)) | 0;
		  	    mid = (mid + Math.imul(al8, bh5)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl5)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh5)) | 0;
		  	    lo = (lo + Math.imul(al7, bl6)) | 0;
		  	    mid = (mid + Math.imul(al7, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh6)) | 0;
		  	    lo = (lo + Math.imul(al6, bl7)) | 0;
		  	    mid = (mid + Math.imul(al6, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh7)) | 0;
		  	    lo = (lo + Math.imul(al5, bl8)) | 0;
		  	    mid = (mid + Math.imul(al5, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh8)) | 0;
		  	    lo = (lo + Math.imul(al4, bl9)) | 0;
		  	    mid = (mid + Math.imul(al4, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah4, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah4, bh9)) | 0;
		  	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		  	    w13 &= 0x3ffffff;
		  	    /* k = 14 */
		  	    lo = Math.imul(al9, bl5);
		  	    mid = Math.imul(al9, bh5);
		  	    mid = (mid + Math.imul(ah9, bl5)) | 0;
		  	    hi = Math.imul(ah9, bh5);
		  	    lo = (lo + Math.imul(al8, bl6)) | 0;
		  	    mid = (mid + Math.imul(al8, bh6)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl6)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh6)) | 0;
		  	    lo = (lo + Math.imul(al7, bl7)) | 0;
		  	    mid = (mid + Math.imul(al7, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh7)) | 0;
		  	    lo = (lo + Math.imul(al6, bl8)) | 0;
		  	    mid = (mid + Math.imul(al6, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh8)) | 0;
		  	    lo = (lo + Math.imul(al5, bl9)) | 0;
		  	    mid = (mid + Math.imul(al5, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah5, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah5, bh9)) | 0;
		  	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		  	    w14 &= 0x3ffffff;
		  	    /* k = 15 */
		  	    lo = Math.imul(al9, bl6);
		  	    mid = Math.imul(al9, bh6);
		  	    mid = (mid + Math.imul(ah9, bl6)) | 0;
		  	    hi = Math.imul(ah9, bh6);
		  	    lo = (lo + Math.imul(al8, bl7)) | 0;
		  	    mid = (mid + Math.imul(al8, bh7)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl7)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh7)) | 0;
		  	    lo = (lo + Math.imul(al7, bl8)) | 0;
		  	    mid = (mid + Math.imul(al7, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh8)) | 0;
		  	    lo = (lo + Math.imul(al6, bl9)) | 0;
		  	    mid = (mid + Math.imul(al6, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah6, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah6, bh9)) | 0;
		  	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		  	    w15 &= 0x3ffffff;
		  	    /* k = 16 */
		  	    lo = Math.imul(al9, bl7);
		  	    mid = Math.imul(al9, bh7);
		  	    mid = (mid + Math.imul(ah9, bl7)) | 0;
		  	    hi = Math.imul(ah9, bh7);
		  	    lo = (lo + Math.imul(al8, bl8)) | 0;
		  	    mid = (mid + Math.imul(al8, bh8)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl8)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh8)) | 0;
		  	    lo = (lo + Math.imul(al7, bl9)) | 0;
		  	    mid = (mid + Math.imul(al7, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah7, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah7, bh9)) | 0;
		  	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		  	    w16 &= 0x3ffffff;
		  	    /* k = 17 */
		  	    lo = Math.imul(al9, bl8);
		  	    mid = Math.imul(al9, bh8);
		  	    mid = (mid + Math.imul(ah9, bl8)) | 0;
		  	    hi = Math.imul(ah9, bh8);
		  	    lo = (lo + Math.imul(al8, bl9)) | 0;
		  	    mid = (mid + Math.imul(al8, bh9)) | 0;
		  	    mid = (mid + Math.imul(ah8, bl9)) | 0;
		  	    hi = (hi + Math.imul(ah8, bh9)) | 0;
		  	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		  	    w17 &= 0x3ffffff;
		  	    /* k = 18 */
		  	    lo = Math.imul(al9, bl9);
		  	    mid = Math.imul(al9, bh9);
		  	    mid = (mid + Math.imul(ah9, bl9)) | 0;
		  	    hi = Math.imul(ah9, bh9);
		  	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		  	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		  	    w18 &= 0x3ffffff;
		  	    o[0] = w0;
		  	    o[1] = w1;
		  	    o[2] = w2;
		  	    o[3] = w3;
		  	    o[4] = w4;
		  	    o[5] = w5;
		  	    o[6] = w6;
		  	    o[7] = w7;
		  	    o[8] = w8;
		  	    o[9] = w9;
		  	    o[10] = w10;
		  	    o[11] = w11;
		  	    o[12] = w12;
		  	    o[13] = w13;
		  	    o[14] = w14;
		  	    o[15] = w15;
		  	    o[16] = w16;
		  	    o[17] = w17;
		  	    o[18] = w18;
		  	    if (c !== 0) {
		  	      o[19] = c;
		  	      out.length++;
		  	    }
		  	    return out;
		  	  };

		  	  // Polyfill comb
		  	  if (!Math.imul) {
		  	    comb10MulTo = smallMulTo;
		  	  }

		  	  function bigMulTo (self, num, out) {
		  	    out.negative = num.negative ^ self.negative;
		  	    out.length = self.length + num.length;

		  	    var carry = 0;
		  	    var hncarry = 0;
		  	    for (var k = 0; k < out.length - 1; k++) {
		  	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  	      // note that ncarry could be >= 0x3ffffff
		  	      var ncarry = hncarry;
		  	      hncarry = 0;
		  	      var rword = carry & 0x3ffffff;
		  	      var maxJ = Math.min(k, num.length - 1);
		  	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
		  	        var i = k - j;
		  	        var a = self.words[i] | 0;
		  	        var b = num.words[j] | 0;
		  	        var r = a * b;

		  	        var lo = r & 0x3ffffff;
		  	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
		  	        lo = (lo + rword) | 0;
		  	        rword = lo & 0x3ffffff;
		  	        ncarry = (ncarry + (lo >>> 26)) | 0;

		  	        hncarry += ncarry >>> 26;
		  	        ncarry &= 0x3ffffff;
		  	      }
		  	      out.words[k] = rword;
		  	      carry = ncarry;
		  	      ncarry = hncarry;
		  	    }
		  	    if (carry !== 0) {
		  	      out.words[k] = carry;
		  	    } else {
		  	      out.length--;
		  	    }

		  	    return out.strip();
		  	  }

		  	  function jumboMulTo (self, num, out) {
		  	    var fftm = new FFTM();
		  	    return fftm.mulp(self, num, out);
		  	  }

		  	  BN.prototype.mulTo = function mulTo (num, out) {
		  	    var res;
		  	    var len = this.length + num.length;
		  	    if (this.length === 10 && num.length === 10) {
		  	      res = comb10MulTo(this, num, out);
		  	    } else if (len < 63) {
		  	      res = smallMulTo(this, num, out);
		  	    } else if (len < 1024) {
		  	      res = bigMulTo(this, num, out);
		  	    } else {
		  	      res = jumboMulTo(this, num, out);
		  	    }

		  	    return res;
		  	  };

		  	  // Cooley-Tukey algorithm for FFT
		  	  // slightly revisited to rely on looping instead of recursion

		  	  function FFTM (x, y) {
		  	    this.x = x;
		  	    this.y = y;
		  	  }

		  	  FFTM.prototype.makeRBT = function makeRBT (N) {
		  	    var t = new Array(N);
		  	    var l = BN.prototype._countBits(N) - 1;
		  	    for (var i = 0; i < N; i++) {
		  	      t[i] = this.revBin(i, l, N);
		  	    }

		  	    return t;
		  	  };

		  	  // Returns binary-reversed representation of `x`
		  	  FFTM.prototype.revBin = function revBin (x, l, N) {
		  	    if (x === 0 || x === N - 1) return x;

		  	    var rb = 0;
		  	    for (var i = 0; i < l; i++) {
		  	      rb |= (x & 1) << (l - i - 1);
		  	      x >>= 1;
		  	    }

		  	    return rb;
		  	  };

		  	  // Performs "tweedling" phase, therefore 'emulating'
		  	  // behaviour of the recursive algorithm
		  	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		  	    for (var i = 0; i < N; i++) {
		  	      rtws[i] = rws[rbt[i]];
		  	      itws[i] = iws[rbt[i]];
		  	    }
		  	  };

		  	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		  	    this.permute(rbt, rws, iws, rtws, itws, N);

		  	    for (var s = 1; s < N; s <<= 1) {
		  	      var l = s << 1;

		  	      var rtwdf = Math.cos(2 * Math.PI / l);
		  	      var itwdf = Math.sin(2 * Math.PI / l);

		  	      for (var p = 0; p < N; p += l) {
		  	        var rtwdf_ = rtwdf;
		  	        var itwdf_ = itwdf;

		  	        for (var j = 0; j < s; j++) {
		  	          var re = rtws[p + j];
		  	          var ie = itws[p + j];

		  	          var ro = rtws[p + j + s];
		  	          var io = itws[p + j + s];

		  	          var rx = rtwdf_ * ro - itwdf_ * io;

		  	          io = rtwdf_ * io + itwdf_ * ro;
		  	          ro = rx;

		  	          rtws[p + j] = re + ro;
		  	          itws[p + j] = ie + io;

		  	          rtws[p + j + s] = re - ro;
		  	          itws[p + j + s] = ie - io;

		  	          /* jshint maxdepth : false */
		  	          if (j !== l) {
		  	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

		  	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
		  	            rtwdf_ = rx;
		  	          }
		  	        }
		  	      }
		  	    }
		  	  };

		  	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		  	    var N = Math.max(m, n) | 1;
		  	    var odd = N & 1;
		  	    var i = 0;
		  	    for (N = N / 2 | 0; N; N = N >>> 1) {
		  	      i++;
		  	    }

		  	    return 1 << i + 1 + odd;
		  	  };

		  	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		  	    if (N <= 1) return;

		  	    for (var i = 0; i < N / 2; i++) {
		  	      var t = rws[i];

		  	      rws[i] = rws[N - i - 1];
		  	      rws[N - i - 1] = t;

		  	      t = iws[i];

		  	      iws[i] = -iws[N - i - 1];
		  	      iws[N - i - 1] = -t;
		  	    }
		  	  };

		  	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		  	    var carry = 0;
		  	    for (var i = 0; i < N / 2; i++) {
		  	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
		  	        Math.round(ws[2 * i] / N) +
		  	        carry;

		  	      ws[i] = w & 0x3ffffff;

		  	      if (w < 0x4000000) {
		  	        carry = 0;
		  	      } else {
		  	        carry = w / 0x4000000 | 0;
		  	      }
		  	    }

		  	    return ws;
		  	  };

		  	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		  	    var carry = 0;
		  	    for (var i = 0; i < len; i++) {
		  	      carry = carry + (ws[i] | 0);

		  	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		  	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		  	    }

		  	    // Pad with zeroes
		  	    for (i = 2 * len; i < N; ++i) {
		  	      rws[i] = 0;
		  	    }

		  	    assert(carry === 0);
		  	    assert((carry & ~0x1fff) === 0);
		  	  };

		  	  FFTM.prototype.stub = function stub (N) {
		  	    var ph = new Array(N);
		  	    for (var i = 0; i < N; i++) {
		  	      ph[i] = 0;
		  	    }

		  	    return ph;
		  	  };

		  	  FFTM.prototype.mulp = function mulp (x, y, out) {
		  	    var N = 2 * this.guessLen13b(x.length, y.length);

		  	    var rbt = this.makeRBT(N);

		  	    var _ = this.stub(N);

		  	    var rws = new Array(N);
		  	    var rwst = new Array(N);
		  	    var iwst = new Array(N);

		  	    var nrws = new Array(N);
		  	    var nrwst = new Array(N);
		  	    var niwst = new Array(N);

		  	    var rmws = out.words;
		  	    rmws.length = N;

		  	    this.convert13b(x.words, x.length, rws, N);
		  	    this.convert13b(y.words, y.length, nrws, N);

		  	    this.transform(rws, _, rwst, iwst, N, rbt);
		  	    this.transform(nrws, _, nrwst, niwst, N, rbt);

		  	    for (var i = 0; i < N; i++) {
		  	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		  	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		  	      rwst[i] = rx;
		  	    }

		  	    this.conjugate(rwst, iwst, N);
		  	    this.transform(rwst, iwst, rmws, _, N, rbt);
		  	    this.conjugate(rmws, _, N);
		  	    this.normalize13b(rmws, N);

		  	    out.negative = x.negative ^ y.negative;
		  	    out.length = x.length + y.length;
		  	    return out.strip();
		  	  };

		  	  // Multiply `this` by `num`
		  	  BN.prototype.mul = function mul (num) {
		  	    var out = new BN(null);
		  	    out.words = new Array(this.length + num.length);
		  	    return this.mulTo(num, out);
		  	  };

		  	  // Multiply employing FFT
		  	  BN.prototype.mulf = function mulf (num) {
		  	    var out = new BN(null);
		  	    out.words = new Array(this.length + num.length);
		  	    return jumboMulTo(this, num, out);
		  	  };

		  	  // In-place Multiplication
		  	  BN.prototype.imul = function imul (num) {
		  	    return this.clone().mulTo(num, this);
		  	  };

		  	  BN.prototype.imuln = function imuln (num) {
		  	    assert(typeof num === 'number');
		  	    assert(num < 0x4000000);

		  	    // Carry
		  	    var carry = 0;
		  	    for (var i = 0; i < this.length; i++) {
		  	      var w = (this.words[i] | 0) * num;
		  	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		  	      carry >>= 26;
		  	      carry += (w / 0x4000000) | 0;
		  	      // NOTE: lo is 27bit maximum
		  	      carry += lo >>> 26;
		  	      this.words[i] = lo & 0x3ffffff;
		  	    }

		  	    if (carry !== 0) {
		  	      this.words[i] = carry;
		  	      this.length++;
		  	    }

		  	    return this;
		  	  };

		  	  BN.prototype.muln = function muln (num) {
		  	    return this.clone().imuln(num);
		  	  };

		  	  // `this` * `this`
		  	  BN.prototype.sqr = function sqr () {
		  	    return this.mul(this);
		  	  };

		  	  // `this` * `this` in-place
		  	  BN.prototype.isqr = function isqr () {
		  	    return this.imul(this.clone());
		  	  };

		  	  // Math.pow(`this`, `num`)
		  	  BN.prototype.pow = function pow (num) {
		  	    var w = toBitArray(num);
		  	    if (w.length === 0) return new BN(1);

		  	    // Skip leading zeroes
		  	    var res = this;
		  	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
		  	      if (w[i] !== 0) break;
		  	    }

		  	    if (++i < w.length) {
		  	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
		  	        if (w[i] === 0) continue;

		  	        res = res.mul(q);
		  	      }
		  	    }

		  	    return res;
		  	  };

		  	  // Shift-left in-place
		  	  BN.prototype.iushln = function iushln (bits) {
		  	    assert(typeof bits === 'number' && bits >= 0);
		  	    var r = bits % 26;
		  	    var s = (bits - r) / 26;
		  	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		  	    var i;

		  	    if (r !== 0) {
		  	      var carry = 0;

		  	      for (i = 0; i < this.length; i++) {
		  	        var newCarry = this.words[i] & carryMask;
		  	        var c = ((this.words[i] | 0) - newCarry) << r;
		  	        this.words[i] = c | carry;
		  	        carry = newCarry >>> (26 - r);
		  	      }

		  	      if (carry) {
		  	        this.words[i] = carry;
		  	        this.length++;
		  	      }
		  	    }

		  	    if (s !== 0) {
		  	      for (i = this.length - 1; i >= 0; i--) {
		  	        this.words[i + s] = this.words[i];
		  	      }

		  	      for (i = 0; i < s; i++) {
		  	        this.words[i] = 0;
		  	      }

		  	      this.length += s;
		  	    }

		  	    return this.strip();
		  	  };

		  	  BN.prototype.ishln = function ishln (bits) {
		  	    // TODO(indutny): implement me
		  	    assert(this.negative === 0);
		  	    return this.iushln(bits);
		  	  };

		  	  // Shift-right in-place
		  	  // NOTE: `hint` is a lowest bit before trailing zeroes
		  	  // NOTE: if `extended` is present - it will be filled with destroyed bits
		  	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		  	    assert(typeof bits === 'number' && bits >= 0);
		  	    var h;
		  	    if (hint) {
		  	      h = (hint - (hint % 26)) / 26;
		  	    } else {
		  	      h = 0;
		  	    }

		  	    var r = bits % 26;
		  	    var s = Math.min((bits - r) / 26, this.length);
		  	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		  	    var maskedWords = extended;

		  	    h -= s;
		  	    h = Math.max(0, h);

		  	    // Extended mode, copy masked part
		  	    if (maskedWords) {
		  	      for (var i = 0; i < s; i++) {
		  	        maskedWords.words[i] = this.words[i];
		  	      }
		  	      maskedWords.length = s;
		  	    }

		  	    if (s === 0) ; else if (this.length > s) {
		  	      this.length -= s;
		  	      for (i = 0; i < this.length; i++) {
		  	        this.words[i] = this.words[i + s];
		  	      }
		  	    } else {
		  	      this.words[0] = 0;
		  	      this.length = 1;
		  	    }

		  	    var carry = 0;
		  	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		  	      var word = this.words[i] | 0;
		  	      this.words[i] = (carry << (26 - r)) | (word >>> r);
		  	      carry = word & mask;
		  	    }

		  	    // Push carried bits as a mask
		  	    if (maskedWords && carry !== 0) {
		  	      maskedWords.words[maskedWords.length++] = carry;
		  	    }

		  	    if (this.length === 0) {
		  	      this.words[0] = 0;
		  	      this.length = 1;
		  	    }

		  	    return this.strip();
		  	  };

		  	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		  	    // TODO(indutny): implement me
		  	    assert(this.negative === 0);
		  	    return this.iushrn(bits, hint, extended);
		  	  };

		  	  // Shift-left
		  	  BN.prototype.shln = function shln (bits) {
		  	    return this.clone().ishln(bits);
		  	  };

		  	  BN.prototype.ushln = function ushln (bits) {
		  	    return this.clone().iushln(bits);
		  	  };

		  	  // Shift-right
		  	  BN.prototype.shrn = function shrn (bits) {
		  	    return this.clone().ishrn(bits);
		  	  };

		  	  BN.prototype.ushrn = function ushrn (bits) {
		  	    return this.clone().iushrn(bits);
		  	  };

		  	  // Test if n bit is set
		  	  BN.prototype.testn = function testn (bit) {
		  	    assert(typeof bit === 'number' && bit >= 0);
		  	    var r = bit % 26;
		  	    var s = (bit - r) / 26;
		  	    var q = 1 << r;

		  	    // Fast case: bit is much higher than all existing words
		  	    if (this.length <= s) return false;

		  	    // Check bit and return
		  	    var w = this.words[s];

		  	    return !!(w & q);
		  	  };

		  	  // Return only lowers bits of number (in-place)
		  	  BN.prototype.imaskn = function imaskn (bits) {
		  	    assert(typeof bits === 'number' && bits >= 0);
		  	    var r = bits % 26;
		  	    var s = (bits - r) / 26;

		  	    assert(this.negative === 0, 'imaskn works only with positive numbers');

		  	    if (this.length <= s) {
		  	      return this;
		  	    }

		  	    if (r !== 0) {
		  	      s++;
		  	    }
		  	    this.length = Math.min(s, this.length);

		  	    if (r !== 0) {
		  	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		  	      this.words[this.length - 1] &= mask;
		  	    }

		  	    return this.strip();
		  	  };

		  	  // Return only lowers bits of number
		  	  BN.prototype.maskn = function maskn (bits) {
		  	    return this.clone().imaskn(bits);
		  	  };

		  	  // Add plain number `num` to `this`
		  	  BN.prototype.iaddn = function iaddn (num) {
		  	    assert(typeof num === 'number');
		  	    assert(num < 0x4000000);
		  	    if (num < 0) return this.isubn(-num);

		  	    // Possible sign change
		  	    if (this.negative !== 0) {
		  	      if (this.length === 1 && (this.words[0] | 0) < num) {
		  	        this.words[0] = num - (this.words[0] | 0);
		  	        this.negative = 0;
		  	        return this;
		  	      }

		  	      this.negative = 0;
		  	      this.isubn(num);
		  	      this.negative = 1;
		  	      return this;
		  	    }

		  	    // Add without checks
		  	    return this._iaddn(num);
		  	  };

		  	  BN.prototype._iaddn = function _iaddn (num) {
		  	    this.words[0] += num;

		  	    // Carry
		  	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		  	      this.words[i] -= 0x4000000;
		  	      if (i === this.length - 1) {
		  	        this.words[i + 1] = 1;
		  	      } else {
		  	        this.words[i + 1]++;
		  	      }
		  	    }
		  	    this.length = Math.max(this.length, i + 1);

		  	    return this;
		  	  };

		  	  // Subtract plain number `num` from `this`
		  	  BN.prototype.isubn = function isubn (num) {
		  	    assert(typeof num === 'number');
		  	    assert(num < 0x4000000);
		  	    if (num < 0) return this.iaddn(-num);

		  	    if (this.negative !== 0) {
		  	      this.negative = 0;
		  	      this.iaddn(num);
		  	      this.negative = 1;
		  	      return this;
		  	    }

		  	    this.words[0] -= num;

		  	    if (this.length === 1 && this.words[0] < 0) {
		  	      this.words[0] = -this.words[0];
		  	      this.negative = 1;
		  	    } else {
		  	      // Carry
		  	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
		  	        this.words[i] += 0x4000000;
		  	        this.words[i + 1] -= 1;
		  	      }
		  	    }

		  	    return this.strip();
		  	  };

		  	  BN.prototype.addn = function addn (num) {
		  	    return this.clone().iaddn(num);
		  	  };

		  	  BN.prototype.subn = function subn (num) {
		  	    return this.clone().isubn(num);
		  	  };

		  	  BN.prototype.iabs = function iabs () {
		  	    this.negative = 0;

		  	    return this;
		  	  };

		  	  BN.prototype.abs = function abs () {
		  	    return this.clone().iabs();
		  	  };

		  	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		  	    var len = num.length + shift;
		  	    var i;

		  	    this._expand(len);

		  	    var w;
		  	    var carry = 0;
		  	    for (i = 0; i < num.length; i++) {
		  	      w = (this.words[i + shift] | 0) + carry;
		  	      var right = (num.words[i] | 0) * mul;
		  	      w -= right & 0x3ffffff;
		  	      carry = (w >> 26) - ((right / 0x4000000) | 0);
		  	      this.words[i + shift] = w & 0x3ffffff;
		  	    }
		  	    for (; i < this.length - shift; i++) {
		  	      w = (this.words[i + shift] | 0) + carry;
		  	      carry = w >> 26;
		  	      this.words[i + shift] = w & 0x3ffffff;
		  	    }

		  	    if (carry === 0) return this.strip();

		  	    // Subtraction overflow
		  	    assert(carry === -1);
		  	    carry = 0;
		  	    for (i = 0; i < this.length; i++) {
		  	      w = -(this.words[i] | 0) + carry;
		  	      carry = w >> 26;
		  	      this.words[i] = w & 0x3ffffff;
		  	    }
		  	    this.negative = 1;

		  	    return this.strip();
		  	  };

		  	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		  	    var shift = this.length - num.length;

		  	    var a = this.clone();
		  	    var b = num;

		  	    // Normalize
		  	    var bhi = b.words[b.length - 1] | 0;
		  	    var bhiBits = this._countBits(bhi);
		  	    shift = 26 - bhiBits;
		  	    if (shift !== 0) {
		  	      b = b.ushln(shift);
		  	      a.iushln(shift);
		  	      bhi = b.words[b.length - 1] | 0;
		  	    }

		  	    // Initialize quotient
		  	    var m = a.length - b.length;
		  	    var q;

		  	    if (mode !== 'mod') {
		  	      q = new BN(null);
		  	      q.length = m + 1;
		  	      q.words = new Array(q.length);
		  	      for (var i = 0; i < q.length; i++) {
		  	        q.words[i] = 0;
		  	      }
		  	    }

		  	    var diff = a.clone()._ishlnsubmul(b, 1, m);
		  	    if (diff.negative === 0) {
		  	      a = diff;
		  	      if (q) {
		  	        q.words[m] = 1;
		  	      }
		  	    }

		  	    for (var j = m - 1; j >= 0; j--) {
		  	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
		  	        (a.words[b.length + j - 1] | 0);

		  	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		  	      // (0x7ffffff)
		  	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

		  	      a._ishlnsubmul(b, qj, j);
		  	      while (a.negative !== 0) {
		  	        qj--;
		  	        a.negative = 0;
		  	        a._ishlnsubmul(b, 1, j);
		  	        if (!a.isZero()) {
		  	          a.negative ^= 1;
		  	        }
		  	      }
		  	      if (q) {
		  	        q.words[j] = qj;
		  	      }
		  	    }
		  	    if (q) {
		  	      q.strip();
		  	    }
		  	    a.strip();

		  	    // Denormalize
		  	    if (mode !== 'div' && shift !== 0) {
		  	      a.iushrn(shift);
		  	    }

		  	    return {
		  	      div: q || null,
		  	      mod: a
		  	    };
		  	  };

		  	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
		  	  //       to `div` to request div only, or be absent to
		  	  //       request both div & mod
		  	  //       2) `positive` is true if unsigned mod is requested
		  	  BN.prototype.divmod = function divmod (num, mode, positive) {
		  	    assert(!num.isZero());

		  	    if (this.isZero()) {
		  	      return {
		  	        div: new BN(0),
		  	        mod: new BN(0)
		  	      };
		  	    }

		  	    var div, mod, res;
		  	    if (this.negative !== 0 && num.negative === 0) {
		  	      res = this.neg().divmod(num, mode);

		  	      if (mode !== 'mod') {
		  	        div = res.div.neg();
		  	      }

		  	      if (mode !== 'div') {
		  	        mod = res.mod.neg();
		  	        if (positive && mod.negative !== 0) {
		  	          mod.iadd(num);
		  	        }
		  	      }

		  	      return {
		  	        div: div,
		  	        mod: mod
		  	      };
		  	    }

		  	    if (this.negative === 0 && num.negative !== 0) {
		  	      res = this.divmod(num.neg(), mode);

		  	      if (mode !== 'mod') {
		  	        div = res.div.neg();
		  	      }

		  	      return {
		  	        div: div,
		  	        mod: res.mod
		  	      };
		  	    }

		  	    if ((this.negative & num.negative) !== 0) {
		  	      res = this.neg().divmod(num.neg(), mode);

		  	      if (mode !== 'div') {
		  	        mod = res.mod.neg();
		  	        if (positive && mod.negative !== 0) {
		  	          mod.isub(num);
		  	        }
		  	      }

		  	      return {
		  	        div: res.div,
		  	        mod: mod
		  	      };
		  	    }

		  	    // Both numbers are positive at this point

		  	    // Strip both numbers to approximate shift value
		  	    if (num.length > this.length || this.cmp(num) < 0) {
		  	      return {
		  	        div: new BN(0),
		  	        mod: this
		  	      };
		  	    }

		  	    // Very short reduction
		  	    if (num.length === 1) {
		  	      if (mode === 'div') {
		  	        return {
		  	          div: this.divn(num.words[0]),
		  	          mod: null
		  	        };
		  	      }

		  	      if (mode === 'mod') {
		  	        return {
		  	          div: null,
		  	          mod: new BN(this.modn(num.words[0]))
		  	        };
		  	      }

		  	      return {
		  	        div: this.divn(num.words[0]),
		  	        mod: new BN(this.modn(num.words[0]))
		  	      };
		  	    }

		  	    return this._wordDiv(num, mode);
		  	  };

		  	  // Find `this` / `num`
		  	  BN.prototype.div = function div (num) {
		  	    return this.divmod(num, 'div', false).div;
		  	  };

		  	  // Find `this` % `num`
		  	  BN.prototype.mod = function mod (num) {
		  	    return this.divmod(num, 'mod', false).mod;
		  	  };

		  	  BN.prototype.umod = function umod (num) {
		  	    return this.divmod(num, 'mod', true).mod;
		  	  };

		  	  // Find Round(`this` / `num`)
		  	  BN.prototype.divRound = function divRound (num) {
		  	    var dm = this.divmod(num);

		  	    // Fast case - exact division
		  	    if (dm.mod.isZero()) return dm.div;

		  	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

		  	    var half = num.ushrn(1);
		  	    var r2 = num.andln(1);
		  	    var cmp = mod.cmp(half);

		  	    // Round down
		  	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

		  	    // Round up
		  	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
		  	  };

		  	  BN.prototype.modn = function modn (num) {
		  	    assert(num <= 0x3ffffff);
		  	    var p = (1 << 26) % num;

		  	    var acc = 0;
		  	    for (var i = this.length - 1; i >= 0; i--) {
		  	      acc = (p * acc + (this.words[i] | 0)) % num;
		  	    }

		  	    return acc;
		  	  };

		  	  // In-place division by number
		  	  BN.prototype.idivn = function idivn (num) {
		  	    assert(num <= 0x3ffffff);

		  	    var carry = 0;
		  	    for (var i = this.length - 1; i >= 0; i--) {
		  	      var w = (this.words[i] | 0) + carry * 0x4000000;
		  	      this.words[i] = (w / num) | 0;
		  	      carry = w % num;
		  	    }

		  	    return this.strip();
		  	  };

		  	  BN.prototype.divn = function divn (num) {
		  	    return this.clone().idivn(num);
		  	  };

		  	  BN.prototype.egcd = function egcd (p) {
		  	    assert(p.negative === 0);
		  	    assert(!p.isZero());

		  	    var x = this;
		  	    var y = p.clone();

		  	    if (x.negative !== 0) {
		  	      x = x.umod(p);
		  	    } else {
		  	      x = x.clone();
		  	    }

		  	    // A * x + B * y = x
		  	    var A = new BN(1);
		  	    var B = new BN(0);

		  	    // C * x + D * y = y
		  	    var C = new BN(0);
		  	    var D = new BN(1);

		  	    var g = 0;

		  	    while (x.isEven() && y.isEven()) {
		  	      x.iushrn(1);
		  	      y.iushrn(1);
		  	      ++g;
		  	    }

		  	    var yp = y.clone();
		  	    var xp = x.clone();

		  	    while (!x.isZero()) {
		  	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  	      if (i > 0) {
		  	        x.iushrn(i);
		  	        while (i-- > 0) {
		  	          if (A.isOdd() || B.isOdd()) {
		  	            A.iadd(yp);
		  	            B.isub(xp);
		  	          }

		  	          A.iushrn(1);
		  	          B.iushrn(1);
		  	        }
		  	      }

		  	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  	      if (j > 0) {
		  	        y.iushrn(j);
		  	        while (j-- > 0) {
		  	          if (C.isOdd() || D.isOdd()) {
		  	            C.iadd(yp);
		  	            D.isub(xp);
		  	          }

		  	          C.iushrn(1);
		  	          D.iushrn(1);
		  	        }
		  	      }

		  	      if (x.cmp(y) >= 0) {
		  	        x.isub(y);
		  	        A.isub(C);
		  	        B.isub(D);
		  	      } else {
		  	        y.isub(x);
		  	        C.isub(A);
		  	        D.isub(B);
		  	      }
		  	    }

		  	    return {
		  	      a: C,
		  	      b: D,
		  	      gcd: y.iushln(g)
		  	    };
		  	  };

		  	  // This is reduced incarnation of the binary EEA
		  	  // above, designated to invert members of the
		  	  // _prime_ fields F(p) at a maximal speed
		  	  BN.prototype._invmp = function _invmp (p) {
		  	    assert(p.negative === 0);
		  	    assert(!p.isZero());

		  	    var a = this;
		  	    var b = p.clone();

		  	    if (a.negative !== 0) {
		  	      a = a.umod(p);
		  	    } else {
		  	      a = a.clone();
		  	    }

		  	    var x1 = new BN(1);
		  	    var x2 = new BN(0);

		  	    var delta = b.clone();

		  	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		  	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  	      if (i > 0) {
		  	        a.iushrn(i);
		  	        while (i-- > 0) {
		  	          if (x1.isOdd()) {
		  	            x1.iadd(delta);
		  	          }

		  	          x1.iushrn(1);
		  	        }
		  	      }

		  	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  	      if (j > 0) {
		  	        b.iushrn(j);
		  	        while (j-- > 0) {
		  	          if (x2.isOdd()) {
		  	            x2.iadd(delta);
		  	          }

		  	          x2.iushrn(1);
		  	        }
		  	      }

		  	      if (a.cmp(b) >= 0) {
		  	        a.isub(b);
		  	        x1.isub(x2);
		  	      } else {
		  	        b.isub(a);
		  	        x2.isub(x1);
		  	      }
		  	    }

		  	    var res;
		  	    if (a.cmpn(1) === 0) {
		  	      res = x1;
		  	    } else {
		  	      res = x2;
		  	    }

		  	    if (res.cmpn(0) < 0) {
		  	      res.iadd(p);
		  	    }

		  	    return res;
		  	  };

		  	  BN.prototype.gcd = function gcd (num) {
		  	    if (this.isZero()) return num.abs();
		  	    if (num.isZero()) return this.abs();

		  	    var a = this.clone();
		  	    var b = num.clone();
		  	    a.negative = 0;
		  	    b.negative = 0;

		  	    // Remove common factor of two
		  	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		  	      a.iushrn(1);
		  	      b.iushrn(1);
		  	    }

		  	    do {
		  	      while (a.isEven()) {
		  	        a.iushrn(1);
		  	      }
		  	      while (b.isEven()) {
		  	        b.iushrn(1);
		  	      }

		  	      var r = a.cmp(b);
		  	      if (r < 0) {
		  	        // Swap `a` and `b` to make `a` always bigger than `b`
		  	        var t = a;
		  	        a = b;
		  	        b = t;
		  	      } else if (r === 0 || b.cmpn(1) === 0) {
		  	        break;
		  	      }

		  	      a.isub(b);
		  	    } while (true);

		  	    return b.iushln(shift);
		  	  };

		  	  // Invert number in the field F(num)
		  	  BN.prototype.invm = function invm (num) {
		  	    return this.egcd(num).a.umod(num);
		  	  };

		  	  BN.prototype.isEven = function isEven () {
		  	    return (this.words[0] & 1) === 0;
		  	  };

		  	  BN.prototype.isOdd = function isOdd () {
		  	    return (this.words[0] & 1) === 1;
		  	  };

		  	  // And first word and num
		  	  BN.prototype.andln = function andln (num) {
		  	    return this.words[0] & num;
		  	  };

		  	  // Increment at the bit position in-line
		  	  BN.prototype.bincn = function bincn (bit) {
		  	    assert(typeof bit === 'number');
		  	    var r = bit % 26;
		  	    var s = (bit - r) / 26;
		  	    var q = 1 << r;

		  	    // Fast case: bit is much higher than all existing words
		  	    if (this.length <= s) {
		  	      this._expand(s + 1);
		  	      this.words[s] |= q;
		  	      return this;
		  	    }

		  	    // Add bit and propagate, if needed
		  	    var carry = q;
		  	    for (var i = s; carry !== 0 && i < this.length; i++) {
		  	      var w = this.words[i] | 0;
		  	      w += carry;
		  	      carry = w >>> 26;
		  	      w &= 0x3ffffff;
		  	      this.words[i] = w;
		  	    }
		  	    if (carry !== 0) {
		  	      this.words[i] = carry;
		  	      this.length++;
		  	    }
		  	    return this;
		  	  };

		  	  BN.prototype.isZero = function isZero () {
		  	    return this.length === 1 && this.words[0] === 0;
		  	  };

		  	  BN.prototype.cmpn = function cmpn (num) {
		  	    var negative = num < 0;

		  	    if (this.negative !== 0 && !negative) return -1;
		  	    if (this.negative === 0 && negative) return 1;

		  	    this.strip();

		  	    var res;
		  	    if (this.length > 1) {
		  	      res = 1;
		  	    } else {
		  	      if (negative) {
		  	        num = -num;
		  	      }

		  	      assert(num <= 0x3ffffff, 'Number is too big');

		  	      var w = this.words[0] | 0;
		  	      res = w === num ? 0 : w < num ? -1 : 1;
		  	    }
		  	    if (this.negative !== 0) return -res | 0;
		  	    return res;
		  	  };

		  	  // Compare two numbers and return:
		  	  // 1 - if `this` > `num`
		  	  // 0 - if `this` == `num`
		  	  // -1 - if `this` < `num`
		  	  BN.prototype.cmp = function cmp (num) {
		  	    if (this.negative !== 0 && num.negative === 0) return -1;
		  	    if (this.negative === 0 && num.negative !== 0) return 1;

		  	    var res = this.ucmp(num);
		  	    if (this.negative !== 0) return -res | 0;
		  	    return res;
		  	  };

		  	  // Unsigned comparison
		  	  BN.prototype.ucmp = function ucmp (num) {
		  	    // At this point both numbers have the same sign
		  	    if (this.length > num.length) return 1;
		  	    if (this.length < num.length) return -1;

		  	    var res = 0;
		  	    for (var i = this.length - 1; i >= 0; i--) {
		  	      var a = this.words[i] | 0;
		  	      var b = num.words[i] | 0;

		  	      if (a === b) continue;
		  	      if (a < b) {
		  	        res = -1;
		  	      } else if (a > b) {
		  	        res = 1;
		  	      }
		  	      break;
		  	    }
		  	    return res;
		  	  };

		  	  BN.prototype.gtn = function gtn (num) {
		  	    return this.cmpn(num) === 1;
		  	  };

		  	  BN.prototype.gt = function gt (num) {
		  	    return this.cmp(num) === 1;
		  	  };

		  	  BN.prototype.gten = function gten (num) {
		  	    return this.cmpn(num) >= 0;
		  	  };

		  	  BN.prototype.gte = function gte (num) {
		  	    return this.cmp(num) >= 0;
		  	  };

		  	  BN.prototype.ltn = function ltn (num) {
		  	    return this.cmpn(num) === -1;
		  	  };

		  	  BN.prototype.lt = function lt (num) {
		  	    return this.cmp(num) === -1;
		  	  };

		  	  BN.prototype.lten = function lten (num) {
		  	    return this.cmpn(num) <= 0;
		  	  };

		  	  BN.prototype.lte = function lte (num) {
		  	    return this.cmp(num) <= 0;
		  	  };

		  	  BN.prototype.eqn = function eqn (num) {
		  	    return this.cmpn(num) === 0;
		  	  };

		  	  BN.prototype.eq = function eq (num) {
		  	    return this.cmp(num) === 0;
		  	  };

		  	  //
		  	  // A reduce context, could be using montgomery or something better, depending
		  	  // on the `m` itself.
		  	  //
		  	  BN.red = function red (num) {
		  	    return new Red(num);
		  	  };

		  	  BN.prototype.toRed = function toRed (ctx) {
		  	    assert(!this.red, 'Already a number in reduction context');
		  	    assert(this.negative === 0, 'red works only with positives');
		  	    return ctx.convertTo(this)._forceRed(ctx);
		  	  };

		  	  BN.prototype.fromRed = function fromRed () {
		  	    assert(this.red, 'fromRed works only with numbers in reduction context');
		  	    return this.red.convertFrom(this);
		  	  };

		  	  BN.prototype._forceRed = function _forceRed (ctx) {
		  	    this.red = ctx;
		  	    return this;
		  	  };

		  	  BN.prototype.forceRed = function forceRed (ctx) {
		  	    assert(!this.red, 'Already a number in reduction context');
		  	    return this._forceRed(ctx);
		  	  };

		  	  BN.prototype.redAdd = function redAdd (num) {
		  	    assert(this.red, 'redAdd works only with red numbers');
		  	    return this.red.add(this, num);
		  	  };

		  	  BN.prototype.redIAdd = function redIAdd (num) {
		  	    assert(this.red, 'redIAdd works only with red numbers');
		  	    return this.red.iadd(this, num);
		  	  };

		  	  BN.prototype.redSub = function redSub (num) {
		  	    assert(this.red, 'redSub works only with red numbers');
		  	    return this.red.sub(this, num);
		  	  };

		  	  BN.prototype.redISub = function redISub (num) {
		  	    assert(this.red, 'redISub works only with red numbers');
		  	    return this.red.isub(this, num);
		  	  };

		  	  BN.prototype.redShl = function redShl (num) {
		  	    assert(this.red, 'redShl works only with red numbers');
		  	    return this.red.shl(this, num);
		  	  };

		  	  BN.prototype.redMul = function redMul (num) {
		  	    assert(this.red, 'redMul works only with red numbers');
		  	    this.red._verify2(this, num);
		  	    return this.red.mul(this, num);
		  	  };

		  	  BN.prototype.redIMul = function redIMul (num) {
		  	    assert(this.red, 'redMul works only with red numbers');
		  	    this.red._verify2(this, num);
		  	    return this.red.imul(this, num);
		  	  };

		  	  BN.prototype.redSqr = function redSqr () {
		  	    assert(this.red, 'redSqr works only with red numbers');
		  	    this.red._verify1(this);
		  	    return this.red.sqr(this);
		  	  };

		  	  BN.prototype.redISqr = function redISqr () {
		  	    assert(this.red, 'redISqr works only with red numbers');
		  	    this.red._verify1(this);
		  	    return this.red.isqr(this);
		  	  };

		  	  // Square root over p
		  	  BN.prototype.redSqrt = function redSqrt () {
		  	    assert(this.red, 'redSqrt works only with red numbers');
		  	    this.red._verify1(this);
		  	    return this.red.sqrt(this);
		  	  };

		  	  BN.prototype.redInvm = function redInvm () {
		  	    assert(this.red, 'redInvm works only with red numbers');
		  	    this.red._verify1(this);
		  	    return this.red.invm(this);
		  	  };

		  	  // Return negative clone of `this` % `red modulo`
		  	  BN.prototype.redNeg = function redNeg () {
		  	    assert(this.red, 'redNeg works only with red numbers');
		  	    this.red._verify1(this);
		  	    return this.red.neg(this);
		  	  };

		  	  BN.prototype.redPow = function redPow (num) {
		  	    assert(this.red && !num.red, 'redPow(normalNum)');
		  	    this.red._verify1(this);
		  	    return this.red.pow(this, num);
		  	  };

		  	  // Prime numbers with efficient reduction
		  	  var primes = {
		  	    k256: null,
		  	    p224: null,
		  	    p192: null,
		  	    p25519: null
		  	  };

		  	  // Pseudo-Mersenne prime
		  	  function MPrime (name, p) {
		  	    // P = 2 ^ N - K
		  	    this.name = name;
		  	    this.p = new BN(p, 16);
		  	    this.n = this.p.bitLength();
		  	    this.k = new BN(1).iushln(this.n).isub(this.p);

		  	    this.tmp = this._tmp();
		  	  }

		  	  MPrime.prototype._tmp = function _tmp () {
		  	    var tmp = new BN(null);
		  	    tmp.words = new Array(Math.ceil(this.n / 13));
		  	    return tmp;
		  	  };

		  	  MPrime.prototype.ireduce = function ireduce (num) {
		  	    // Assumes that `num` is less than `P^2`
		  	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		  	    var r = num;
		  	    var rlen;

		  	    do {
		  	      this.split(r, this.tmp);
		  	      r = this.imulK(r);
		  	      r = r.iadd(this.tmp);
		  	      rlen = r.bitLength();
		  	    } while (rlen > this.n);

		  	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		  	    if (cmp === 0) {
		  	      r.words[0] = 0;
		  	      r.length = 1;
		  	    } else if (cmp > 0) {
		  	      r.isub(this.p);
		  	    } else {
		  	      if (r.strip !== undefined) {
		  	        // r is BN v4 instance
		  	        r.strip();
		  	      } else {
		  	        // r is BN v5 instance
		  	        r._strip();
		  	      }
		  	    }

		  	    return r;
		  	  };

		  	  MPrime.prototype.split = function split (input, out) {
		  	    input.iushrn(this.n, 0, out);
		  	  };

		  	  MPrime.prototype.imulK = function imulK (num) {
		  	    return num.imul(this.k);
		  	  };

		  	  function K256 () {
		  	    MPrime.call(
		  	      this,
		  	      'k256',
		  	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
		  	  }
		  	  inherits(K256, MPrime);

		  	  K256.prototype.split = function split (input, output) {
		  	    // 256 = 9 * 26 + 22
		  	    var mask = 0x3fffff;

		  	    var outLen = Math.min(input.length, 9);
		  	    for (var i = 0; i < outLen; i++) {
		  	      output.words[i] = input.words[i];
		  	    }
		  	    output.length = outLen;

		  	    if (input.length <= 9) {
		  	      input.words[0] = 0;
		  	      input.length = 1;
		  	      return;
		  	    }

		  	    // Shift by 9 limbs
		  	    var prev = input.words[9];
		  	    output.words[output.length++] = prev & mask;

		  	    for (i = 10; i < input.length; i++) {
		  	      var next = input.words[i] | 0;
		  	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		  	      prev = next;
		  	    }
		  	    prev >>>= 22;
		  	    input.words[i - 10] = prev;
		  	    if (prev === 0 && input.length > 10) {
		  	      input.length -= 10;
		  	    } else {
		  	      input.length -= 9;
		  	    }
		  	  };

		  	  K256.prototype.imulK = function imulK (num) {
		  	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		  	    num.words[num.length] = 0;
		  	    num.words[num.length + 1] = 0;
		  	    num.length += 2;

		  	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		  	    var lo = 0;
		  	    for (var i = 0; i < num.length; i++) {
		  	      var w = num.words[i] | 0;
		  	      lo += w * 0x3d1;
		  	      num.words[i] = lo & 0x3ffffff;
		  	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
		  	    }

		  	    // Fast length reduction
		  	    if (num.words[num.length - 1] === 0) {
		  	      num.length--;
		  	      if (num.words[num.length - 1] === 0) {
		  	        num.length--;
		  	      }
		  	    }
		  	    return num;
		  	  };

		  	  function P224 () {
		  	    MPrime.call(
		  	      this,
		  	      'p224',
		  	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
		  	  }
		  	  inherits(P224, MPrime);

		  	  function P192 () {
		  	    MPrime.call(
		  	      this,
		  	      'p192',
		  	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
		  	  }
		  	  inherits(P192, MPrime);

		  	  function P25519 () {
		  	    // 2 ^ 255 - 19
		  	    MPrime.call(
		  	      this,
		  	      '25519',
		  	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
		  	  }
		  	  inherits(P25519, MPrime);

		  	  P25519.prototype.imulK = function imulK (num) {
		  	    // K = 0x13
		  	    var carry = 0;
		  	    for (var i = 0; i < num.length; i++) {
		  	      var hi = (num.words[i] | 0) * 0x13 + carry;
		  	      var lo = hi & 0x3ffffff;
		  	      hi >>>= 26;

		  	      num.words[i] = lo;
		  	      carry = hi;
		  	    }
		  	    if (carry !== 0) {
		  	      num.words[num.length++] = carry;
		  	    }
		  	    return num;
		  	  };

		  	  // Exported mostly for testing purposes, use plain name instead
		  	  BN._prime = function prime (name) {
		  	    // Cached version of prime
		  	    if (primes[name]) return primes[name];

		  	    var prime;
		  	    if (name === 'k256') {
		  	      prime = new K256();
		  	    } else if (name === 'p224') {
		  	      prime = new P224();
		  	    } else if (name === 'p192') {
		  	      prime = new P192();
		  	    } else if (name === 'p25519') {
		  	      prime = new P25519();
		  	    } else {
		  	      throw new Error('Unknown prime ' + name);
		  	    }
		  	    primes[name] = prime;

		  	    return prime;
		  	  };

		  	  //
		  	  // Base reduction engine
		  	  //
		  	  function Red (m) {
		  	    if (typeof m === 'string') {
		  	      var prime = BN._prime(m);
		  	      this.m = prime.p;
		  	      this.prime = prime;
		  	    } else {
		  	      assert(m.gtn(1), 'modulus must be greater than 1');
		  	      this.m = m;
		  	      this.prime = null;
		  	    }
		  	  }

		  	  Red.prototype._verify1 = function _verify1 (a) {
		  	    assert(a.negative === 0, 'red works only with positives');
		  	    assert(a.red, 'red works only with red numbers');
		  	  };

		  	  Red.prototype._verify2 = function _verify2 (a, b) {
		  	    assert((a.negative | b.negative) === 0, 'red works only with positives');
		  	    assert(a.red && a.red === b.red,
		  	      'red works only with red numbers');
		  	  };

		  	  Red.prototype.imod = function imod (a) {
		  	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		  	    return a.umod(this.m)._forceRed(this);
		  	  };

		  	  Red.prototype.neg = function neg (a) {
		  	    if (a.isZero()) {
		  	      return a.clone();
		  	    }

		  	    return this.m.sub(a)._forceRed(this);
		  	  };

		  	  Red.prototype.add = function add (a, b) {
		  	    this._verify2(a, b);

		  	    var res = a.add(b);
		  	    if (res.cmp(this.m) >= 0) {
		  	      res.isub(this.m);
		  	    }
		  	    return res._forceRed(this);
		  	  };

		  	  Red.prototype.iadd = function iadd (a, b) {
		  	    this._verify2(a, b);

		  	    var res = a.iadd(b);
		  	    if (res.cmp(this.m) >= 0) {
		  	      res.isub(this.m);
		  	    }
		  	    return res;
		  	  };

		  	  Red.prototype.sub = function sub (a, b) {
		  	    this._verify2(a, b);

		  	    var res = a.sub(b);
		  	    if (res.cmpn(0) < 0) {
		  	      res.iadd(this.m);
		  	    }
		  	    return res._forceRed(this);
		  	  };

		  	  Red.prototype.isub = function isub (a, b) {
		  	    this._verify2(a, b);

		  	    var res = a.isub(b);
		  	    if (res.cmpn(0) < 0) {
		  	      res.iadd(this.m);
		  	    }
		  	    return res;
		  	  };

		  	  Red.prototype.shl = function shl (a, num) {
		  	    this._verify1(a);
		  	    return this.imod(a.ushln(num));
		  	  };

		  	  Red.prototype.imul = function imul (a, b) {
		  	    this._verify2(a, b);
		  	    return this.imod(a.imul(b));
		  	  };

		  	  Red.prototype.mul = function mul (a, b) {
		  	    this._verify2(a, b);
		  	    return this.imod(a.mul(b));
		  	  };

		  	  Red.prototype.isqr = function isqr (a) {
		  	    return this.imul(a, a.clone());
		  	  };

		  	  Red.prototype.sqr = function sqr (a) {
		  	    return this.mul(a, a);
		  	  };

		  	  Red.prototype.sqrt = function sqrt (a) {
		  	    if (a.isZero()) return a.clone();

		  	    var mod3 = this.m.andln(3);
		  	    assert(mod3 % 2 === 1);

		  	    // Fast case
		  	    if (mod3 === 3) {
		  	      var pow = this.m.add(new BN(1)).iushrn(2);
		  	      return this.pow(a, pow);
		  	    }

		  	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
		  	    //
		  	    // Find Q and S, that Q * 2 ^ S = (P - 1)
		  	    var q = this.m.subn(1);
		  	    var s = 0;
		  	    while (!q.isZero() && q.andln(1) === 0) {
		  	      s++;
		  	      q.iushrn(1);
		  	    }
		  	    assert(!q.isZero());

		  	    var one = new BN(1).toRed(this);
		  	    var nOne = one.redNeg();

		  	    // Find quadratic non-residue
		  	    // NOTE: Max is such because of generalized Riemann hypothesis.
		  	    var lpow = this.m.subn(1).iushrn(1);
		  	    var z = this.m.bitLength();
		  	    z = new BN(2 * z * z).toRed(this);

		  	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
		  	      z.redIAdd(nOne);
		  	    }

		  	    var c = this.pow(z, q);
		  	    var r = this.pow(a, q.addn(1).iushrn(1));
		  	    var t = this.pow(a, q);
		  	    var m = s;
		  	    while (t.cmp(one) !== 0) {
		  	      var tmp = t;
		  	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
		  	        tmp = tmp.redSqr();
		  	      }
		  	      assert(i < m);
		  	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

		  	      r = r.redMul(b);
		  	      c = b.redSqr();
		  	      t = t.redMul(c);
		  	      m = i;
		  	    }

		  	    return r;
		  	  };

		  	  Red.prototype.invm = function invm (a) {
		  	    var inv = a._invmp(this.m);
		  	    if (inv.negative !== 0) {
		  	      inv.negative = 0;
		  	      return this.imod(inv).redNeg();
		  	    } else {
		  	      return this.imod(inv);
		  	    }
		  	  };

		  	  Red.prototype.pow = function pow (a, num) {
		  	    if (num.isZero()) return new BN(1).toRed(this);
		  	    if (num.cmpn(1) === 0) return a.clone();

		  	    var windowSize = 4;
		  	    var wnd = new Array(1 << windowSize);
		  	    wnd[0] = new BN(1).toRed(this);
		  	    wnd[1] = a;
		  	    for (var i = 2; i < wnd.length; i++) {
		  	      wnd[i] = this.mul(wnd[i - 1], a);
		  	    }

		  	    var res = wnd[0];
		  	    var current = 0;
		  	    var currentLen = 0;
		  	    var start = num.bitLength() % 26;
		  	    if (start === 0) {
		  	      start = 26;
		  	    }

		  	    for (i = num.length - 1; i >= 0; i--) {
		  	      var word = num.words[i];
		  	      for (var j = start - 1; j >= 0; j--) {
		  	        var bit = (word >> j) & 1;
		  	        if (res !== wnd[0]) {
		  	          res = this.sqr(res);
		  	        }

		  	        if (bit === 0 && current === 0) {
		  	          currentLen = 0;
		  	          continue;
		  	        }

		  	        current <<= 1;
		  	        current |= bit;
		  	        currentLen++;
		  	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

		  	        res = this.mul(res, wnd[current]);
		  	        currentLen = 0;
		  	        current = 0;
		  	      }
		  	      start = 26;
		  	    }

		  	    return res;
		  	  };

		  	  Red.prototype.convertTo = function convertTo (num) {
		  	    var r = num.umod(this.m);

		  	    return r === num ? r.clone() : r;
		  	  };

		  	  Red.prototype.convertFrom = function convertFrom (num) {
		  	    var res = num.clone();
		  	    res.red = null;
		  	    return res;
		  	  };

		  	  //
		  	  // Montgomery method engine
		  	  //

		  	  BN.mont = function mont (num) {
		  	    return new Mont(num);
		  	  };

		  	  function Mont (m) {
		  	    Red.call(this, m);

		  	    this.shift = this.m.bitLength();
		  	    if (this.shift % 26 !== 0) {
		  	      this.shift += 26 - (this.shift % 26);
		  	    }

		  	    this.r = new BN(1).iushln(this.shift);
		  	    this.r2 = this.imod(this.r.sqr());
		  	    this.rinv = this.r._invmp(this.m);

		  	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		  	    this.minv = this.minv.umod(this.r);
		  	    this.minv = this.r.sub(this.minv);
		  	  }
		  	  inherits(Mont, Red);

		  	  Mont.prototype.convertTo = function convertTo (num) {
		  	    return this.imod(num.ushln(this.shift));
		  	  };

		  	  Mont.prototype.convertFrom = function convertFrom (num) {
		  	    var r = this.imod(num.mul(this.rinv));
		  	    r.red = null;
		  	    return r;
		  	  };

		  	  Mont.prototype.imul = function imul (a, b) {
		  	    if (a.isZero() || b.isZero()) {
		  	      a.words[0] = 0;
		  	      a.length = 1;
		  	      return a;
		  	    }

		  	    var t = a.imul(b);
		  	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		  	    var u = t.isub(c).iushrn(this.shift);
		  	    var res = u;

		  	    if (u.cmp(this.m) >= 0) {
		  	      res = u.isub(this.m);
		  	    } else if (u.cmpn(0) < 0) {
		  	      res = u.iadd(this.m);
		  	    }

		  	    return res._forceRed(this);
		  	  };

		  	  Mont.prototype.mul = function mul (a, b) {
		  	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

		  	    var t = a.mul(b);
		  	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		  	    var u = t.isub(c).iushrn(this.shift);
		  	    var res = u;
		  	    if (u.cmp(this.m) >= 0) {
		  	      res = u.isub(this.m);
		  	    } else if (u.cmpn(0) < 0) {
		  	      res = u.iadd(this.m);
		  	    }

		  	    return res._forceRed(this);
		  	  };

		  	  Mont.prototype.invm = function invm (a) {
		  	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		  	    var res = this.imod(a._invmp(this.m).mul(this.r2));
		  	    return res._forceRed(this);
		  	  };
		  	})(module, commonjsGlobal$1); 
		  } (bn));

		  var bnExports = bn.exports;
		  var BN = /*@__PURE__*/getDefaultExportFromCjs(bnExports);

		  var long = Long;

		  /**
		   * wasm optimizations, to do native i64 multiplication and divide
		   */
		  var wasm = null;

		  try {
		    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
		      0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
		    ])), {}).exports;
		  } catch (e) {
		    // no wasm support :(
		  }

		  /**
		   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
		   *  See the from* functions below for more convenient ways of constructing Longs.
		   * @exports Long
		   * @class A Long class for representing a 64 bit two's-complement integer value.
		   * @param {number} low The low (signed) 32 bits of the long
		   * @param {number} high The high (signed) 32 bits of the long
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @constructor
		   */
		  function Long(low, high, unsigned) {

		      /**
		       * The low 32 bits as a signed value.
		       * @type {number}
		       */
		      this.low = low | 0;

		      /**
		       * The high 32 bits as a signed value.
		       * @type {number}
		       */
		      this.high = high | 0;

		      /**
		       * Whether unsigned or not.
		       * @type {boolean}
		       */
		      this.unsigned = !!unsigned;
		  }

		  // The internal representation of a long is the two given signed, 32-bit values.
		  // We use 32-bit pieces because these are the size of integers on which
		  // Javascript performs bit-operations.  For operations like addition and
		  // multiplication, we split each number into 16 bit pieces, which can easily be
		  // multiplied within Javascript's floating-point representation without overflow
		  // or change in sign.
		  //
		  // In the algorithms below, we frequently reduce the negative case to the
		  // positive case by negating the input(s) and then post-processing the result.
		  // Note that we must ALWAYS check specially whether those values are MIN_VALUE
		  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
		  // a positive number, it overflows back into a negative).  Not handling this
		  // case would often result in infinite recursion.
		  //
		  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
		  // methods on which they depend.

		  /**
		   * An indicator used to reliably determine if an object is a Long or not.
		   * @type {boolean}
		   * @const
		   * @private
		   */
		  Long.prototype.__isLong__;

		  Object.defineProperty(Long.prototype, "__isLong__", { value: true });

		  /**
		   * @function
		   * @param {*} obj Object
		   * @returns {boolean}
		   * @inner
		   */
		  function isLong$1(obj) {
		      return (obj && obj["__isLong__"]) === true;
		  }

		  /**
		   * Tests if the specified object is a Long.
		   * @function
		   * @param {*} obj Object
		   * @returns {boolean}
		   */
		  Long.isLong = isLong$1;

		  /**
		   * A cache of the Long representations of small integer values.
		   * @type {!Object}
		   * @inner
		   */
		  var INT_CACHE = {};

		  /**
		   * A cache of the Long representations of small unsigned integer values.
		   * @type {!Object}
		   * @inner
		   */
		  var UINT_CACHE = {};

		  /**
		   * @param {number} value
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  function fromInt(value, unsigned) {
		      var obj, cachedObj, cache;
		      if (unsigned) {
		          value >>>= 0;
		          if (cache = (0 <= value && value < 256)) {
		              cachedObj = UINT_CACHE[value];
		              if (cachedObj)
		                  return cachedObj;
		          }
		          obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
		          if (cache)
		              UINT_CACHE[value] = obj;
		          return obj;
		      } else {
		          value |= 0;
		          if (cache = (-128 <= value && value < 128)) {
		              cachedObj = INT_CACHE[value];
		              if (cachedObj)
		                  return cachedObj;
		          }
		          obj = fromBits(value, value < 0 ? -1 : 0, false);
		          if (cache)
		              INT_CACHE[value] = obj;
		          return obj;
		      }
		  }

		  /**
		   * Returns a Long representing the given 32 bit integer value.
		   * @function
		   * @param {number} value The 32 bit integer in question
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  Long.fromInt = fromInt;

		  /**
		   * @param {number} value
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  function fromNumber(value, unsigned) {
		      if (isNaN(value))
		          return unsigned ? UZERO : ZERO;
		      if (unsigned) {
		          if (value < 0)
		              return UZERO;
		          if (value >= TWO_PWR_64_DBL)
		              return MAX_UNSIGNED_VALUE;
		      } else {
		          if (value <= -TWO_PWR_63_DBL)
		              return MIN_VALUE;
		          if (value + 1 >= TWO_PWR_63_DBL)
		              return MAX_VALUE;
		      }
		      if (value < 0)
		          return fromNumber(-value, unsigned).neg();
		      return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
		  }

		  /**
		   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
		   * @function
		   * @param {number} value The number in question
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  Long.fromNumber = fromNumber;

		  /**
		   * @param {number} lowBits
		   * @param {number} highBits
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  function fromBits(lowBits, highBits, unsigned) {
		      return new Long(lowBits, highBits, unsigned);
		  }

		  /**
		   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
		   *  assumed to use 32 bits.
		   * @function
		   * @param {number} lowBits The low 32 bits
		   * @param {number} highBits The high 32 bits
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long} The corresponding Long value
		   */
		  Long.fromBits = fromBits;

		  /**
		   * @function
		   * @param {number} base
		   * @param {number} exponent
		   * @returns {number}
		   * @inner
		   */
		  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

		  /**
		   * @param {string} str
		   * @param {(boolean|number)=} unsigned
		   * @param {number=} radix
		   * @returns {!Long}
		   * @inner
		   */
		  function fromString(str, unsigned, radix) {
		      if (str.length === 0)
		          throw Error('empty string');
		      if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
		          return ZERO;
		      if (typeof unsigned === 'number') {
		          // For goog.math.long compatibility
		          radix = unsigned,
		          unsigned = false;
		      } else {
		          unsigned = !! unsigned;
		      }
		      radix = radix || 10;
		      if (radix < 2 || 36 < radix)
		          throw RangeError('radix');

		      var p;
		      if ((p = str.indexOf('-')) > 0)
		          throw Error('interior hyphen');
		      else if (p === 0) {
		          return fromString(str.substring(1), unsigned, radix).neg();
		      }

		      // Do several (8) digits each time through the loop, so as to
		      // minimize the calls to the very expensive emulated div.
		      var radixToPower = fromNumber(pow_dbl(radix, 8));

		      var result = ZERO;
		      for (var i = 0; i < str.length; i += 8) {
		          var size = Math.min(8, str.length - i),
		              value = parseInt(str.substring(i, i + size), radix);
		          if (size < 8) {
		              var power = fromNumber(pow_dbl(radix, size));
		              result = result.mul(power).add(fromNumber(value));
		          } else {
		              result = result.mul(radixToPower);
		              result = result.add(fromNumber(value));
		          }
		      }
		      result.unsigned = unsigned;
		      return result;
		  }

		  /**
		   * Returns a Long representation of the given string, written using the specified radix.
		   * @function
		   * @param {string} str The textual representation of the Long
		   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
		   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
		   * @returns {!Long} The corresponding Long value
		   */
		  Long.fromString = fromString;

		  /**
		   * @function
		   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
		   * @param {boolean=} unsigned
		   * @returns {!Long}
		   * @inner
		   */
		  function fromValue(val, unsigned) {
		      if (typeof val === 'number')
		          return fromNumber(val, unsigned);
		      if (typeof val === 'string')
		          return fromString(val, unsigned);
		      // Throws for non-objects, converts non-instanceof Long:
		      return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
		  }

		  /**
		   * Converts the specified value to a Long using the appropriate from* function for its type.
		   * @function
		   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {!Long}
		   */
		  Long.fromValue = fromValue;

		  // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
		  // no runtime penalty for these.

		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_16_DBL = 1 << 16;

		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_24_DBL = 1 << 24;

		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

		  /**
		   * @type {number}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

		  /**
		   * @type {!Long}
		   * @const
		   * @inner
		   */
		  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var ZERO = fromInt(0);

		  /**
		   * Signed zero.
		   * @type {!Long}
		   */
		  Long.ZERO = ZERO;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var UZERO = fromInt(0, true);

		  /**
		   * Unsigned zero.
		   * @type {!Long}
		   */
		  Long.UZERO = UZERO;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var ONE = fromInt(1);

		  /**
		   * Signed one.
		   * @type {!Long}
		   */
		  Long.ONE = ONE;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var UONE = fromInt(1, true);

		  /**
		   * Unsigned one.
		   * @type {!Long}
		   */
		  Long.UONE = UONE;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var NEG_ONE = fromInt(-1);

		  /**
		   * Signed negative one.
		   * @type {!Long}
		   */
		  Long.NEG_ONE = NEG_ONE;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

		  /**
		   * Maximum signed value.
		   * @type {!Long}
		   */
		  Long.MAX_VALUE = MAX_VALUE;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

		  /**
		   * Maximum unsigned value.
		   * @type {!Long}
		   */
		  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

		  /**
		   * @type {!Long}
		   * @inner
		   */
		  var MIN_VALUE = fromBits(0, 0x80000000|0, false);

		  /**
		   * Minimum signed value.
		   * @type {!Long}
		   */
		  Long.MIN_VALUE = MIN_VALUE;

		  /**
		   * @alias Long.prototype
		   * @inner
		   */
		  var LongPrototype = Long.prototype;

		  /**
		   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
		   * @returns {number}
		   */
		  LongPrototype.toInt = function toInt() {
		      return this.unsigned ? this.low >>> 0 : this.low;
		  };

		  /**
		   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
		   * @returns {number}
		   */
		  LongPrototype.toNumber = function toNumber() {
		      if (this.unsigned)
		          return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
		      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
		  };

		  /**
		   * Converts the Long to a string written in the specified radix.
		   * @param {number=} radix Radix (2-36), defaults to 10
		   * @returns {string}
		   * @override
		   * @throws {RangeError} If `radix` is out of range
		   */
		  LongPrototype.toString = function toString(radix) {
		      radix = radix || 10;
		      if (radix < 2 || 36 < radix)
		          throw RangeError('radix');
		      if (this.isZero())
		          return '0';
		      if (this.isNegative()) { // Unsigned Longs are never negative
		          if (this.eq(MIN_VALUE)) {
		              // We need to change the Long value before it can be negated, so we remove
		              // the bottom-most digit in this base and then recurse to do the rest.
		              var radixLong = fromNumber(radix),
		                  div = this.div(radixLong),
		                  rem1 = div.mul(radixLong).sub(this);
		              return div.toString(radix) + rem1.toInt().toString(radix);
		          } else
		              return '-' + this.neg().toString(radix);
		      }

		      // Do several (6) digits each time through the loop, so as to
		      // minimize the calls to the very expensive emulated div.
		      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
		          rem = this;
		      var result = '';
		      while (true) {
		          var remDiv = rem.div(radixToPower),
		              intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
		              digits = intval.toString(radix);
		          rem = remDiv;
		          if (rem.isZero())
		              return digits + result;
		          else {
		              while (digits.length < 6)
		                  digits = '0' + digits;
		              result = '' + digits + result;
		          }
		      }
		  };

		  /**
		   * Gets the high 32 bits as a signed integer.
		   * @returns {number} Signed high bits
		   */
		  LongPrototype.getHighBits = function getHighBits() {
		      return this.high;
		  };

		  /**
		   * Gets the high 32 bits as an unsigned integer.
		   * @returns {number} Unsigned high bits
		   */
		  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
		      return this.high >>> 0;
		  };

		  /**
		   * Gets the low 32 bits as a signed integer.
		   * @returns {number} Signed low bits
		   */
		  LongPrototype.getLowBits = function getLowBits() {
		      return this.low;
		  };

		  /**
		   * Gets the low 32 bits as an unsigned integer.
		   * @returns {number} Unsigned low bits
		   */
		  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
		      return this.low >>> 0;
		  };

		  /**
		   * Gets the number of bits needed to represent the absolute value of this Long.
		   * @returns {number}
		   */
		  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
		      if (this.isNegative()) // Unsigned Longs are never negative
		          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
		      var val = this.high != 0 ? this.high : this.low;
		      for (var bit = 31; bit > 0; bit--)
		          if ((val & (1 << bit)) != 0)
		              break;
		      return this.high != 0 ? bit + 33 : bit + 1;
		  };

		  /**
		   * Tests if this Long's value equals zero.
		   * @returns {boolean}
		   */
		  LongPrototype.isZero = function isZero() {
		      return this.high === 0 && this.low === 0;
		  };

		  /**
		   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
		   * @returns {boolean}
		   */
		  LongPrototype.eqz = LongPrototype.isZero;

		  /**
		   * Tests if this Long's value is negative.
		   * @returns {boolean}
		   */
		  LongPrototype.isNegative = function isNegative() {
		      return !this.unsigned && this.high < 0;
		  };

		  /**
		   * Tests if this Long's value is positive.
		   * @returns {boolean}
		   */
		  LongPrototype.isPositive = function isPositive() {
		      return this.unsigned || this.high >= 0;
		  };

		  /**
		   * Tests if this Long's value is odd.
		   * @returns {boolean}
		   */
		  LongPrototype.isOdd = function isOdd() {
		      return (this.low & 1) === 1;
		  };

		  /**
		   * Tests if this Long's value is even.
		   * @returns {boolean}
		   */
		  LongPrototype.isEven = function isEven() {
		      return (this.low & 1) === 0;
		  };

		  /**
		   * Tests if this Long's value equals the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.equals = function equals(other) {
		      if (!isLong$1(other))
		          other = fromValue(other);
		      if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
		          return false;
		      return this.high === other.high && this.low === other.low;
		  };

		  /**
		   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.eq = LongPrototype.equals;

		  /**
		   * Tests if this Long's value differs from the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.notEquals = function notEquals(other) {
		      return !this.eq(/* validates */ other);
		  };

		  /**
		   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.neq = LongPrototype.notEquals;

		  /**
		   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.ne = LongPrototype.notEquals;

		  /**
		   * Tests if this Long's value is less than the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.lessThan = function lessThan(other) {
		      return this.comp(/* validates */ other) < 0;
		  };

		  /**
		   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.lt = LongPrototype.lessThan;

		  /**
		   * Tests if this Long's value is less than or equal the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
		      return this.comp(/* validates */ other) <= 0;
		  };

		  /**
		   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.lte = LongPrototype.lessThanOrEqual;

		  /**
		   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.le = LongPrototype.lessThanOrEqual;

		  /**
		   * Tests if this Long's value is greater than the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.greaterThan = function greaterThan(other) {
		      return this.comp(/* validates */ other) > 0;
		  };

		  /**
		   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.gt = LongPrototype.greaterThan;

		  /**
		   * Tests if this Long's value is greater than or equal the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
		      return this.comp(/* validates */ other) >= 0;
		  };

		  /**
		   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.gte = LongPrototype.greaterThanOrEqual;

		  /**
		   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {boolean}
		   */
		  LongPrototype.ge = LongPrototype.greaterThanOrEqual;

		  /**
		   * Compares this Long's value with the specified's.
		   * @param {!Long|number|string} other Other value
		   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
		   *  if the given one is greater
		   */
		  LongPrototype.compare = function compare(other) {
		      if (!isLong$1(other))
		          other = fromValue(other);
		      if (this.eq(other))
		          return 0;
		      var thisNeg = this.isNegative(),
		          otherNeg = other.isNegative();
		      if (thisNeg && !otherNeg)
		          return -1;
		      if (!thisNeg && otherNeg)
		          return 1;
		      // At this point the sign bits are the same
		      if (!this.unsigned)
		          return this.sub(other).isNegative() ? -1 : 1;
		      // Both are positive if at least one is unsigned
		      return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
		  };

		  /**
		   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
		   * @function
		   * @param {!Long|number|string} other Other value
		   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
		   *  if the given one is greater
		   */
		  LongPrototype.comp = LongPrototype.compare;

		  /**
		   * Negates this Long's value.
		   * @returns {!Long} Negated Long
		   */
		  LongPrototype.negate = function negate() {
		      if (!this.unsigned && this.eq(MIN_VALUE))
		          return MIN_VALUE;
		      return this.not().add(ONE);
		  };

		  /**
		   * Negates this Long's value. This is an alias of {@link Long#negate}.
		   * @function
		   * @returns {!Long} Negated Long
		   */
		  LongPrototype.neg = LongPrototype.negate;

		  /**
		   * Returns the sum of this and the specified Long.
		   * @param {!Long|number|string} addend Addend
		   * @returns {!Long} Sum
		   */
		  LongPrototype.add = function add(addend) {
		      if (!isLong$1(addend))
		          addend = fromValue(addend);

		      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

		      var a48 = this.high >>> 16;
		      var a32 = this.high & 0xFFFF;
		      var a16 = this.low >>> 16;
		      var a00 = this.low & 0xFFFF;

		      var b48 = addend.high >>> 16;
		      var b32 = addend.high & 0xFFFF;
		      var b16 = addend.low >>> 16;
		      var b00 = addend.low & 0xFFFF;

		      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
		      c00 += a00 + b00;
		      c16 += c00 >>> 16;
		      c00 &= 0xFFFF;
		      c16 += a16 + b16;
		      c32 += c16 >>> 16;
		      c16 &= 0xFFFF;
		      c32 += a32 + b32;
		      c48 += c32 >>> 16;
		      c32 &= 0xFFFF;
		      c48 += a48 + b48;
		      c48 &= 0xFFFF;
		      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
		  };

		  /**
		   * Returns the difference of this and the specified Long.
		   * @param {!Long|number|string} subtrahend Subtrahend
		   * @returns {!Long} Difference
		   */
		  LongPrototype.subtract = function subtract(subtrahend) {
		      if (!isLong$1(subtrahend))
		          subtrahend = fromValue(subtrahend);
		      return this.add(subtrahend.neg());
		  };

		  /**
		   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
		   * @function
		   * @param {!Long|number|string} subtrahend Subtrahend
		   * @returns {!Long} Difference
		   */
		  LongPrototype.sub = LongPrototype.subtract;

		  /**
		   * Returns the product of this and the specified Long.
		   * @param {!Long|number|string} multiplier Multiplier
		   * @returns {!Long} Product
		   */
		  LongPrototype.multiply = function multiply(multiplier) {
		      if (this.isZero())
		          return ZERO;
		      if (!isLong$1(multiplier))
		          multiplier = fromValue(multiplier);

		      // use wasm support if present
		      if (wasm) {
		          var low = wasm.mul(this.low,
		                             this.high,
		                             multiplier.low,
		                             multiplier.high);
		          return fromBits(low, wasm.get_high(), this.unsigned);
		      }

		      if (multiplier.isZero())
		          return ZERO;
		      if (this.eq(MIN_VALUE))
		          return multiplier.isOdd() ? MIN_VALUE : ZERO;
		      if (multiplier.eq(MIN_VALUE))
		          return this.isOdd() ? MIN_VALUE : ZERO;

		      if (this.isNegative()) {
		          if (multiplier.isNegative())
		              return this.neg().mul(multiplier.neg());
		          else
		              return this.neg().mul(multiplier).neg();
		      } else if (multiplier.isNegative())
		          return this.mul(multiplier.neg()).neg();

		      // If both longs are small, use float multiplication
		      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
		          return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

		      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
		      // We can skip products that would overflow.

		      var a48 = this.high >>> 16;
		      var a32 = this.high & 0xFFFF;
		      var a16 = this.low >>> 16;
		      var a00 = this.low & 0xFFFF;

		      var b48 = multiplier.high >>> 16;
		      var b32 = multiplier.high & 0xFFFF;
		      var b16 = multiplier.low >>> 16;
		      var b00 = multiplier.low & 0xFFFF;

		      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
		      c00 += a00 * b00;
		      c16 += c00 >>> 16;
		      c00 &= 0xFFFF;
		      c16 += a16 * b00;
		      c32 += c16 >>> 16;
		      c16 &= 0xFFFF;
		      c16 += a00 * b16;
		      c32 += c16 >>> 16;
		      c16 &= 0xFFFF;
		      c32 += a32 * b00;
		      c48 += c32 >>> 16;
		      c32 &= 0xFFFF;
		      c32 += a16 * b16;
		      c48 += c32 >>> 16;
		      c32 &= 0xFFFF;
		      c32 += a00 * b32;
		      c48 += c32 >>> 16;
		      c32 &= 0xFFFF;
		      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
		      c48 &= 0xFFFF;
		      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
		  };

		  /**
		   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
		   * @function
		   * @param {!Long|number|string} multiplier Multiplier
		   * @returns {!Long} Product
		   */
		  LongPrototype.mul = LongPrototype.multiply;

		  /**
		   * Returns this Long divided by the specified. The result is signed if this Long is signed or
		   *  unsigned if this Long is unsigned.
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Quotient
		   */
		  LongPrototype.divide = function divide(divisor) {
		      if (!isLong$1(divisor))
		          divisor = fromValue(divisor);
		      if (divisor.isZero())
		          throw Error('division by zero');

		      // use wasm support if present
		      if (wasm) {
		          // guard against signed division overflow: the largest
		          // negative number / -1 would be 1 larger than the largest
		          // positive number, due to two's complement.
		          if (!this.unsigned &&
		              this.high === -0x80000000 &&
		              divisor.low === -1 && divisor.high === -1) {
		              // be consistent with non-wasm code path
		              return this;
		          }
		          var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
		              this.low,
		              this.high,
		              divisor.low,
		              divisor.high
		          );
		          return fromBits(low, wasm.get_high(), this.unsigned);
		      }

		      if (this.isZero())
		          return this.unsigned ? UZERO : ZERO;
		      var approx, rem, res;
		      if (!this.unsigned) {
		          // This section is only relevant for signed longs and is derived from the
		          // closure library as a whole.
		          if (this.eq(MIN_VALUE)) {
		              if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
		                  return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
		              else if (divisor.eq(MIN_VALUE))
		                  return ONE;
		              else {
		                  // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
		                  var halfThis = this.shr(1);
		                  approx = halfThis.div(divisor).shl(1);
		                  if (approx.eq(ZERO)) {
		                      return divisor.isNegative() ? ONE : NEG_ONE;
		                  } else {
		                      rem = this.sub(divisor.mul(approx));
		                      res = approx.add(rem.div(divisor));
		                      return res;
		                  }
		              }
		          } else if (divisor.eq(MIN_VALUE))
		              return this.unsigned ? UZERO : ZERO;
		          if (this.isNegative()) {
		              if (divisor.isNegative())
		                  return this.neg().div(divisor.neg());
		              return this.neg().div(divisor).neg();
		          } else if (divisor.isNegative())
		              return this.div(divisor.neg()).neg();
		          res = ZERO;
		      } else {
		          // The algorithm below has not been made for unsigned longs. It's therefore
		          // required to take special care of the MSB prior to running it.
		          if (!divisor.unsigned)
		              divisor = divisor.toUnsigned();
		          if (divisor.gt(this))
		              return UZERO;
		          if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
		              return UONE;
		          res = UZERO;
		      }

		      // Repeat the following until the remainder is less than other:  find a
		      // floating-point that approximates remainder / other *from below*, add this
		      // into the result, and subtract it from the remainder.  It is critical that
		      // the approximate value is less than or equal to the real value so that the
		      // remainder never becomes negative.
		      rem = this;
		      while (rem.gte(divisor)) {
		          // Approximate the result of division. This may be a little greater or
		          // smaller than the actual value.
		          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

		          // We will tweak the approximate result by changing it in the 48-th digit or
		          // the smallest non-fractional digit, whichever is larger.
		          var log2 = Math.ceil(Math.log(approx) / Math.LN2),
		              delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

		          // Decrease the approximation until it is smaller than the remainder.  Note
		          // that if it is too large, the product overflows and is negative.
		              approxRes = fromNumber(approx),
		              approxRem = approxRes.mul(divisor);
		          while (approxRem.isNegative() || approxRem.gt(rem)) {
		              approx -= delta;
		              approxRes = fromNumber(approx, this.unsigned);
		              approxRem = approxRes.mul(divisor);
		          }

		          // We know the answer can't be zero... and actually, zero would cause
		          // infinite recursion since we would make no progress.
		          if (approxRes.isZero())
		              approxRes = ONE;

		          res = res.add(approxRes);
		          rem = rem.sub(approxRem);
		      }
		      return res;
		  };

		  /**
		   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Quotient
		   */
		  LongPrototype.div = LongPrototype.divide;

		  /**
		   * Returns this Long modulo the specified.
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  LongPrototype.modulo = function modulo(divisor) {
		      if (!isLong$1(divisor))
		          divisor = fromValue(divisor);

		      // use wasm support if present
		      if (wasm) {
		          var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
		              this.low,
		              this.high,
		              divisor.low,
		              divisor.high
		          );
		          return fromBits(low, wasm.get_high(), this.unsigned);
		      }

		      return this.sub(this.div(divisor).mul(divisor));
		  };

		  /**
		   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  LongPrototype.mod = LongPrototype.modulo;

		  /**
		   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
		   * @function
		   * @param {!Long|number|string} divisor Divisor
		   * @returns {!Long} Remainder
		   */
		  LongPrototype.rem = LongPrototype.modulo;

		  /**
		   * Returns the bitwise NOT of this Long.
		   * @returns {!Long}
		   */
		  LongPrototype.not = function not() {
		      return fromBits(~this.low, ~this.high, this.unsigned);
		  };

		  /**
		   * Returns the bitwise AND of this Long and the specified.
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  LongPrototype.and = function and(other) {
		      if (!isLong$1(other))
		          other = fromValue(other);
		      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
		  };

		  /**
		   * Returns the bitwise OR of this Long and the specified.
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  LongPrototype.or = function or(other) {
		      if (!isLong$1(other))
		          other = fromValue(other);
		      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
		  };

		  /**
		   * Returns the bitwise XOR of this Long and the given one.
		   * @param {!Long|number|string} other Other Long
		   * @returns {!Long}
		   */
		  LongPrototype.xor = function xor(other) {
		      if (!isLong$1(other))
		          other = fromValue(other);
		      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
		  };

		  /**
		   * Returns this Long with bits shifted to the left by the given amount.
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shiftLeft = function shiftLeft(numBits) {
		      if (isLong$1(numBits))
		          numBits = numBits.toInt();
		      if ((numBits &= 63) === 0)
		          return this;
		      else if (numBits < 32)
		          return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
		      else
		          return fromBits(0, this.low << (numBits - 32), this.unsigned);
		  };

		  /**
		   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shl = LongPrototype.shiftLeft;

		  /**
		   * Returns this Long with bits arithmetically shifted to the right by the given amount.
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shiftRight = function shiftRight(numBits) {
		      if (isLong$1(numBits))
		          numBits = numBits.toInt();
		      if ((numBits &= 63) === 0)
		          return this;
		      else if (numBits < 32)
		          return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
		      else
		          return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
		  };

		  /**
		   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shr = LongPrototype.shiftRight;

		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount.
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
		      if (isLong$1(numBits))
		          numBits = numBits.toInt();
		      numBits &= 63;
		      if (numBits === 0)
		          return this;
		      else {
		          var high = this.high;
		          if (numBits < 32) {
		              var low = this.low;
		              return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
		          } else if (numBits === 32)
		              return fromBits(high, 0, this.unsigned);
		          else
		              return fromBits(high >>> (numBits - 32), 0, this.unsigned);
		      }
		  };

		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shru = LongPrototype.shiftRightUnsigned;

		  /**
		   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
		   * @function
		   * @param {number|!Long} numBits Number of bits
		   * @returns {!Long} Shifted Long
		   */
		  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

		  /**
		   * Converts this Long to signed.
		   * @returns {!Long} Signed long
		   */
		  LongPrototype.toSigned = function toSigned() {
		      if (!this.unsigned)
		          return this;
		      return fromBits(this.low, this.high, false);
		  };

		  /**
		   * Converts this Long to unsigned.
		   * @returns {!Long} Unsigned long
		   */
		  LongPrototype.toUnsigned = function toUnsigned() {
		      if (this.unsigned)
		          return this;
		      return fromBits(this.low, this.high, true);
		  };

		  /**
		   * Converts this Long to its byte representation.
		   * @param {boolean=} le Whether little or big endian, defaults to big endian
		   * @returns {!Array.<number>} Byte representation
		   */
		  LongPrototype.toBytes = function toBytes(le) {
		      return le ? this.toBytesLE() : this.toBytesBE();
		  };

		  /**
		   * Converts this Long to its little endian byte representation.
		   * @returns {!Array.<number>} Little endian byte representation
		   */
		  LongPrototype.toBytesLE = function toBytesLE() {
		      var hi = this.high,
		          lo = this.low;
		      return [
		          lo        & 0xff,
		          lo >>>  8 & 0xff,
		          lo >>> 16 & 0xff,
		          lo >>> 24       ,
		          hi        & 0xff,
		          hi >>>  8 & 0xff,
		          hi >>> 16 & 0xff,
		          hi >>> 24
		      ];
		  };

		  /**
		   * Converts this Long to its big endian byte representation.
		   * @returns {!Array.<number>} Big endian byte representation
		   */
		  LongPrototype.toBytesBE = function toBytesBE() {
		      var hi = this.high,
		          lo = this.low;
		      return [
		          hi >>> 24       ,
		          hi >>> 16 & 0xff,
		          hi >>>  8 & 0xff,
		          hi        & 0xff,
		          lo >>> 24       ,
		          lo >>> 16 & 0xff,
		          lo >>>  8 & 0xff,
		          lo        & 0xff
		      ];
		  };

		  /**
		   * Creates a Long from its byte representation.
		   * @param {!Array.<number>} bytes Byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @param {boolean=} le Whether little or big endian, defaults to big endian
		   * @returns {Long} The corresponding Long value
		   */
		  Long.fromBytes = function fromBytes(bytes, unsigned, le) {
		      return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
		  };

		  /**
		   * Creates a Long from its little endian byte representation.
		   * @param {!Array.<number>} bytes Little endian byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {Long} The corresponding Long value
		   */
		  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
		      return new Long(
		          bytes[0]       |
		          bytes[1] <<  8 |
		          bytes[2] << 16 |
		          bytes[3] << 24,
		          bytes[4]       |
		          bytes[5] <<  8 |
		          bytes[6] << 16 |
		          bytes[7] << 24,
		          unsigned
		      );
		  };

		  /**
		   * Creates a Long from its big endian byte representation.
		   * @param {!Array.<number>} bytes Big endian byte representation
		   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
		   * @returns {Long} The corresponding Long value
		   */
		  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
		      return new Long(
		          bytes[4] << 24 |
		          bytes[5] << 16 |
		          bytes[6] <<  8 |
		          bytes[7],
		          bytes[0] << 24 |
		          bytes[1] << 16 |
		          bytes[2] <<  8 |
		          bytes[3],
		          unsigned
		      );
		  };

		  var Long$1 = /*@__PURE__*/getDefaultExportFromCjs(long);

		  //  Copyright (C) 2018 Zilliqa
		  var isAddress = function (address) {
		      return isByteString(address, 40);
		  };
		  var isBech32 = function (raw) {
		      return !!raw.match(/^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$/);
		  };
		  var isBase58 = function (raw) {
		      return !!raw.match(/^[1-9ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/);
		  };
		  var isPrivateKey = function (privateKey) {
		      return isByteString(privateKey, 64);
		  };
		  var isPubKey = function (pubKey) {
		      return isByteString(pubKey, 66);
		  };
		  var isSignature = function (sig) {
		      return isByteString(sig, 128);
		  };
		  var isByteString = function (str, len) {
		      return !!str.replace('0x', '').match("^[0-9a-fA-F]{".concat(len, "}$"));
		  };
		  var isNumber = function (x) {
		      return typeof x === 'number';
		  };
		  var isBN = function (x) {
		      return BN.isBN(x);
		  };
		  var isLong = function (x) {
		      return Long$1.isLong(x);
		  };
		  var isString = function (x) {
		      return typeof x === 'string';
		  };
		  var isPlainObject = function (x) {
		      if (typeof x === 'object' && x !== null) {
		          var proto = Object.getPrototypeOf(x);
		          return proto === Object.prototype || proto === null;
		      }
		      return false;
		  };
		  var PRAGMA_REQUIRED = '@@ZJS_REQUIRED@@';
		  var required = function (fn) {
		      if (typeof fn === 'function') {
		          return Object.defineProperty(fn, 'required', {
		              value: PRAGMA_REQUIRED,
		          });
		      }
		      throw new Error('fn is not a function');
		  };
		  var matchesObject = function (x, test) {
		      var e_1, _a;
		      if (isPlainObject(x)) {
		          for (var key in test) {
		              if (test.hasOwnProperty(key)) {
		                  try {
		                      for (var _b = (e_1 = void 0, __values(test[key])), _c = _b.next(); !_c.done; _c = _b.next()) {
		                          var tester = _c.value;
		                          var value = x[key];
		                          if (typeof value === 'undefined' && tester.required) {
		                              throw new Error('Key not found: ' + key);
		                          }
		                          else {
		                              continue;
		                          }
		                      }
		                  }
		                  catch (e_1_1) { e_1 = { error: e_1_1 }; }
		                  finally {
		                      try {
		                          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
		                      }
		                      finally { if (e_1) throw e_1.error; }
		                  }
		              }
		          }
		      }
		      return true;
		  };

		  var validation = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    isAddress: isAddress,
		    isBech32: isBech32,
		    isBase58: isBase58,
		    isPrivateKey: isPrivateKey,
		    isPubKey: isPubKey,
		    isSignature: isSignature,
		    isByteString: isByteString,
		    isNumber: isNumber,
		    isBN: isBN,
		    isLong: isLong,
		    isString: isString,
		    isPlainObject: isPlainObject,
		    required: required,
		    matchesObject: matchesObject
		  });

		  //  Copyright (C) 2018 Zilliqa
		  var Units;
		  (function (Units) {
		      Units["Zil"] = "zil";
		      Units["Li"] = "li";
		      Units["Qa"] = "qa";
		  })(Units || (Units = {}));
		  var DEFAULT_OPTIONS = {
		      pad: false,
		  };
		  var unitMap = new Map([
		      [Units.Qa, '1'],
		      [Units.Li, '1000000'],
		      [Units.Zil, '1000000000000'], // 1e12 qa
		  ]);
		  var numToStr = function (input) {
		      if (typeof input === 'string') {
		          if (!input.match(/^-?[0-9.]+$/)) {
		              throw new Error("while converting number to string, invalid number value '".concat(input, "', should be a number matching (^-?[0-9.]+)."));
		          }
		          return input;
		      }
		      else if (typeof input === 'number') {
		          return String(input);
		      }
		      else if (BN.isBN(input)) {
		          return input.toString(10);
		      }
		      throw new Error("while converting number to string, invalid number value '".concat(input, "' type ").concat(typeof input, "."));
		  };
		  var fromQa = function (qa, unit, options) {
		      if (options === void 0) { options = DEFAULT_OPTIONS; }
		      if (unit === 'qa') {
		          return qa.toString(10);
		      }
		      var baseStr = unitMap.get(unit);
		      if (!baseStr) {
		          throw new Error("No unit of type ".concat(unit, " exists."));
		      }
		      var base = new BN(baseStr, 10);
		      var baseNumDecimals = baseStr.length - 1;
		      var fraction = qa.abs().mod(base).toString(10);
		      // prepend 0s to the fraction half
		      while (fraction.length < baseNumDecimals) {
		          fraction = "0".concat(fraction);
		      }
		      if (!options.pad) {
		          fraction = (fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
		      }
		      var whole = qa.div(base).toString(10);
		      return fraction === '0' ? "".concat(whole) : "".concat(whole, ".").concat(fraction);
		  };
		  var toQa = function (input, unit) {
		      var inputStr = numToStr(input);
		      var baseStr = unitMap.get(unit);
		      if (!baseStr) {
		          throw new Error("No unit of type ".concat(unit, " exists."));
		      }
		      var baseNumDecimals = baseStr.length - 1;
		      var base = new BN(baseStr, 10);
		      // Is it negative?
		      var isNegative = inputStr.substring(0, 1) === '-';
		      if (isNegative) {
		          inputStr = inputStr.substring(1);
		      }
		      if (inputStr === '.') {
		          throw new Error("Cannot convert ".concat(inputStr, " to Qa."));
		      }
		      // Split it into a whole and fractional part
		      var comps = inputStr.split('.'); // eslint-disable-line
		      if (comps.length > 2) {
		          throw new Error("Cannot convert ".concat(inputStr, " to Qa."));
		      }
		      var _a = __read(comps, 2), whole = _a[0], fraction = _a[1];
		      if (!whole) {
		          whole = '0';
		      }
		      if (!fraction) {
		          fraction = '0';
		      }
		      if (fraction.length > baseNumDecimals) {
		          throw new Error("Cannot convert ".concat(inputStr, " to Qa."));
		      }
		      while (fraction.length < baseNumDecimals) {
		          fraction += '0';
		      }
		      var wholeBN = new BN(whole);
		      var fractionBN = new BN(fraction);
		      var wei = wholeBN.mul(base).add(fractionBN); // eslint-disable-line
		      if (isNegative) {
		          wei = wei.neg();
		      }
		      return new BN(wei.toString(10), 10);
		  };

		  var unit = /*#__PURE__*/Object.freeze({
		    __proto__: null,
		    get Units () { return Units; },
		    fromQa: fromQa,
		    toQa: toQa
		  });

		  exports.BN = BN;
		  exports.Long = Long$1;
		  exports.bytes = bytes;
		  exports.units = unit;
		  exports.validation = validation;

		  Object.defineProperty(exports, '__esModule', { value: true });

		}));
		
	} (bundle, bundle.exports));

	var bundleExports = bundle.exports;

	var cryptoJs$1 = {exports: {}};

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var core = {exports: {}};

	core.exports;

	var hasRequiredCore;

	function requireCore () {
		if (hasRequiredCore) return core.exports;
		hasRequiredCore = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory();
				}
			}(commonjsGlobal, function () {

				/*globals window, global, require*/

				/**
				 * CryptoJS core components.
				 */
				var CryptoJS = CryptoJS || (function (Math, undefined$1) {

				    var crypto;

				    // Native crypto from window (Browser)
				    if (typeof window !== 'undefined' && window.crypto) {
				        crypto = window.crypto;
				    }

				    // Native crypto in web worker (Browser)
				    if (typeof self !== 'undefined' && self.crypto) {
				        crypto = self.crypto;
				    }

				    // Native crypto from worker
				    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
				        crypto = globalThis.crypto;
				    }

				    // Native (experimental IE 11) crypto from window (Browser)
				    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
				        crypto = window.msCrypto;
				    }

				    // Native crypto from global (NodeJS)
				    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
				        crypto = commonjsGlobal.crypto;
				    }

				    // Native crypto import via require (NodeJS)
				    if (!crypto && typeof commonjsRequire === 'function') {
				        try {
				            crypto = require$$0$2;
				        } catch (err) {}
				    }

				    /*
				     * Cryptographically secure pseudorandom number generator
				     *
				     * As Math.random() is cryptographically not safe to use
				     */
				    var cryptoSecureRandomInt = function () {
				        if (crypto) {
				            // Use getRandomValues method (Browser)
				            if (typeof crypto.getRandomValues === 'function') {
				                try {
				                    return crypto.getRandomValues(new Uint32Array(1))[0];
				                } catch (err) {}
				            }

				            // Use randomBytes method (NodeJS)
				            if (typeof crypto.randomBytes === 'function') {
				                try {
				                    return crypto.randomBytes(4).readInt32LE();
				                } catch (err) {}
				            }
				        }

				        throw new Error('Native crypto module could not be used to get secure random number.');
				    };

				    /*
				     * Local polyfill of Object.create

				     */
				    var create = Object.create || (function () {
				        function F() {}

				        return function (obj) {
				            var subtype;

				            F.prototype = obj;

				            subtype = new F();

				            F.prototype = null;

				            return subtype;
				        };
				    }());

				    /**
				     * CryptoJS namespace.
				     */
				    var C = {};

				    /**
				     * Library namespace.
				     */
				    var C_lib = C.lib = {};

				    /**
				     * Base object for prototypal inheritance.
				     */
				    var Base = C_lib.Base = (function () {


				        return {
				            /**
				             * Creates a new object that inherits from this object.
				             *
				             * @param {Object} overrides Properties to copy into the new object.
				             *
				             * @return {Object} The new object.
				             *
				             * @static
				             *
				             * @example
				             *
				             *     var MyType = CryptoJS.lib.Base.extend({
				             *         field: 'value',
				             *
				             *         method: function () {
				             *         }
				             *     });
				             */
				            extend: function (overrides) {
				                // Spawn
				                var subtype = create(this);

				                // Augment
				                if (overrides) {
				                    subtype.mixIn(overrides);
				                }

				                // Create default initializer
				                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
				                    subtype.init = function () {
				                        subtype.$super.init.apply(this, arguments);
				                    };
				                }

				                // Initializer's prototype is the subtype object
				                subtype.init.prototype = subtype;

				                // Reference supertype
				                subtype.$super = this;

				                return subtype;
				            },

				            /**
				             * Extends this object and runs the init method.
				             * Arguments to create() will be passed to init().
				             *
				             * @return {Object} The new object.
				             *
				             * @static
				             *
				             * @example
				             *
				             *     var instance = MyType.create();
				             */
				            create: function () {
				                var instance = this.extend();
				                instance.init.apply(instance, arguments);

				                return instance;
				            },

				            /**
				             * Initializes a newly created object.
				             * Override this method to add some logic when your objects are created.
				             *
				             * @example
				             *
				             *     var MyType = CryptoJS.lib.Base.extend({
				             *         init: function () {
				             *             // ...
				             *         }
				             *     });
				             */
				            init: function () {
				            },

				            /**
				             * Copies properties into this object.
				             *
				             * @param {Object} properties The properties to mix in.
				             *
				             * @example
				             *
				             *     MyType.mixIn({
				             *         field: 'value'
				             *     });
				             */
				            mixIn: function (properties) {
				                for (var propertyName in properties) {
				                    if (properties.hasOwnProperty(propertyName)) {
				                        this[propertyName] = properties[propertyName];
				                    }
				                }

				                // IE won't copy toString using the loop above
				                if (properties.hasOwnProperty('toString')) {
				                    this.toString = properties.toString;
				                }
				            },

				            /**
				             * Creates a copy of this object.
				             *
				             * @return {Object} The clone.
				             *
				             * @example
				             *
				             *     var clone = instance.clone();
				             */
				            clone: function () {
				                return this.init.prototype.extend(this);
				            }
				        };
				    }());

				    /**
				     * An array of 32-bit words.
				     *
				     * @property {Array} words The array of 32-bit words.
				     * @property {number} sigBytes The number of significant bytes in this word array.
				     */
				    var WordArray = C_lib.WordArray = Base.extend({
				        /**
				         * Initializes a newly created word array.
				         *
				         * @param {Array} words (Optional) An array of 32-bit words.
				         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.lib.WordArray.create();
				         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
				         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
				         */
				        init: function (words, sigBytes) {
				            words = this.words = words || [];

				            if (sigBytes != undefined$1) {
				                this.sigBytes = sigBytes;
				            } else {
				                this.sigBytes = words.length * 4;
				            }
				        },

				        /**
				         * Converts this word array to a string.
				         *
				         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
				         *
				         * @return {string} The stringified word array.
				         *
				         * @example
				         *
				         *     var string = wordArray + '';
				         *     var string = wordArray.toString();
				         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
				         */
				        toString: function (encoder) {
				            return (encoder || Hex).stringify(this);
				        },

				        /**
				         * Concatenates a word array to this word array.
				         *
				         * @param {WordArray} wordArray The word array to append.
				         *
				         * @return {WordArray} This word array.
				         *
				         * @example
				         *
				         *     wordArray1.concat(wordArray2);
				         */
				        concat: function (wordArray) {
				            // Shortcuts
				            var thisWords = this.words;
				            var thatWords = wordArray.words;
				            var thisSigBytes = this.sigBytes;
				            var thatSigBytes = wordArray.sigBytes;

				            // Clamp excess bits
				            this.clamp();

				            // Concat
				            if (thisSigBytes % 4) {
				                // Copy one byte at a time
				                for (var i = 0; i < thatSigBytes; i++) {
				                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
				                }
				            } else {
				                // Copy one word at a time
				                for (var j = 0; j < thatSigBytes; j += 4) {
				                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
				                }
				            }
				            this.sigBytes += thatSigBytes;

				            // Chainable
				            return this;
				        },

				        /**
				         * Removes insignificant bits.
				         *
				         * @example
				         *
				         *     wordArray.clamp();
				         */
				        clamp: function () {
				            // Shortcuts
				            var words = this.words;
				            var sigBytes = this.sigBytes;

				            // Clamp
				            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
				            words.length = Math.ceil(sigBytes / 4);
				        },

				        /**
				         * Creates a copy of this word array.
				         *
				         * @return {WordArray} The clone.
				         *
				         * @example
				         *
				         *     var clone = wordArray.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);
				            clone.words = this.words.slice(0);

				            return clone;
				        },

				        /**
				         * Creates a word array filled with random bytes.
				         *
				         * @param {number} nBytes The number of random bytes to generate.
				         *
				         * @return {WordArray} The random word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.lib.WordArray.random(16);
				         */
				        random: function (nBytes) {
				            var words = [];

				            for (var i = 0; i < nBytes; i += 4) {
				                words.push(cryptoSecureRandomInt());
				            }

				            return new WordArray.init(words, nBytes);
				        }
				    });

				    /**
				     * Encoder namespace.
				     */
				    var C_enc = C.enc = {};

				    /**
				     * Hex encoding strategy.
				     */
				    var Hex = C_enc.Hex = {
				        /**
				         * Converts a word array to a hex string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The hex string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var hexChars = [];
				            for (var i = 0; i < sigBytes; i++) {
				                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                hexChars.push((bite >>> 4).toString(16));
				                hexChars.push((bite & 0x0f).toString(16));
				            }

				            return hexChars.join('');
				        },

				        /**
				         * Converts a hex string to a word array.
				         *
				         * @param {string} hexStr The hex string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
				         */
				        parse: function (hexStr) {
				            // Shortcut
				            var hexStrLength = hexStr.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < hexStrLength; i += 2) {
				                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
				            }

				            return new WordArray.init(words, hexStrLength / 2);
				        }
				    };

				    /**
				     * Latin1 encoding strategy.
				     */
				    var Latin1 = C_enc.Latin1 = {
				        /**
				         * Converts a word array to a Latin1 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The Latin1 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var latin1Chars = [];
				            for (var i = 0; i < sigBytes; i++) {
				                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
				                latin1Chars.push(String.fromCharCode(bite));
				            }

				            return latin1Chars.join('');
				        },

				        /**
				         * Converts a Latin1 string to a word array.
				         *
				         * @param {string} latin1Str The Latin1 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
				         */
				        parse: function (latin1Str) {
				            // Shortcut
				            var latin1StrLength = latin1Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < latin1StrLength; i++) {
				                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
				            }

				            return new WordArray.init(words, latin1StrLength);
				        }
				    };

				    /**
				     * UTF-8 encoding strategy.
				     */
				    var Utf8 = C_enc.Utf8 = {
				        /**
				         * Converts a word array to a UTF-8 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-8 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            try {
				                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
				            } catch (e) {
				                throw new Error('Malformed UTF-8 data');
				            }
				        },

				        /**
				         * Converts a UTF-8 string to a word array.
				         *
				         * @param {string} utf8Str The UTF-8 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
				         */
				        parse: function (utf8Str) {
				            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
				        }
				    };

				    /**
				     * Abstract buffered block algorithm template.
				     *
				     * The property blockSize must be implemented in a concrete subtype.
				     *
				     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
				     */
				    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
				        /**
				         * Resets this block algorithm's data buffer to its initial state.
				         *
				         * @example
				         *
				         *     bufferedBlockAlgorithm.reset();
				         */
				        reset: function () {
				            // Initial values
				            this._data = new WordArray.init();
				            this._nDataBytes = 0;
				        },

				        /**
				         * Adds new data to this block algorithm's buffer.
				         *
				         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
				         *
				         * @example
				         *
				         *     bufferedBlockAlgorithm._append('data');
				         *     bufferedBlockAlgorithm._append(wordArray);
				         */
				        _append: function (data) {
				            // Convert string to WordArray, else assume WordArray already
				            if (typeof data == 'string') {
				                data = Utf8.parse(data);
				            }

				            // Append
				            this._data.concat(data);
				            this._nDataBytes += data.sigBytes;
				        },

				        /**
				         * Processes available data blocks.
				         *
				         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
				         *
				         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
				         *
				         * @return {WordArray} The processed data.
				         *
				         * @example
				         *
				         *     var processedData = bufferedBlockAlgorithm._process();
				         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
				         */
				        _process: function (doFlush) {
				            var processedWords;

				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;
				            var dataSigBytes = data.sigBytes;
				            var blockSize = this.blockSize;
				            var blockSizeBytes = blockSize * 4;

				            // Count blocks ready
				            var nBlocksReady = dataSigBytes / blockSizeBytes;
				            if (doFlush) {
				                // Round up to include partial blocks
				                nBlocksReady = Math.ceil(nBlocksReady);
				            } else {
				                // Round down to include only full blocks,
				                // less the number of blocks that must remain in the buffer
				                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
				            }

				            // Count words ready
				            var nWordsReady = nBlocksReady * blockSize;

				            // Count bytes ready
				            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

				            // Process blocks
				            if (nWordsReady) {
				                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
				                    // Perform concrete-algorithm logic
				                    this._doProcessBlock(dataWords, offset);
				                }

				                // Remove processed words
				                processedWords = dataWords.splice(0, nWordsReady);
				                data.sigBytes -= nBytesReady;
				            }

				            // Return processed words
				            return new WordArray.init(processedWords, nBytesReady);
				        },

				        /**
				         * Creates a copy of this object.
				         *
				         * @return {Object} The clone.
				         *
				         * @example
				         *
				         *     var clone = bufferedBlockAlgorithm.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);
				            clone._data = this._data.clone();

				            return clone;
				        },

				        _minBufferSize: 0
				    });

				    /**
				     * Abstract hasher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
				     */
				    C_lib.Hasher = BufferedBlockAlgorithm.extend({
				        /**
				         * Configuration options.
				         */
				        cfg: Base.extend(),

				        /**
				         * Initializes a newly created hasher.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
				         *
				         * @example
				         *
				         *     var hasher = CryptoJS.algo.SHA256.create();
				         */
				        init: function (cfg) {
				            // Apply config defaults
				            this.cfg = this.cfg.extend(cfg);

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this hasher to its initial state.
				         *
				         * @example
				         *
				         *     hasher.reset();
				         */
				        reset: function () {
				            // Reset data buffer
				            BufferedBlockAlgorithm.reset.call(this);

				            // Perform concrete-hasher logic
				            this._doReset();
				        },

				        /**
				         * Updates this hasher with a message.
				         *
				         * @param {WordArray|string} messageUpdate The message to append.
				         *
				         * @return {Hasher} This hasher.
				         *
				         * @example
				         *
				         *     hasher.update('message');
				         *     hasher.update(wordArray);
				         */
				        update: function (messageUpdate) {
				            // Append
				            this._append(messageUpdate);

				            // Update the hash
				            this._process();

				            // Chainable
				            return this;
				        },

				        /**
				         * Finalizes the hash computation.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} messageUpdate (Optional) A final message update.
				         *
				         * @return {WordArray} The hash.
				         *
				         * @example
				         *
				         *     var hash = hasher.finalize();
				         *     var hash = hasher.finalize('message');
				         *     var hash = hasher.finalize(wordArray);
				         */
				        finalize: function (messageUpdate) {
				            // Final message update
				            if (messageUpdate) {
				                this._append(messageUpdate);
				            }

				            // Perform concrete-hasher logic
				            var hash = this._doFinalize();

				            return hash;
				        },

				        blockSize: 512/32,

				        /**
				         * Creates a shortcut function to a hasher's object interface.
				         *
				         * @param {Hasher} hasher The hasher to create a helper for.
				         *
				         * @return {Function} The shortcut function.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
				         */
				        _createHelper: function (hasher) {
				            return function (message, cfg) {
				                return new hasher.init(cfg).finalize(message);
				            };
				        },

				        /**
				         * Creates a shortcut function to the HMAC's object interface.
				         *
				         * @param {Hasher} hasher The hasher to use in this HMAC helper.
				         *
				         * @return {Function} The shortcut function.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
				         */
				        _createHmacHelper: function (hasher) {
				            return function (message, key) {
				                return new C_algo.HMAC.init(hasher, key).finalize(message);
				            };
				        }
				    });

				    /**
				     * Algorithm namespace.
				     */
				    var C_algo = C.algo = {};

				    return C;
				}(Math));


				return CryptoJS;

			})); 
		} (core, core.exports));
		return core.exports;
	}

	var x64Core = {exports: {}};

	x64Core.exports;

	var hasRequiredX64Core;

	function requireX64Core () {
		if (hasRequiredX64Core) return x64Core.exports;
		hasRequiredX64Core = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var X32WordArray = C_lib.WordArray;

				    /**
				     * x64 namespace.
				     */
				    var C_x64 = C.x64 = {};

				    /**
				     * A 64-bit word.
				     */
				    C_x64.Word = Base.extend({
				        /**
				         * Initializes a newly created 64-bit word.
				         *
				         * @param {number} high The high 32 bits.
				         * @param {number} low The low 32 bits.
				         *
				         * @example
				         *
				         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
				         */
				        init: function (high, low) {
				            this.high = high;
				            this.low = low;
				        }

				        /**
				         * Bitwise NOTs this word.
				         *
				         * @return {X64Word} A new x64-Word object after negating.
				         *
				         * @example
				         *
				         *     var negated = x64Word.not();
				         */
				        // not: function () {
				            // var high = ~this.high;
				            // var low = ~this.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise ANDs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to AND with this word.
				         *
				         * @return {X64Word} A new x64-Word object after ANDing.
				         *
				         * @example
				         *
				         *     var anded = x64Word.and(anotherX64Word);
				         */
				        // and: function (word) {
				            // var high = this.high & word.high;
				            // var low = this.low & word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise ORs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to OR with this word.
				         *
				         * @return {X64Word} A new x64-Word object after ORing.
				         *
				         * @example
				         *
				         *     var ored = x64Word.or(anotherX64Word);
				         */
				        // or: function (word) {
				            // var high = this.high | word.high;
				            // var low = this.low | word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Bitwise XORs this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to XOR with this word.
				         *
				         * @return {X64Word} A new x64-Word object after XORing.
				         *
				         * @example
				         *
				         *     var xored = x64Word.xor(anotherX64Word);
				         */
				        // xor: function (word) {
				            // var high = this.high ^ word.high;
				            // var low = this.low ^ word.low;

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Shifts this word n bits to the left.
				         *
				         * @param {number} n The number of bits to shift.
				         *
				         * @return {X64Word} A new x64-Word object after shifting.
				         *
				         * @example
				         *
				         *     var shifted = x64Word.shiftL(25);
				         */
				        // shiftL: function (n) {
				            // if (n < 32) {
				                // var high = (this.high << n) | (this.low >>> (32 - n));
				                // var low = this.low << n;
				            // } else {
				                // var high = this.low << (n - 32);
				                // var low = 0;
				            // }

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Shifts this word n bits to the right.
				         *
				         * @param {number} n The number of bits to shift.
				         *
				         * @return {X64Word} A new x64-Word object after shifting.
				         *
				         * @example
				         *
				         *     var shifted = x64Word.shiftR(7);
				         */
				        // shiftR: function (n) {
				            // if (n < 32) {
				                // var low = (this.low >>> n) | (this.high << (32 - n));
				                // var high = this.high >>> n;
				            // } else {
				                // var low = this.high >>> (n - 32);
				                // var high = 0;
				            // }

				            // return X64Word.create(high, low);
				        // },

				        /**
				         * Rotates this word n bits to the left.
				         *
				         * @param {number} n The number of bits to rotate.
				         *
				         * @return {X64Word} A new x64-Word object after rotating.
				         *
				         * @example
				         *
				         *     var rotated = x64Word.rotL(25);
				         */
				        // rotL: function (n) {
				            // return this.shiftL(n).or(this.shiftR(64 - n));
				        // },

				        /**
				         * Rotates this word n bits to the right.
				         *
				         * @param {number} n The number of bits to rotate.
				         *
				         * @return {X64Word} A new x64-Word object after rotating.
				         *
				         * @example
				         *
				         *     var rotated = x64Word.rotR(7);
				         */
				        // rotR: function (n) {
				            // return this.shiftR(n).or(this.shiftL(64 - n));
				        // },

				        /**
				         * Adds this word with the passed word.
				         *
				         * @param {X64Word} word The x64-Word to add with this word.
				         *
				         * @return {X64Word} A new x64-Word object after adding.
				         *
				         * @example
				         *
				         *     var added = x64Word.add(anotherX64Word);
				         */
				        // add: function (word) {
				            // var low = (this.low + word.low) | 0;
				            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
				            // var high = (this.high + word.high + carry) | 0;

				            // return X64Word.create(high, low);
				        // }
				    });

				    /**
				     * An array of 64-bit words.
				     *
				     * @property {Array} words The array of CryptoJS.x64.Word objects.
				     * @property {number} sigBytes The number of significant bytes in this word array.
				     */
				    C_x64.WordArray = Base.extend({
				        /**
				         * Initializes a newly created word array.
				         *
				         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
				         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create();
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create([
				         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
				         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
				         *     ]);
				         *
				         *     var wordArray = CryptoJS.x64.WordArray.create([
				         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
				         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
				         *     ], 10);
				         */
				        init: function (words, sigBytes) {
				            words = this.words = words || [];

				            if (sigBytes != undefined$1) {
				                this.sigBytes = sigBytes;
				            } else {
				                this.sigBytes = words.length * 8;
				            }
				        },

				        /**
				         * Converts this 64-bit word array to a 32-bit word array.
				         *
				         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
				         *
				         * @example
				         *
				         *     var x32WordArray = x64WordArray.toX32();
				         */
				        toX32: function () {
				            // Shortcuts
				            var x64Words = this.words;
				            var x64WordsLength = x64Words.length;

				            // Convert
				            var x32Words = [];
				            for (var i = 0; i < x64WordsLength; i++) {
				                var x64Word = x64Words[i];
				                x32Words.push(x64Word.high);
				                x32Words.push(x64Word.low);
				            }

				            return X32WordArray.create(x32Words, this.sigBytes);
				        },

				        /**
				         * Creates a copy of this word array.
				         *
				         * @return {X64WordArray} The clone.
				         *
				         * @example
				         *
				         *     var clone = x64WordArray.clone();
				         */
				        clone: function () {
				            var clone = Base.clone.call(this);

				            // Clone "words" array
				            var words = clone.words = this.words.slice(0);

				            // Clone each X64Word object
				            var wordsLength = words.length;
				            for (var i = 0; i < wordsLength; i++) {
				                words[i] = words[i].clone();
				            }

				            return clone;
				        }
				    });
				}());


				return CryptoJS;

			})); 
		} (x64Core, x64Core.exports));
		return x64Core.exports;
	}

	var libTypedarrays = {exports: {}};

	libTypedarrays.exports;

	var hasRequiredLibTypedarrays;

	function requireLibTypedarrays () {
		if (hasRequiredLibTypedarrays) return libTypedarrays.exports;
		hasRequiredLibTypedarrays = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Check if typed arrays are supported
				    if (typeof ArrayBuffer != 'function') {
				        return;
				    }

				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;

				    // Reference original init
				    var superInit = WordArray.init;

				    // Augment WordArray.init to handle typed arrays
				    var subInit = WordArray.init = function (typedArray) {
				        // Convert buffers to uint8
				        if (typedArray instanceof ArrayBuffer) {
				            typedArray = new Uint8Array(typedArray);
				        }

				        // Convert other array views to uint8
				        if (
				            typedArray instanceof Int8Array ||
				            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
				            typedArray instanceof Int16Array ||
				            typedArray instanceof Uint16Array ||
				            typedArray instanceof Int32Array ||
				            typedArray instanceof Uint32Array ||
				            typedArray instanceof Float32Array ||
				            typedArray instanceof Float64Array
				        ) {
				            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
				        }

				        // Handle Uint8Array
				        if (typedArray instanceof Uint8Array) {
				            // Shortcut
				            var typedArrayByteLength = typedArray.byteLength;

				            // Extract bytes
				            var words = [];
				            for (var i = 0; i < typedArrayByteLength; i++) {
				                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
				            }

				            // Initialize this word array
				            superInit.call(this, words, typedArrayByteLength);
				        } else {
				            // Else call normal init
				            superInit.apply(this, arguments);
				        }
				    };

				    subInit.prototype = WordArray;
				}());


				return CryptoJS.lib.WordArray;

			})); 
		} (libTypedarrays, libTypedarrays.exports));
		return libTypedarrays.exports;
	}

	var encUtf16 = {exports: {}};

	encUtf16.exports;

	var hasRequiredEncUtf16;

	function requireEncUtf16 () {
		if (hasRequiredEncUtf16) return encUtf16.exports;
		hasRequiredEncUtf16 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * UTF-16 BE encoding strategy.
				     */
				    C_enc.Utf16 = C_enc.Utf16BE = {
				        /**
				         * Converts a word array to a UTF-16 BE string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-16 BE string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var utf16Chars = [];
				            for (var i = 0; i < sigBytes; i += 2) {
				                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
				                utf16Chars.push(String.fromCharCode(codePoint));
				            }

				            return utf16Chars.join('');
				        },

				        /**
				         * Converts a UTF-16 BE string to a word array.
				         *
				         * @param {string} utf16Str The UTF-16 BE string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
				         */
				        parse: function (utf16Str) {
				            // Shortcut
				            var utf16StrLength = utf16Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < utf16StrLength; i++) {
				                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
				            }

				            return WordArray.create(words, utf16StrLength * 2);
				        }
				    };

				    /**
				     * UTF-16 LE encoding strategy.
				     */
				    C_enc.Utf16LE = {
				        /**
				         * Converts a word array to a UTF-16 LE string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The UTF-16 LE string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;

				            // Convert
				            var utf16Chars = [];
				            for (var i = 0; i < sigBytes; i += 2) {
				                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
				                utf16Chars.push(String.fromCharCode(codePoint));
				            }

				            return utf16Chars.join('');
				        },

				        /**
				         * Converts a UTF-16 LE string to a word array.
				         *
				         * @param {string} utf16Str The UTF-16 LE string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
				         */
				        parse: function (utf16Str) {
				            // Shortcut
				            var utf16StrLength = utf16Str.length;

				            // Convert
				            var words = [];
				            for (var i = 0; i < utf16StrLength; i++) {
				                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
				            }

				            return WordArray.create(words, utf16StrLength * 2);
				        }
				    };

				    function swapEndian(word) {
				        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
				    }
				}());


				return CryptoJS.enc.Utf16;

			})); 
		} (encUtf16, encUtf16.exports));
		return encUtf16.exports;
	}

	var encBase64 = {exports: {}};

	encBase64.exports;

	var hasRequiredEncBase64;

	function requireEncBase64 () {
		if (hasRequiredEncBase64) return encBase64.exports;
		hasRequiredEncBase64 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * Base64 encoding strategy.
				     */
				    C_enc.Base64 = {
				        /**
				         * Converts a word array to a Base64 string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @return {string} The Base64 string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
				         */
				        stringify: function (wordArray) {
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;
				            var map = this._map;

				            // Clamp excess bits
				            wordArray.clamp();

				            // Convert
				            var base64Chars = [];
				            for (var i = 0; i < sigBytes; i += 3) {
				                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
				                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
				                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

				                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

				                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
				                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
				                }
				            }

				            // Add padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                while (base64Chars.length % 4) {
				                    base64Chars.push(paddingChar);
				                }
				            }

				            return base64Chars.join('');
				        },

				        /**
				         * Converts a Base64 string to a word array.
				         *
				         * @param {string} base64Str The Base64 string.
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
				         */
				        parse: function (base64Str) {
				            // Shortcuts
				            var base64StrLength = base64Str.length;
				            var map = this._map;
				            var reverseMap = this._reverseMap;

				            if (!reverseMap) {
				                    reverseMap = this._reverseMap = [];
				                    for (var j = 0; j < map.length; j++) {
				                        reverseMap[map.charCodeAt(j)] = j;
				                    }
				            }

				            // Ignore padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                var paddingIndex = base64Str.indexOf(paddingChar);
				                if (paddingIndex !== -1) {
				                    base64StrLength = paddingIndex;
				                }
				            }

				            // Convert
				            return parseLoop(base64Str, base64StrLength, reverseMap);

				        },

				        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
				    };

				    function parseLoop(base64Str, base64StrLength, reverseMap) {
				      var words = [];
				      var nBytes = 0;
				      for (var i = 0; i < base64StrLength; i++) {
				          if (i % 4) {
				              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
				              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
				              var bitsCombined = bits1 | bits2;
				              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
				              nBytes++;
				          }
				      }
				      return WordArray.create(words, nBytes);
				    }
				}());


				return CryptoJS.enc.Base64;

			})); 
		} (encBase64, encBase64.exports));
		return encBase64.exports;
	}

	var encBase64url = {exports: {}};

	encBase64url.exports;

	var hasRequiredEncBase64url;

	function requireEncBase64url () {
		if (hasRequiredEncBase64url) return encBase64url.exports;
		hasRequiredEncBase64url = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_enc = C.enc;

				    /**
				     * Base64url encoding strategy.
				     */
				    C_enc.Base64url = {
				        /**
				         * Converts a word array to a Base64url string.
				         *
				         * @param {WordArray} wordArray The word array.
				         *
				         * @param {boolean} urlSafe Whether to use url safe
				         *
				         * @return {string} The Base64url string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
				         */
				        stringify: function (wordArray, urlSafe) {
				            if (urlSafe === undefined) {
				                urlSafe = true;
				            }
				            // Shortcuts
				            var words = wordArray.words;
				            var sigBytes = wordArray.sigBytes;
				            var map = urlSafe ? this._safe_map : this._map;

				            // Clamp excess bits
				            wordArray.clamp();

				            // Convert
				            var base64Chars = [];
				            for (var i = 0; i < sigBytes; i += 3) {
				                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
				                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
				                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

				                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

				                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
				                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
				                }
				            }

				            // Add padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                while (base64Chars.length % 4) {
				                    base64Chars.push(paddingChar);
				                }
				            }

				            return base64Chars.join('');
				        },

				        /**
				         * Converts a Base64url string to a word array.
				         *
				         * @param {string} base64Str The Base64url string.
				         *
				         * @param {boolean} urlSafe Whether to use url safe
				         *
				         * @return {WordArray} The word array.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
				         */
				        parse: function (base64Str, urlSafe) {
				            if (urlSafe === undefined) {
				                urlSafe = true;
				            }

				            // Shortcuts
				            var base64StrLength = base64Str.length;
				            var map = urlSafe ? this._safe_map : this._map;
				            var reverseMap = this._reverseMap;

				            if (!reverseMap) {
				                reverseMap = this._reverseMap = [];
				                for (var j = 0; j < map.length; j++) {
				                    reverseMap[map.charCodeAt(j)] = j;
				                }
				            }

				            // Ignore padding
				            var paddingChar = map.charAt(64);
				            if (paddingChar) {
				                var paddingIndex = base64Str.indexOf(paddingChar);
				                if (paddingIndex !== -1) {
				                    base64StrLength = paddingIndex;
				                }
				            }

				            // Convert
				            return parseLoop(base64Str, base64StrLength, reverseMap);

				        },

				        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
				        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
				    };

				    function parseLoop(base64Str, base64StrLength, reverseMap) {
				        var words = [];
				        var nBytes = 0;
				        for (var i = 0; i < base64StrLength; i++) {
				            if (i % 4) {
				                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
				                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
				                var bitsCombined = bits1 | bits2;
				                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
				                nBytes++;
				            }
				        }
				        return WordArray.create(words, nBytes);
				    }
				}());


				return CryptoJS.enc.Base64url;

			})); 
		} (encBase64url, encBase64url.exports));
		return encBase64url.exports;
	}

	var md5$2 = {exports: {}};

	md5$2.exports;

	var hasRequiredMd5;

	function requireMd5 () {
		if (hasRequiredMd5) return md5$2.exports;
		hasRequiredMd5 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Constants table
				    var T = [];

				    // Compute constants
				    (function () {
				        for (var i = 0; i < 64; i++) {
				            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
				        }
				    }());

				    /**
				     * MD5 hash algorithm.
				     */
				    var MD5 = C_algo.MD5 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0x67452301, 0xefcdab89,
				                0x98badcfe, 0x10325476
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Swap endian
				            for (var i = 0; i < 16; i++) {
				                // Shortcuts
				                var offset_i = offset + i;
				                var M_offset_i = M[offset_i];

				                M[offset_i] = (
				                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
				                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
				                );
				            }

				            // Shortcuts
				            var H = this._hash.words;

				            var M_offset_0  = M[offset + 0];
				            var M_offset_1  = M[offset + 1];
				            var M_offset_2  = M[offset + 2];
				            var M_offset_3  = M[offset + 3];
				            var M_offset_4  = M[offset + 4];
				            var M_offset_5  = M[offset + 5];
				            var M_offset_6  = M[offset + 6];
				            var M_offset_7  = M[offset + 7];
				            var M_offset_8  = M[offset + 8];
				            var M_offset_9  = M[offset + 9];
				            var M_offset_10 = M[offset + 10];
				            var M_offset_11 = M[offset + 11];
				            var M_offset_12 = M[offset + 12];
				            var M_offset_13 = M[offset + 13];
				            var M_offset_14 = M[offset + 14];
				            var M_offset_15 = M[offset + 15];

				            // Working variables
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];

				            // Computation
				            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
				            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
				            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
				            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
				            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
				            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
				            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
				            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
				            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
				            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
				            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
				            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
				            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
				            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
				            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
				            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

				            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
				            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
				            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
				            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
				            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
				            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
				            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
				            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
				            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
				            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
				            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
				            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
				            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
				            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
				            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
				            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

				            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
				            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
				            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
				            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
				            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
				            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
				            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
				            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
				            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
				            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
				            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
				            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
				            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
				            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
				            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
				            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

				            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
				            d = II(d, a, b, c, M_offset_7,  10, T[49]);
				            c = II(c, d, a, b, M_offset_14, 15, T[50]);
				            b = II(b, c, d, a, M_offset_5,  21, T[51]);
				            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
				            d = II(d, a, b, c, M_offset_3,  10, T[53]);
				            c = II(c, d, a, b, M_offset_10, 15, T[54]);
				            b = II(b, c, d, a, M_offset_1,  21, T[55]);
				            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
				            d = II(d, a, b, c, M_offset_15, 10, T[57]);
				            c = II(c, d, a, b, M_offset_6,  15, T[58]);
				            b = II(b, c, d, a, M_offset_13, 21, T[59]);
				            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
				            d = II(d, a, b, c, M_offset_11, 10, T[61]);
				            c = II(c, d, a, b, M_offset_2,  15, T[62]);
				            b = II(b, c, d, a, M_offset_9,  21, T[63]);

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

				            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
				            var nBitsTotalL = nBitsTotal;
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
				                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
				            );
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
				                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
				            );

				            data.sigBytes = (dataWords.length + 1) * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var hash = this._hash;
				            var H = hash.words;

				            // Swap endian
				            for (var i = 0; i < 4; i++) {
				                // Shortcut
				                var H_i = H[i];

				                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
				                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
				            }

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    function FF(a, b, c, d, x, s, t) {
				        var n = a + ((b & c) | (~b & d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function GG(a, b, c, d, x, s, t) {
				        var n = a + ((b & d) | (c & ~d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function HH(a, b, c, d, x, s, t) {
				        var n = a + (b ^ c ^ d) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    function II(a, b, c, d, x, s, t) {
				        var n = a + (c ^ (b | ~d)) + x + t;
				        return ((n << s) | (n >>> (32 - s))) + b;
				    }

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.MD5('message');
				     *     var hash = CryptoJS.MD5(wordArray);
				     */
				    C.MD5 = Hasher._createHelper(MD5);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacMD5(message, key);
				     */
				    C.HmacMD5 = Hasher._createHmacHelper(MD5);
				}(Math));


				return CryptoJS.MD5;

			})); 
		} (md5$2, md5$2.exports));
		return md5$2.exports;
	}

	var sha1$1 = {exports: {}};

	sha1$1.exports;

	var hasRequiredSha1;

	function requireSha1 () {
		if (hasRequiredSha1) return sha1$1.exports;
		hasRequiredSha1 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Reusable object
				    var W = [];

				    /**
				     * SHA-1 hash algorithm.
				     */
				    var SHA1 = C_algo.SHA1 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0x67452301, 0xefcdab89,
				                0x98badcfe, 0x10325476,
				                0xc3d2e1f0
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var H = this._hash.words;

				            // Working variables
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];
				            var e = H[4];

				            // Computation
				            for (var i = 0; i < 80; i++) {
				                if (i < 16) {
				                    W[i] = M[offset + i] | 0;
				                } else {
				                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
				                    W[i] = (n << 1) | (n >>> 31);
				                }

				                var t = ((a << 5) | (a >>> 27)) + e + W[i];
				                if (i < 20) {
				                    t += ((b & c) | (~b & d)) + 0x5a827999;
				                } else if (i < 40) {
				                    t += (b ^ c ^ d) + 0x6ed9eba1;
				                } else if (i < 60) {
				                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
				                } else /* if (i < 80) */ {
				                    t += (b ^ c ^ d) - 0x359d3e2a;
				                }

				                e = d;
				                d = c;
				                c = (b << 30) | (b >>> 2);
				                b = a;
				                a = t;
				            }

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				            H[4] = (H[4] + e) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Return final computed hash
				            return this._hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA1('message');
				     *     var hash = CryptoJS.SHA1(wordArray);
				     */
				    C.SHA1 = Hasher._createHelper(SHA1);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA1(message, key);
				     */
				    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
				}());


				return CryptoJS.SHA1;

			})); 
		} (sha1$1, sha1$1.exports));
		return sha1$1.exports;
	}

	var sha256$1 = {exports: {}};

	sha256$1.exports;

	var hasRequiredSha256;

	function requireSha256 () {
		if (hasRequiredSha256) return sha256$1.exports;
		hasRequiredSha256 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Initialization and round constants tables
				    var H = [];
				    var K = [];

				    // Compute constants
				    (function () {
				        function isPrime(n) {
				            var sqrtN = Math.sqrt(n);
				            for (var factor = 2; factor <= sqrtN; factor++) {
				                if (!(n % factor)) {
				                    return false;
				                }
				            }

				            return true;
				        }

				        function getFractionalBits(n) {
				            return ((n - (n | 0)) * 0x100000000) | 0;
				        }

				        var n = 2;
				        var nPrime = 0;
				        while (nPrime < 64) {
				            if (isPrime(n)) {
				                if (nPrime < 8) {
				                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
				                }
				                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

				                nPrime++;
				            }

				            n++;
				        }
				    }());

				    // Reusable object
				    var W = [];

				    /**
				     * SHA-256 hash algorithm.
				     */
				    var SHA256 = C_algo.SHA256 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init(H.slice(0));
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var H = this._hash.words;

				            // Working variables
				            var a = H[0];
				            var b = H[1];
				            var c = H[2];
				            var d = H[3];
				            var e = H[4];
				            var f = H[5];
				            var g = H[6];
				            var h = H[7];

				            // Computation
				            for (var i = 0; i < 64; i++) {
				                if (i < 16) {
				                    W[i] = M[offset + i] | 0;
				                } else {
				                    var gamma0x = W[i - 15];
				                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
				                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
				                                   (gamma0x >>> 3);

				                    var gamma1x = W[i - 2];
				                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
				                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
				                                   (gamma1x >>> 10);

				                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
				                }

				                var ch  = (e & f) ^ (~e & g);
				                var maj = (a & b) ^ (a & c) ^ (b & c);

				                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
				                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

				                var t1 = h + sigma1 + ch + K[i] + W[i];
				                var t2 = sigma0 + maj;

				                h = g;
				                g = f;
				                f = e;
				                e = (d + t1) | 0;
				                d = c;
				                c = b;
				                b = a;
				                a = (t1 + t2) | 0;
				            }

				            // Intermediate hash value
				            H[0] = (H[0] + a) | 0;
				            H[1] = (H[1] + b) | 0;
				            H[2] = (H[2] + c) | 0;
				            H[3] = (H[3] + d) | 0;
				            H[4] = (H[4] + e) | 0;
				            H[5] = (H[5] + f) | 0;
				            H[6] = (H[6] + g) | 0;
				            H[7] = (H[7] + h) | 0;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Return final computed hash
				            return this._hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA256('message');
				     *     var hash = CryptoJS.SHA256(wordArray);
				     */
				    C.SHA256 = Hasher._createHelper(SHA256);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA256(message, key);
				     */
				    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
				}(Math));


				return CryptoJS.SHA256;

			})); 
		} (sha256$1, sha256$1.exports));
		return sha256$1.exports;
	}

	var sha224$1 = {exports: {}};

	sha224$1.exports;

	var hasRequiredSha224;

	function requireSha224 () {
		if (hasRequiredSha224) return sha224$1.exports;
		hasRequiredSha224 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireSha256());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var SHA256 = C_algo.SHA256;

				    /**
				     * SHA-224 hash algorithm.
				     */
				    var SHA224 = C_algo.SHA224 = SHA256.extend({
				        _doReset: function () {
				            this._hash = new WordArray.init([
				                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
				                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
				            ]);
				        },

				        _doFinalize: function () {
				            var hash = SHA256._doFinalize.call(this);

				            hash.sigBytes -= 4;

				            return hash;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA224('message');
				     *     var hash = CryptoJS.SHA224(wordArray);
				     */
				    C.SHA224 = SHA256._createHelper(SHA224);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA224(message, key);
				     */
				    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
				}());


				return CryptoJS.SHA224;

			})); 
		} (sha224$1, sha224$1.exports));
		return sha224$1.exports;
	}

	var sha512$1 = {exports: {}};

	sha512$1.exports;

	var hasRequiredSha512;

	function requireSha512 () {
		if (hasRequiredSha512) return sha512$1.exports;
		hasRequiredSha512 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireX64Core());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Hasher = C_lib.Hasher;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var X64WordArray = C_x64.WordArray;
				    var C_algo = C.algo;

				    function X64Word_create() {
				        return X64Word.create.apply(X64Word, arguments);
				    }

				    // Constants
				    var K = [
				        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
				        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
				        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
				        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
				        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
				        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
				        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
				        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
				        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
				        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
				        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
				        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
				        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
				        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
				        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
				        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
				        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
				        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
				        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
				        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
				        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
				        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
				        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
				        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
				        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
				        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
				        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
				        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
				        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
				        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
				        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
				        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
				        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
				        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
				        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
				        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
				        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
				        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
				        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
				        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
				    ];

				    // Reusable objects
				    var W = [];
				    (function () {
				        for (var i = 0; i < 80; i++) {
				            W[i] = X64Word_create();
				        }
				    }());

				    /**
				     * SHA-512 hash algorithm.
				     */
				    var SHA512 = C_algo.SHA512 = Hasher.extend({
				        _doReset: function () {
				            this._hash = new X64WordArray.init([
				                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
				                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
				                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
				                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
				            ]);
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcuts
				            var H = this._hash.words;

				            var H0 = H[0];
				            var H1 = H[1];
				            var H2 = H[2];
				            var H3 = H[3];
				            var H4 = H[4];
				            var H5 = H[5];
				            var H6 = H[6];
				            var H7 = H[7];

				            var H0h = H0.high;
				            var H0l = H0.low;
				            var H1h = H1.high;
				            var H1l = H1.low;
				            var H2h = H2.high;
				            var H2l = H2.low;
				            var H3h = H3.high;
				            var H3l = H3.low;
				            var H4h = H4.high;
				            var H4l = H4.low;
				            var H5h = H5.high;
				            var H5l = H5.low;
				            var H6h = H6.high;
				            var H6l = H6.low;
				            var H7h = H7.high;
				            var H7l = H7.low;

				            // Working variables
				            var ah = H0h;
				            var al = H0l;
				            var bh = H1h;
				            var bl = H1l;
				            var ch = H2h;
				            var cl = H2l;
				            var dh = H3h;
				            var dl = H3l;
				            var eh = H4h;
				            var el = H4l;
				            var fh = H5h;
				            var fl = H5l;
				            var gh = H6h;
				            var gl = H6l;
				            var hh = H7h;
				            var hl = H7l;

				            // Rounds
				            for (var i = 0; i < 80; i++) {
				                var Wil;
				                var Wih;

				                // Shortcut
				                var Wi = W[i];

				                // Extend message
				                if (i < 16) {
				                    Wih = Wi.high = M[offset + i * 2]     | 0;
				                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
				                } else {
				                    // Gamma0
				                    var gamma0x  = W[i - 15];
				                    var gamma0xh = gamma0x.high;
				                    var gamma0xl = gamma0x.low;
				                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
				                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

				                    // Gamma1
				                    var gamma1x  = W[i - 2];
				                    var gamma1xh = gamma1x.high;
				                    var gamma1xl = gamma1x.low;
				                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
				                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

				                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
				                    var Wi7  = W[i - 7];
				                    var Wi7h = Wi7.high;
				                    var Wi7l = Wi7.low;

				                    var Wi16  = W[i - 16];
				                    var Wi16h = Wi16.high;
				                    var Wi16l = Wi16.low;

				                    Wil = gamma0l + Wi7l;
				                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
				                    Wil = Wil + gamma1l;
				                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
				                    Wil = Wil + Wi16l;
				                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

				                    Wi.high = Wih;
				                    Wi.low  = Wil;
				                }

				                var chh  = (eh & fh) ^ (~eh & gh);
				                var chl  = (el & fl) ^ (~el & gl);
				                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
				                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

				                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
				                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
				                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
				                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

				                // t1 = h + sigma1 + ch + K[i] + W[i]
				                var Ki  = K[i];
				                var Kih = Ki.high;
				                var Kil = Ki.low;

				                var t1l = hl + sigma1l;
				                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
				                var t1l = t1l + chl;
				                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
				                var t1l = t1l + Kil;
				                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
				                var t1l = t1l + Wil;
				                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

				                // t2 = sigma0 + maj
				                var t2l = sigma0l + majl;
				                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

				                // Update working variables
				                hh = gh;
				                hl = gl;
				                gh = fh;
				                gl = fl;
				                fh = eh;
				                fl = el;
				                el = (dl + t1l) | 0;
				                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
				                dh = ch;
				                dl = cl;
				                ch = bh;
				                cl = bl;
				                bh = ah;
				                bl = al;
				                al = (t1l + t2l) | 0;
				                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
				            }

				            // Intermediate hash value
				            H0l = H0.low  = (H0l + al);
				            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
				            H1l = H1.low  = (H1l + bl);
				            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
				            H2l = H2.low  = (H2l + cl);
				            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
				            H3l = H3.low  = (H3l + dl);
				            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
				            H4l = H4.low  = (H4l + el);
				            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
				            H5l = H5.low  = (H5l + fl);
				            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
				            H6l = H6.low  = (H6l + gl);
				            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
				            H7l = H7.low  = (H7l + hl);
				            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
				            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Convert hash to 32-bit word array before returning
				            var hash = this._hash.toX32();

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        },

				        blockSize: 1024/32
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA512('message');
				     *     var hash = CryptoJS.SHA512(wordArray);
				     */
				    C.SHA512 = Hasher._createHelper(SHA512);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA512(message, key);
				     */
				    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
				}());


				return CryptoJS.SHA512;

			})); 
		} (sha512$1, sha512$1.exports));
		return sha512$1.exports;
	}

	var sha384$1 = {exports: {}};

	sha384$1.exports;

	var hasRequiredSha384;

	function requireSha384 () {
		if (hasRequiredSha384) return sha384$1.exports;
		hasRequiredSha384 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireX64Core(), requireSha512());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var X64WordArray = C_x64.WordArray;
				    var C_algo = C.algo;
				    var SHA512 = C_algo.SHA512;

				    /**
				     * SHA-384 hash algorithm.
				     */
				    var SHA384 = C_algo.SHA384 = SHA512.extend({
				        _doReset: function () {
				            this._hash = new X64WordArray.init([
				                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
				                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
				                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
				                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
				            ]);
				        },

				        _doFinalize: function () {
				            var hash = SHA512._doFinalize.call(this);

				            hash.sigBytes -= 16;

				            return hash;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA384('message');
				     *     var hash = CryptoJS.SHA384(wordArray);
				     */
				    C.SHA384 = SHA512._createHelper(SHA384);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA384(message, key);
				     */
				    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
				}());


				return CryptoJS.SHA384;

			})); 
		} (sha384$1, sha384$1.exports));
		return sha384$1.exports;
	}

	var sha3 = {exports: {}};

	sha3.exports;

	var hasRequiredSha3;

	function requireSha3 () {
		if (hasRequiredSha3) return sha3.exports;
		hasRequiredSha3 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireX64Core());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_x64 = C.x64;
				    var X64Word = C_x64.Word;
				    var C_algo = C.algo;

				    // Constants tables
				    var RHO_OFFSETS = [];
				    var PI_INDEXES  = [];
				    var ROUND_CONSTANTS = [];

				    // Compute Constants
				    (function () {
				        // Compute rho offset constants
				        var x = 1, y = 0;
				        for (var t = 0; t < 24; t++) {
				            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

				            var newX = y % 5;
				            var newY = (2 * x + 3 * y) % 5;
				            x = newX;
				            y = newY;
				        }

				        // Compute pi index constants
				        for (var x = 0; x < 5; x++) {
				            for (var y = 0; y < 5; y++) {
				                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
				            }
				        }

				        // Compute round constants
				        var LFSR = 0x01;
				        for (var i = 0; i < 24; i++) {
				            var roundConstantMsw = 0;
				            var roundConstantLsw = 0;

				            for (var j = 0; j < 7; j++) {
				                if (LFSR & 0x01) {
				                    var bitPosition = (1 << j) - 1;
				                    if (bitPosition < 32) {
				                        roundConstantLsw ^= 1 << bitPosition;
				                    } else /* if (bitPosition >= 32) */ {
				                        roundConstantMsw ^= 1 << (bitPosition - 32);
				                    }
				                }

				                // Compute next LFSR
				                if (LFSR & 0x80) {
				                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
				                    LFSR = (LFSR << 1) ^ 0x71;
				                } else {
				                    LFSR <<= 1;
				                }
				            }

				            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
				        }
				    }());

				    // Reusable objects for temporary values
				    var T = [];
				    (function () {
				        for (var i = 0; i < 25; i++) {
				            T[i] = X64Word.create();
				        }
				    }());

				    /**
				     * SHA-3 hash algorithm.
				     */
				    var SHA3 = C_algo.SHA3 = Hasher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} outputLength
				         *   The desired number of bits in the output hash.
				         *   Only values permitted are: 224, 256, 384, 512.
				         *   Default: 512
				         */
				        cfg: Hasher.cfg.extend({
				            outputLength: 512
				        }),

				        _doReset: function () {
				            var state = this._state = [];
				            for (var i = 0; i < 25; i++) {
				                state[i] = new X64Word.init();
				            }

				            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcuts
				            var state = this._state;
				            var nBlockSizeLanes = this.blockSize / 2;

				            // Absorb
				            for (var i = 0; i < nBlockSizeLanes; i++) {
				                // Shortcuts
				                var M2i  = M[offset + 2 * i];
				                var M2i1 = M[offset + 2 * i + 1];

				                // Swap endian
				                M2i = (
				                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
				                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
				                );
				                M2i1 = (
				                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
				                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
				                );

				                // Absorb message into state
				                var lane = state[i];
				                lane.high ^= M2i1;
				                lane.low  ^= M2i;
				            }

				            // Rounds
				            for (var round = 0; round < 24; round++) {
				                // Theta
				                for (var x = 0; x < 5; x++) {
				                    // Mix column lanes
				                    var tMsw = 0, tLsw = 0;
				                    for (var y = 0; y < 5; y++) {
				                        var lane = state[x + 5 * y];
				                        tMsw ^= lane.high;
				                        tLsw ^= lane.low;
				                    }

				                    // Temporary values
				                    var Tx = T[x];
				                    Tx.high = tMsw;
				                    Tx.low  = tLsw;
				                }
				                for (var x = 0; x < 5; x++) {
				                    // Shortcuts
				                    var Tx4 = T[(x + 4) % 5];
				                    var Tx1 = T[(x + 1) % 5];
				                    var Tx1Msw = Tx1.high;
				                    var Tx1Lsw = Tx1.low;

				                    // Mix surrounding columns
				                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
				                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
				                    for (var y = 0; y < 5; y++) {
				                        var lane = state[x + 5 * y];
				                        lane.high ^= tMsw;
				                        lane.low  ^= tLsw;
				                    }
				                }

				                // Rho Pi
				                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
				                    var tMsw;
				                    var tLsw;

				                    // Shortcuts
				                    var lane = state[laneIndex];
				                    var laneMsw = lane.high;
				                    var laneLsw = lane.low;
				                    var rhoOffset = RHO_OFFSETS[laneIndex];

				                    // Rotate lanes
				                    if (rhoOffset < 32) {
				                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
				                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
				                    } else /* if (rhoOffset >= 32) */ {
				                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
				                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
				                    }

				                    // Transpose lanes
				                    var TPiLane = T[PI_INDEXES[laneIndex]];
				                    TPiLane.high = tMsw;
				                    TPiLane.low  = tLsw;
				                }

				                // Rho pi at x = y = 0
				                var T0 = T[0];
				                var state0 = state[0];
				                T0.high = state0.high;
				                T0.low  = state0.low;

				                // Chi
				                for (var x = 0; x < 5; x++) {
				                    for (var y = 0; y < 5; y++) {
				                        // Shortcuts
				                        var laneIndex = x + 5 * y;
				                        var lane = state[laneIndex];
				                        var TLane = T[laneIndex];
				                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
				                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

				                        // Mix rows
				                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
				                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
				                    }
				                }

				                // Iota
				                var lane = state[0];
				                var roundConstant = ROUND_CONSTANTS[round];
				                lane.high ^= roundConstant.high;
				                lane.low  ^= roundConstant.low;
				            }
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;
				            this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;
				            var blockSizeBits = this.blockSize * 32;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
				            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
				            data.sigBytes = dataWords.length * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var state = this._state;
				            var outputLengthBytes = this.cfg.outputLength / 8;
				            var outputLengthLanes = outputLengthBytes / 8;

				            // Squeeze
				            var hashWords = [];
				            for (var i = 0; i < outputLengthLanes; i++) {
				                // Shortcuts
				                var lane = state[i];
				                var laneMsw = lane.high;
				                var laneLsw = lane.low;

				                // Swap endian
				                laneMsw = (
				                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
				                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
				                );
				                laneLsw = (
				                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
				                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
				                );

				                // Squeeze state to retrieve hash
				                hashWords.push(laneLsw);
				                hashWords.push(laneMsw);
				            }

				            // Return final computed hash
				            return new WordArray.init(hashWords, outputLengthBytes);
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);

				            var state = clone._state = this._state.slice(0);
				            for (var i = 0; i < 25; i++) {
				                state[i] = state[i].clone();
				            }

				            return clone;
				        }
				    });

				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.SHA3('message');
				     *     var hash = CryptoJS.SHA3(wordArray);
				     */
				    C.SHA3 = Hasher._createHelper(SHA3);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacSHA3(message, key);
				     */
				    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
				}(Math));


				return CryptoJS.SHA3;

			})); 
		} (sha3, sha3.exports));
		return sha3.exports;
	}

	var ripemd160$1 = {exports: {}};

	ripemd160$1.exports;

	var hasRequiredRipemd160;

	function requireRipemd160 () {
		if (hasRequiredRipemd160) return ripemd160$1.exports;
		hasRequiredRipemd160 = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/** @preserve
				(c) 2012 by Cédric Mesnil. All rights reserved.

				Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

				    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
				    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*/

				(function (Math) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var Hasher = C_lib.Hasher;
				    var C_algo = C.algo;

				    // Constants table
				    var _zl = WordArray.create([
				        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
				        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
				        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
				        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
				        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
				    var _zr = WordArray.create([
				        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
				        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
				        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
				        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
				        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
				    var _sl = WordArray.create([
				         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
				        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
				        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
				          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
				        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
				    var _sr = WordArray.create([
				        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
				        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
				        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
				        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
				        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

				    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
				    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

				    /**
				     * RIPEMD160 hash algorithm.
				     */
				    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
				        _doReset: function () {
				            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
				        },

				        _doProcessBlock: function (M, offset) {

				            // Swap endian
				            for (var i = 0; i < 16; i++) {
				                // Shortcuts
				                var offset_i = offset + i;
				                var M_offset_i = M[offset_i];

				                // Swap
				                M[offset_i] = (
				                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
				                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
				                );
				            }
				            // Shortcut
				            var H  = this._hash.words;
				            var hl = _hl.words;
				            var hr = _hr.words;
				            var zl = _zl.words;
				            var zr = _zr.words;
				            var sl = _sl.words;
				            var sr = _sr.words;

				            // Working variables
				            var al, bl, cl, dl, el;
				            var ar, br, cr, dr, er;

				            ar = al = H[0];
				            br = bl = H[1];
				            cr = cl = H[2];
				            dr = dl = H[3];
				            er = el = H[4];
				            // Computation
				            var t;
				            for (var i = 0; i < 80; i += 1) {
				                t = (al +  M[offset+zl[i]])|0;
				                if (i<16){
					            t +=  f1(bl,cl,dl) + hl[0];
				                } else if (i<32) {
					            t +=  f2(bl,cl,dl) + hl[1];
				                } else if (i<48) {
					            t +=  f3(bl,cl,dl) + hl[2];
				                } else if (i<64) {
					            t +=  f4(bl,cl,dl) + hl[3];
				                } else {// if (i<80) {
					            t +=  f5(bl,cl,dl) + hl[4];
				                }
				                t = t|0;
				                t =  rotl(t,sl[i]);
				                t = (t+el)|0;
				                al = el;
				                el = dl;
				                dl = rotl(cl, 10);
				                cl = bl;
				                bl = t;

				                t = (ar + M[offset+zr[i]])|0;
				                if (i<16){
					            t +=  f5(br,cr,dr) + hr[0];
				                } else if (i<32) {
					            t +=  f4(br,cr,dr) + hr[1];
				                } else if (i<48) {
					            t +=  f3(br,cr,dr) + hr[2];
				                } else if (i<64) {
					            t +=  f2(br,cr,dr) + hr[3];
				                } else {// if (i<80) {
					            t +=  f1(br,cr,dr) + hr[4];
				                }
				                t = t|0;
				                t =  rotl(t,sr[i]) ;
				                t = (t+er)|0;
				                ar = er;
				                er = dr;
				                dr = rotl(cr, 10);
				                cr = br;
				                br = t;
				            }
				            // Intermediate hash value
				            t    = (H[1] + cl + dr)|0;
				            H[1] = (H[2] + dl + er)|0;
				            H[2] = (H[3] + el + ar)|0;
				            H[3] = (H[4] + al + br)|0;
				            H[4] = (H[0] + bl + cr)|0;
				            H[0] =  t;
				        },

				        _doFinalize: function () {
				            // Shortcuts
				            var data = this._data;
				            var dataWords = data.words;

				            var nBitsTotal = this._nDataBytes * 8;
				            var nBitsLeft = data.sigBytes * 8;

				            // Add padding
				            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
				            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
				                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
				                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
				            );
				            data.sigBytes = (dataWords.length + 1) * 4;

				            // Hash final blocks
				            this._process();

				            // Shortcuts
				            var hash = this._hash;
				            var H = hash.words;

				            // Swap endian
				            for (var i = 0; i < 5; i++) {
				                // Shortcut
				                var H_i = H[i];

				                // Swap
				                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
				                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
				            }

				            // Return final computed hash
				            return hash;
				        },

				        clone: function () {
				            var clone = Hasher.clone.call(this);
				            clone._hash = this._hash.clone();

				            return clone;
				        }
				    });


				    function f1(x, y, z) {
				        return ((x) ^ (y) ^ (z));

				    }

				    function f2(x, y, z) {
				        return (((x)&(y)) | ((~x)&(z)));
				    }

				    function f3(x, y, z) {
				        return (((x) | (~(y))) ^ (z));
				    }

				    function f4(x, y, z) {
				        return (((x) & (z)) | ((y)&(~(z))));
				    }

				    function f5(x, y, z) {
				        return ((x) ^ ((y) |(~(z))));

				    }

				    function rotl(x,n) {
				        return (x<<n) | (x>>>(32-n));
				    }


				    /**
				     * Shortcut function to the hasher's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     *
				     * @return {WordArray} The hash.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hash = CryptoJS.RIPEMD160('message');
				     *     var hash = CryptoJS.RIPEMD160(wordArray);
				     */
				    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

				    /**
				     * Shortcut function to the HMAC's object interface.
				     *
				     * @param {WordArray|string} message The message to hash.
				     * @param {WordArray|string} key The secret key.
				     *
				     * @return {WordArray} The HMAC.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
				     */
				    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
				}());


				return CryptoJS.RIPEMD160;

			})); 
		} (ripemd160$1, ripemd160$1.exports));
		return ripemd160$1.exports;
	}

	var hmac = {exports: {}};

	hmac.exports;

	var hasRequiredHmac;

	function requireHmac () {
		if (hasRequiredHmac) return hmac.exports;
		hasRequiredHmac = 1;
		(function (module, exports) {
	(function (root, factory) {
				{
					// CommonJS
					module.exports = factory(requireCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var C_enc = C.enc;
				    var Utf8 = C_enc.Utf8;
				    var C_algo = C.algo;

				    /**
				     * HMAC algorithm.
				     */
				    C_algo.HMAC = Base.extend({
				        /**
				         * Initializes a newly created HMAC.
				         *
				         * @param {Hasher} hasher The hash algorithm to use.
				         * @param {WordArray|string} key The secret key.
				         *
				         * @example
				         *
				         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
				         */
				        init: function (hasher, key) {
				            // Init hasher
				            hasher = this._hasher = new hasher.init();

				            // Convert string to WordArray, else assume WordArray already
				            if (typeof key == 'string') {
				                key = Utf8.parse(key);
				            }

				            // Shortcuts
				            var hasherBlockSize = hasher.blockSize;
				            var hasherBlockSizeBytes = hasherBlockSize * 4;

				            // Allow arbitrary length keys
				            if (key.sigBytes > hasherBlockSizeBytes) {
				                key = hasher.finalize(key);
				            }

				            // Clamp excess bits
				            key.clamp();

				            // Clone key for inner and outer pads
				            var oKey = this._oKey = key.clone();
				            var iKey = this._iKey = key.clone();

				            // Shortcuts
				            var oKeyWords = oKey.words;
				            var iKeyWords = iKey.words;

				            // XOR keys with pad constants
				            for (var i = 0; i < hasherBlockSize; i++) {
				                oKeyWords[i] ^= 0x5c5c5c5c;
				                iKeyWords[i] ^= 0x36363636;
				            }
				            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this HMAC to its initial state.
				         *
				         * @example
				         *
				         *     hmacHasher.reset();
				         */
				        reset: function () {
				            // Shortcut
				            var hasher = this._hasher;

				            // Reset
				            hasher.reset();
				            hasher.update(this._iKey);
				        },

				        /**
				         * Updates this HMAC with a message.
				         *
				         * @param {WordArray|string} messageUpdate The message to append.
				         *
				         * @return {HMAC} This HMAC instance.
				         *
				         * @example
				         *
				         *     hmacHasher.update('message');
				         *     hmacHasher.update(wordArray);
				         */
				        update: function (messageUpdate) {
				            this._hasher.update(messageUpdate);

				            // Chainable
				            return this;
				        },

				        /**
				         * Finalizes the HMAC computation.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} messageUpdate (Optional) A final message update.
				         *
				         * @return {WordArray} The HMAC.
				         *
				         * @example
				         *
				         *     var hmac = hmacHasher.finalize();
				         *     var hmac = hmacHasher.finalize('message');
				         *     var hmac = hmacHasher.finalize(wordArray);
				         */
				        finalize: function (messageUpdate) {
				            // Shortcut
				            var hasher = this._hasher;

				            // Compute HMAC
				            var innerHash = hasher.finalize(messageUpdate);
				            hasher.reset();
				            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

				            return hmac;
				        }
				    });
				}());


			})); 
		} (hmac, hmac.exports));
		return hmac.exports;
	}

	var pbkdf2$1 = {exports: {}};

	pbkdf2$1.exports;

	var hasRequiredPbkdf2;

	function requirePbkdf2 () {
		if (hasRequiredPbkdf2) return pbkdf2$1.exports;
		hasRequiredPbkdf2 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireSha256(), requireHmac());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var SHA256 = C_algo.SHA256;
				    var HMAC = C_algo.HMAC;

				    /**
				     * Password-Based Key Derivation Function 2 algorithm.
				     */
				    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
				         * @property {Hasher} hasher The hasher to use. Default: SHA256
				         * @property {number} iterations The number of iterations to perform. Default: 250000
				         */
				        cfg: Base.extend({
				            keySize: 128/32,
				            hasher: SHA256,
				            iterations: 250000
				        }),

				        /**
				         * Initializes a newly created key derivation function.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
				         *
				         * @example
				         *
				         *     var kdf = CryptoJS.algo.PBKDF2.create();
				         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
				         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
				         */
				        init: function (cfg) {
				            this.cfg = this.cfg.extend(cfg);
				        },

				        /**
				         * Computes the Password-Based Key Derivation Function 2.
				         *
				         * @param {WordArray|string} password The password.
				         * @param {WordArray|string} salt A salt.
				         *
				         * @return {WordArray} The derived key.
				         *
				         * @example
				         *
				         *     var key = kdf.compute(password, salt);
				         */
				        compute: function (password, salt) {
				            // Shortcut
				            var cfg = this.cfg;

				            // Init HMAC
				            var hmac = HMAC.create(cfg.hasher, password);

				            // Initial values
				            var derivedKey = WordArray.create();
				            var blockIndex = WordArray.create([0x00000001]);

				            // Shortcuts
				            var derivedKeyWords = derivedKey.words;
				            var blockIndexWords = blockIndex.words;
				            var keySize = cfg.keySize;
				            var iterations = cfg.iterations;

				            // Generate key
				            while (derivedKeyWords.length < keySize) {
				                var block = hmac.update(salt).finalize(blockIndex);
				                hmac.reset();

				                // Shortcuts
				                var blockWords = block.words;
				                var blockWordsLength = blockWords.length;

				                // Iterations
				                var intermediate = block;
				                for (var i = 1; i < iterations; i++) {
				                    intermediate = hmac.finalize(intermediate);
				                    hmac.reset();

				                    // Shortcut
				                    var intermediateWords = intermediate.words;

				                    // XOR intermediate with block
				                    for (var j = 0; j < blockWordsLength; j++) {
				                        blockWords[j] ^= intermediateWords[j];
				                    }
				                }

				                derivedKey.concat(block);
				                blockIndexWords[0]++;
				            }
				            derivedKey.sigBytes = keySize * 4;

				            return derivedKey;
				        }
				    });

				    /**
				     * Computes the Password-Based Key Derivation Function 2.
				     *
				     * @param {WordArray|string} password The password.
				     * @param {WordArray|string} salt A salt.
				     * @param {Object} cfg (Optional) The configuration options to use for this computation.
				     *
				     * @return {WordArray} The derived key.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var key = CryptoJS.PBKDF2(password, salt);
				     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
				     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
				     */
				    C.PBKDF2 = function (password, salt, cfg) {
				        return PBKDF2.create(cfg).compute(password, salt);
				    };
				}());


				return CryptoJS.PBKDF2;

			})); 
		} (pbkdf2$1, pbkdf2$1.exports));
		return pbkdf2$1.exports;
	}

	var evpkdf = {exports: {}};

	evpkdf.exports;

	var hasRequiredEvpkdf;

	function requireEvpkdf () {
		if (hasRequiredEvpkdf) return evpkdf.exports;
		hasRequiredEvpkdf = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireSha1(), requireHmac());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var C_algo = C.algo;
				    var MD5 = C_algo.MD5;

				    /**
				     * This key derivation function is meant to conform with EVP_BytesToKey.
				     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
				     */
				    var EvpKDF = C_algo.EvpKDF = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
				         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
				         * @property {number} iterations The number of iterations to perform. Default: 1
				         */
				        cfg: Base.extend({
				            keySize: 128/32,
				            hasher: MD5,
				            iterations: 1
				        }),

				        /**
				         * Initializes a newly created key derivation function.
				         *
				         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
				         *
				         * @example
				         *
				         *     var kdf = CryptoJS.algo.EvpKDF.create();
				         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
				         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
				         */
				        init: function (cfg) {
				            this.cfg = this.cfg.extend(cfg);
				        },

				        /**
				         * Derives a key from a password.
				         *
				         * @param {WordArray|string} password The password.
				         * @param {WordArray|string} salt A salt.
				         *
				         * @return {WordArray} The derived key.
				         *
				         * @example
				         *
				         *     var key = kdf.compute(password, salt);
				         */
				        compute: function (password, salt) {
				            var block;

				            // Shortcut
				            var cfg = this.cfg;

				            // Init hasher
				            var hasher = cfg.hasher.create();

				            // Initial values
				            var derivedKey = WordArray.create();

				            // Shortcuts
				            var derivedKeyWords = derivedKey.words;
				            var keySize = cfg.keySize;
				            var iterations = cfg.iterations;

				            // Generate key
				            while (derivedKeyWords.length < keySize) {
				                if (block) {
				                    hasher.update(block);
				                }
				                block = hasher.update(password).finalize(salt);
				                hasher.reset();

				                // Iterations
				                for (var i = 1; i < iterations; i++) {
				                    block = hasher.finalize(block);
				                    hasher.reset();
				                }

				                derivedKey.concat(block);
				            }
				            derivedKey.sigBytes = keySize * 4;

				            return derivedKey;
				        }
				    });

				    /**
				     * Derives a key from a password.
				     *
				     * @param {WordArray|string} password The password.
				     * @param {WordArray|string} salt A salt.
				     * @param {Object} cfg (Optional) The configuration options to use for this computation.
				     *
				     * @return {WordArray} The derived key.
				     *
				     * @static
				     *
				     * @example
				     *
				     *     var key = CryptoJS.EvpKDF(password, salt);
				     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
				     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
				     */
				    C.EvpKDF = function (password, salt, cfg) {
				        return EvpKDF.create(cfg).compute(password, salt);
				    };
				}());


				return CryptoJS.EvpKDF;

			})); 
		} (evpkdf, evpkdf.exports));
		return evpkdf.exports;
	}

	var cipherCore = {exports: {}};

	cipherCore.exports;

	var hasRequiredCipherCore;

	function requireCipherCore () {
		if (hasRequiredCipherCore) return cipherCore.exports;
		hasRequiredCipherCore = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEvpkdf());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Cipher core components.
				 */
				CryptoJS.lib.Cipher || (function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var Base = C_lib.Base;
				    var WordArray = C_lib.WordArray;
				    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
				    var C_enc = C.enc;
				    C_enc.Utf8;
				    var Base64 = C_enc.Base64;
				    var C_algo = C.algo;
				    var EvpKDF = C_algo.EvpKDF;

				    /**
				     * Abstract base cipher template.
				     *
				     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
				     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
				     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
				     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
				     */
				    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {WordArray} iv The IV to use for this operation.
				         */
				        cfg: Base.extend(),

				        /**
				         * Creates this cipher in encryption mode.
				         *
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {Cipher} A cipher instance.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
				         */
				        createEncryptor: function (key, cfg) {
				            return this.create(this._ENC_XFORM_MODE, key, cfg);
				        },

				        /**
				         * Creates this cipher in decryption mode.
				         *
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {Cipher} A cipher instance.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
				         */
				        createDecryptor: function (key, cfg) {
				            return this.create(this._DEC_XFORM_MODE, key, cfg);
				        },

				        /**
				         * Initializes a newly created cipher.
				         *
				         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @example
				         *
				         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
				         */
				        init: function (xformMode, key, cfg) {
				            // Apply config defaults
				            this.cfg = this.cfg.extend(cfg);

				            // Store transform mode and key
				            this._xformMode = xformMode;
				            this._key = key;

				            // Set initial values
				            this.reset();
				        },

				        /**
				         * Resets this cipher to its initial state.
				         *
				         * @example
				         *
				         *     cipher.reset();
				         */
				        reset: function () {
				            // Reset data buffer
				            BufferedBlockAlgorithm.reset.call(this);

				            // Perform concrete-cipher logic
				            this._doReset();
				        },

				        /**
				         * Adds data to be encrypted or decrypted.
				         *
				         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
				         *
				         * @return {WordArray} The data after processing.
				         *
				         * @example
				         *
				         *     var encrypted = cipher.process('data');
				         *     var encrypted = cipher.process(wordArray);
				         */
				        process: function (dataUpdate) {
				            // Append
				            this._append(dataUpdate);

				            // Process available blocks
				            return this._process();
				        },

				        /**
				         * Finalizes the encryption or decryption process.
				         * Note that the finalize operation is effectively a destructive, read-once operation.
				         *
				         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
				         *
				         * @return {WordArray} The data after final processing.
				         *
				         * @example
				         *
				         *     var encrypted = cipher.finalize();
				         *     var encrypted = cipher.finalize('data');
				         *     var encrypted = cipher.finalize(wordArray);
				         */
				        finalize: function (dataUpdate) {
				            // Final data update
				            if (dataUpdate) {
				                this._append(dataUpdate);
				            }

				            // Perform concrete-cipher logic
				            var finalProcessedData = this._doFinalize();

				            return finalProcessedData;
				        },

				        keySize: 128/32,

				        ivSize: 128/32,

				        _ENC_XFORM_MODE: 1,

				        _DEC_XFORM_MODE: 2,

				        /**
				         * Creates shortcut functions to a cipher's object interface.
				         *
				         * @param {Cipher} cipher The cipher to create a helper for.
				         *
				         * @return {Object} An object with encrypt and decrypt shortcut functions.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
				         */
				        _createHelper: (function () {
				            function selectCipherStrategy(key) {
				                if (typeof key == 'string') {
				                    return PasswordBasedCipher;
				                } else {
				                    return SerializableCipher;
				                }
				            }

				            return function (cipher) {
				                return {
				                    encrypt: function (message, key, cfg) {
				                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
				                    },

				                    decrypt: function (ciphertext, key, cfg) {
				                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
				                    }
				                };
				            };
				        }())
				    });

				    /**
				     * Abstract base stream cipher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
				     */
				    C_lib.StreamCipher = Cipher.extend({
				        _doFinalize: function () {
				            // Process partial blocks
				            var finalProcessedBlocks = this._process(!!'flush');

				            return finalProcessedBlocks;
				        },

				        blockSize: 1
				    });

				    /**
				     * Mode namespace.
				     */
				    var C_mode = C.mode = {};

				    /**
				     * Abstract base block cipher mode template.
				     */
				    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
				        /**
				         * Creates this mode for encryption.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
				         */
				        createEncryptor: function (cipher, iv) {
				            return this.Encryptor.create(cipher, iv);
				        },

				        /**
				         * Creates this mode for decryption.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
				         */
				        createDecryptor: function (cipher, iv) {
				            return this.Decryptor.create(cipher, iv);
				        },

				        /**
				         * Initializes a newly created mode.
				         *
				         * @param {Cipher} cipher A block cipher instance.
				         * @param {Array} iv The IV words.
				         *
				         * @example
				         *
				         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
				         */
				        init: function (cipher, iv) {
				            this._cipher = cipher;
				            this._iv = iv;
				        }
				    });

				    /**
				     * Cipher Block Chaining mode.
				     */
				    var CBC = C_mode.CBC = (function () {
				        /**
				         * Abstract base CBC mode.
				         */
				        var CBC = BlockCipherMode.extend();

				        /**
				         * CBC encryptor.
				         */
				        CBC.Encryptor = CBC.extend({
				            /**
				             * Processes the data block at offset.
				             *
				             * @param {Array} words The data words to operate on.
				             * @param {number} offset The offset where the block starts.
				             *
				             * @example
				             *
				             *     mode.processBlock(data.words, offset);
				             */
				            processBlock: function (words, offset) {
				                // Shortcuts
				                var cipher = this._cipher;
				                var blockSize = cipher.blockSize;

				                // XOR and encrypt
				                xorBlock.call(this, words, offset, blockSize);
				                cipher.encryptBlock(words, offset);

				                // Remember this block to use with next block
				                this._prevBlock = words.slice(offset, offset + blockSize);
				            }
				        });

				        /**
				         * CBC decryptor.
				         */
				        CBC.Decryptor = CBC.extend({
				            /**
				             * Processes the data block at offset.
				             *
				             * @param {Array} words The data words to operate on.
				             * @param {number} offset The offset where the block starts.
				             *
				             * @example
				             *
				             *     mode.processBlock(data.words, offset);
				             */
				            processBlock: function (words, offset) {
				                // Shortcuts
				                var cipher = this._cipher;
				                var blockSize = cipher.blockSize;

				                // Remember this block to use with next block
				                var thisBlock = words.slice(offset, offset + blockSize);

				                // Decrypt and XOR
				                cipher.decryptBlock(words, offset);
				                xorBlock.call(this, words, offset, blockSize);

				                // This block becomes the previous block
				                this._prevBlock = thisBlock;
				            }
				        });

				        function xorBlock(words, offset, blockSize) {
				            var block;

				            // Shortcut
				            var iv = this._iv;

				            // Choose mixing block
				            if (iv) {
				                block = iv;

				                // Remove IV for subsequent blocks
				                this._iv = undefined$1;
				            } else {
				                block = this._prevBlock;
				            }

				            // XOR blocks
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= block[i];
				            }
				        }

				        return CBC;
				    }());

				    /**
				     * Padding namespace.
				     */
				    var C_pad = C.pad = {};

				    /**
				     * PKCS #5/7 padding strategy.
				     */
				    var Pkcs7 = C_pad.Pkcs7 = {
				        /**
				         * Pads data using the algorithm defined in PKCS #5/7.
				         *
				         * @param {WordArray} data The data to pad.
				         * @param {number} blockSize The multiple that the data should be padded to.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
				         */
				        pad: function (data, blockSize) {
				            // Shortcut
				            var blockSizeBytes = blockSize * 4;

				            // Count padding bytes
				            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

				            // Create padding word
				            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

				            // Create padding
				            var paddingWords = [];
				            for (var i = 0; i < nPaddingBytes; i += 4) {
				                paddingWords.push(paddingWord);
				            }
				            var padding = WordArray.create(paddingWords, nPaddingBytes);

				            // Add padding
				            data.concat(padding);
				        },

				        /**
				         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
				         *
				         * @param {WordArray} data The data to unpad.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
				         */
				        unpad: function (data) {
				            // Get number of padding bytes from last byte
				            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				            // Remove padding
				            data.sigBytes -= nPaddingBytes;
				        }
				    };

				    /**
				     * Abstract base block cipher template.
				     *
				     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
				     */
				    C_lib.BlockCipher = Cipher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {Mode} mode The block mode to use. Default: CBC
				         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
				         */
				        cfg: Cipher.cfg.extend({
				            mode: CBC,
				            padding: Pkcs7
				        }),

				        reset: function () {
				            var modeCreator;

				            // Reset cipher
				            Cipher.reset.call(this);

				            // Shortcuts
				            var cfg = this.cfg;
				            var iv = cfg.iv;
				            var mode = cfg.mode;

				            // Reset block mode
				            if (this._xformMode == this._ENC_XFORM_MODE) {
				                modeCreator = mode.createEncryptor;
				            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
				                modeCreator = mode.createDecryptor;
				                // Keep at least one block in the buffer for unpadding
				                this._minBufferSize = 1;
				            }

				            if (this._mode && this._mode.__creator == modeCreator) {
				                this._mode.init(this, iv && iv.words);
				            } else {
				                this._mode = modeCreator.call(mode, this, iv && iv.words);
				                this._mode.__creator = modeCreator;
				            }
				        },

				        _doProcessBlock: function (words, offset) {
				            this._mode.processBlock(words, offset);
				        },

				        _doFinalize: function () {
				            var finalProcessedBlocks;

				            // Shortcut
				            var padding = this.cfg.padding;

				            // Finalize
				            if (this._xformMode == this._ENC_XFORM_MODE) {
				                // Pad data
				                padding.pad(this._data, this.blockSize);

				                // Process final blocks
				                finalProcessedBlocks = this._process(!!'flush');
				            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
				                // Process final blocks
				                finalProcessedBlocks = this._process(!!'flush');

				                // Unpad data
				                padding.unpad(finalProcessedBlocks);
				            }

				            return finalProcessedBlocks;
				        },

				        blockSize: 128/32
				    });

				    /**
				     * A collection of cipher parameters.
				     *
				     * @property {WordArray} ciphertext The raw ciphertext.
				     * @property {WordArray} key The key to this ciphertext.
				     * @property {WordArray} iv The IV used in the ciphering operation.
				     * @property {WordArray} salt The salt used with a key derivation function.
				     * @property {Cipher} algorithm The cipher algorithm.
				     * @property {Mode} mode The block mode used in the ciphering operation.
				     * @property {Padding} padding The padding scheme used in the ciphering operation.
				     * @property {number} blockSize The block size of the cipher.
				     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
				     */
				    var CipherParams = C_lib.CipherParams = Base.extend({
				        /**
				         * Initializes a newly created cipher params object.
				         *
				         * @param {Object} cipherParams An object with any of the possible cipher parameters.
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.lib.CipherParams.create({
				         *         ciphertext: ciphertextWordArray,
				         *         key: keyWordArray,
				         *         iv: ivWordArray,
				         *         salt: saltWordArray,
				         *         algorithm: CryptoJS.algo.AES,
				         *         mode: CryptoJS.mode.CBC,
				         *         padding: CryptoJS.pad.PKCS7,
				         *         blockSize: 4,
				         *         formatter: CryptoJS.format.OpenSSL
				         *     });
				         */
				        init: function (cipherParams) {
				            this.mixIn(cipherParams);
				        },

				        /**
				         * Converts this cipher params object to a string.
				         *
				         * @param {Format} formatter (Optional) The formatting strategy to use.
				         *
				         * @return {string} The stringified cipher params.
				         *
				         * @throws Error If neither the formatter nor the default formatter is set.
				         *
				         * @example
				         *
				         *     var string = cipherParams + '';
				         *     var string = cipherParams.toString();
				         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
				         */
				        toString: function (formatter) {
				            return (formatter || this.formatter).stringify(this);
				        }
				    });

				    /**
				     * Format namespace.
				     */
				    var C_format = C.format = {};

				    /**
				     * OpenSSL formatting strategy.
				     */
				    var OpenSSLFormatter = C_format.OpenSSL = {
				        /**
				         * Converts a cipher params object to an OpenSSL-compatible string.
				         *
				         * @param {CipherParams} cipherParams The cipher params object.
				         *
				         * @return {string} The OpenSSL-compatible string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
				         */
				        stringify: function (cipherParams) {
				            var wordArray;

				            // Shortcuts
				            var ciphertext = cipherParams.ciphertext;
				            var salt = cipherParams.salt;

				            // Format
				            if (salt) {
				                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
				            } else {
				                wordArray = ciphertext;
				            }

				            return wordArray.toString(Base64);
				        },

				        /**
				         * Converts an OpenSSL-compatible string to a cipher params object.
				         *
				         * @param {string} openSSLStr The OpenSSL-compatible string.
				         *
				         * @return {CipherParams} The cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
				         */
				        parse: function (openSSLStr) {
				            var salt;

				            // Parse base64
				            var ciphertext = Base64.parse(openSSLStr);

				            // Shortcut
				            var ciphertextWords = ciphertext.words;

				            // Test for salt
				            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
				                // Extract salt
				                salt = WordArray.create(ciphertextWords.slice(2, 4));

				                // Remove salt from ciphertext
				                ciphertextWords.splice(0, 4);
				                ciphertext.sigBytes -= 16;
				            }

				            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
				        }
				    };

				    /**
				     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
				     */
				    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
				         */
				        cfg: Base.extend({
				            format: OpenSSLFormatter
				        }),

				        /**
				         * Encrypts a message.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {WordArray|string} message The message to encrypt.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {CipherParams} A cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         */
				        encrypt: function (cipher, message, key, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Encrypt
				            var encryptor = cipher.createEncryptor(key, cfg);
				            var ciphertext = encryptor.finalize(message);

				            // Shortcut
				            var cipherCfg = encryptor.cfg;

				            // Create and return serializable cipher params
				            return CipherParams.create({
				                ciphertext: ciphertext,
				                key: key,
				                iv: cipherCfg.iv,
				                algorithm: cipher,
				                mode: cipherCfg.mode,
				                padding: cipherCfg.padding,
				                blockSize: cipher.blockSize,
				                formatter: cfg.format
				            });
				        },

				        /**
				         * Decrypts serialized ciphertext.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
				         * @param {WordArray} key The key.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {WordArray} The plaintext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
				         */
				        decrypt: function (cipher, ciphertext, key, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Convert string to CipherParams
				            ciphertext = this._parse(ciphertext, cfg.format);

				            // Decrypt
				            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

				            return plaintext;
				        },

				        /**
				         * Converts serialized ciphertext to CipherParams,
				         * else assumed CipherParams already and returns ciphertext unchanged.
				         *
				         * @param {CipherParams|string} ciphertext The ciphertext.
				         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
				         *
				         * @return {CipherParams} The unserialized ciphertext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
				         */
				        _parse: function (ciphertext, format) {
				            if (typeof ciphertext == 'string') {
				                return format.parse(ciphertext, this);
				            } else {
				                return ciphertext;
				            }
				        }
				    });

				    /**
				     * Key derivation function namespace.
				     */
				    var C_kdf = C.kdf = {};

				    /**
				     * OpenSSL key derivation function.
				     */
				    var OpenSSLKdf = C_kdf.OpenSSL = {
				        /**
				         * Derives a key and IV from a password.
				         *
				         * @param {string} password The password to derive from.
				         * @param {number} keySize The size in words of the key to generate.
				         * @param {number} ivSize The size in words of the IV to generate.
				         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
				         *
				         * @return {CipherParams} A cipher params object with the key, IV, and salt.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
				         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
				         */
				        execute: function (password, keySize, ivSize, salt, hasher) {
				            // Generate random salt
				            if (!salt) {
				                salt = WordArray.random(64/8);
				            }

				            // Derive key and IV
				            if (!hasher) {
				                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
				            } else {
				                var key = EvpKDF.create({ keySize: keySize + ivSize, hasher: hasher }).compute(password, salt);
				            }


				            // Separate key and IV
				            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
				            key.sigBytes = keySize * 4;

				            // Return params
				            return CipherParams.create({ key: key, iv: iv, salt: salt });
				        }
				    };

				    /**
				     * A serializable cipher wrapper that derives the key from a password,
				     * and returns ciphertext as a serializable cipher params object.
				     */
				    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
				         */
				        cfg: SerializableCipher.cfg.extend({
				            kdf: OpenSSLKdf
				        }),

				        /**
				         * Encrypts a message using a password.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {WordArray|string} message The message to encrypt.
				         * @param {string} password The password.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {CipherParams} A cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
				         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
				         */
				        encrypt: function (cipher, message, password, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Derive key and other params
				            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);

				            // Add IV to config
				            cfg.iv = derivedParams.iv;

				            // Encrypt
				            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

				            // Mix in derived params
				            ciphertext.mixIn(derivedParams);

				            return ciphertext;
				        },

				        /**
				         * Decrypts serialized ciphertext using a password.
				         *
				         * @param {Cipher} cipher The cipher algorithm to use.
				         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
				         * @param {string} password The password.
				         * @param {Object} cfg (Optional) The configuration options to use for this operation.
				         *
				         * @return {WordArray} The plaintext.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
				         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
				         */
				        decrypt: function (cipher, ciphertext, password, cfg) {
				            // Apply config defaults
				            cfg = this.cfg.extend(cfg);

				            // Convert string to CipherParams
				            ciphertext = this._parse(ciphertext, cfg.format);

				            // Derive key and other params
				            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);

				            // Add IV to config
				            cfg.iv = derivedParams.iv;

				            // Decrypt
				            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

				            return plaintext;
				        }
				    });
				}());


			})); 
		} (cipherCore, cipherCore.exports));
		return cipherCore.exports;
	}

	var modeCfb = {exports: {}};

	modeCfb.exports;

	var hasRequiredModeCfb;

	function requireModeCfb () {
		if (hasRequiredModeCfb) return modeCfb.exports;
		hasRequiredModeCfb = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Cipher Feedback block mode.
				 */
				CryptoJS.mode.CFB = (function () {
				    var CFB = CryptoJS.lib.BlockCipherMode.extend();

				    CFB.Encryptor = CFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;

				            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				            // Remember this block to use with next block
				            this._prevBlock = words.slice(offset, offset + blockSize);
				        }
				    });

				    CFB.Decryptor = CFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;

				            // Remember this block to use with next block
				            var thisBlock = words.slice(offset, offset + blockSize);

				            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				            // This block becomes the previous block
				            this._prevBlock = thisBlock;
				        }
				    });

				    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
				        var keystream;

				        // Shortcut
				        var iv = this._iv;

				        // Generate keystream
				        if (iv) {
				            keystream = iv.slice(0);

				            // Remove IV for subsequent blocks
				            this._iv = undefined;
				        } else {
				            keystream = this._prevBlock;
				        }
				        cipher.encryptBlock(keystream, 0);

				        // Encrypt
				        for (var i = 0; i < blockSize; i++) {
				            words[offset + i] ^= keystream[i];
				        }
				    }

				    return CFB;
				}());


				return CryptoJS.mode.CFB;

			})); 
		} (modeCfb, modeCfb.exports));
		return modeCfb.exports;
	}

	var modeCtr = {exports: {}};

	modeCtr.exports;

	var hasRequiredModeCtr;

	function requireModeCtr () {
		if (hasRequiredModeCtr) return modeCtr.exports;
		hasRequiredModeCtr = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Counter block mode.
				 */
				CryptoJS.mode.CTR = (function () {
				    var CTR = CryptoJS.lib.BlockCipherMode.extend();

				    var Encryptor = CTR.Encryptor = CTR.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var counter = this._counter;

				            // Generate keystream
				            if (iv) {
				                counter = this._counter = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }
				            var keystream = counter.slice(0);
				            cipher.encryptBlock(keystream, 0);

				            // Increment counter
				            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    CTR.Decryptor = Encryptor;

				    return CTR;
				}());


				return CryptoJS.mode.CTR;

			})); 
		} (modeCtr, modeCtr.exports));
		return modeCtr.exports;
	}

	var modeCtrGladman = {exports: {}};

	modeCtrGladman.exports;

	var hasRequiredModeCtrGladman;

	function requireModeCtrGladman () {
		if (hasRequiredModeCtrGladman) return modeCtrGladman.exports;
		hasRequiredModeCtrGladman = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/** @preserve
				 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
				 * derived from CryptoJS.mode.CTR
				 * Jan Hruby jhruby.web@gmail.com
				 */
				CryptoJS.mode.CTRGladman = (function () {
				    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

					function incWord(word)
					{
						if (((word >> 24) & 0xff) === 0xff) { //overflow
						var b1 = (word >> 16)&0xff;
						var b2 = (word >> 8)&0xff;
						var b3 = word & 0xff;

						if (b1 === 0xff) // overflow b1
						{
						b1 = 0;
						if (b2 === 0xff)
						{
							b2 = 0;
							if (b3 === 0xff)
							{
								b3 = 0;
							}
							else
							{
								++b3;
							}
						}
						else
						{
							++b2;
						}
						}
						else
						{
						++b1;
						}

						word = 0;
						word += (b1 << 16);
						word += (b2 << 8);
						word += b3;
						}
						else
						{
						word += (0x01 << 24);
						}
						return word;
					}

					function incCounter(counter)
					{
						if ((counter[0] = incWord(counter[0])) === 0)
						{
							// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
							counter[1] = incWord(counter[1]);
						}
						return counter;
					}

				    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var counter = this._counter;

				            // Generate keystream
				            if (iv) {
				                counter = this._counter = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }

							incCounter(counter);

							var keystream = counter.slice(0);
				            cipher.encryptBlock(keystream, 0);

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    CTRGladman.Decryptor = Encryptor;

				    return CTRGladman;
				}());




				return CryptoJS.mode.CTRGladman;

			})); 
		} (modeCtrGladman, modeCtrGladman.exports));
		return modeCtrGladman.exports;
	}

	var modeOfb = {exports: {}};

	modeOfb.exports;

	var hasRequiredModeOfb;

	function requireModeOfb () {
		if (hasRequiredModeOfb) return modeOfb.exports;
		hasRequiredModeOfb = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Output Feedback block mode.
				 */
				CryptoJS.mode.OFB = (function () {
				    var OFB = CryptoJS.lib.BlockCipherMode.extend();

				    var Encryptor = OFB.Encryptor = OFB.extend({
				        processBlock: function (words, offset) {
				            // Shortcuts
				            var cipher = this._cipher;
				            var blockSize = cipher.blockSize;
				            var iv = this._iv;
				            var keystream = this._keystream;

				            // Generate keystream
				            if (iv) {
				                keystream = this._keystream = iv.slice(0);

				                // Remove IV for subsequent blocks
				                this._iv = undefined;
				            }
				            cipher.encryptBlock(keystream, 0);

				            // Encrypt
				            for (var i = 0; i < blockSize; i++) {
				                words[offset + i] ^= keystream[i];
				            }
				        }
				    });

				    OFB.Decryptor = Encryptor;

				    return OFB;
				}());


				return CryptoJS.mode.OFB;

			})); 
		} (modeOfb, modeOfb.exports));
		return modeOfb.exports;
	}

	var modeEcb = {exports: {}};

	modeEcb.exports;

	var hasRequiredModeEcb;

	function requireModeEcb () {
		if (hasRequiredModeEcb) return modeEcb.exports;
		hasRequiredModeEcb = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Electronic Codebook block mode.
				 */
				CryptoJS.mode.ECB = (function () {
				    var ECB = CryptoJS.lib.BlockCipherMode.extend();

				    ECB.Encryptor = ECB.extend({
				        processBlock: function (words, offset) {
				            this._cipher.encryptBlock(words, offset);
				        }
				    });

				    ECB.Decryptor = ECB.extend({
				        processBlock: function (words, offset) {
				            this._cipher.decryptBlock(words, offset);
				        }
				    });

				    return ECB;
				}());


				return CryptoJS.mode.ECB;

			})); 
		} (modeEcb, modeEcb.exports));
		return modeEcb.exports;
	}

	var padAnsix923 = {exports: {}};

	padAnsix923.exports;

	var hasRequiredPadAnsix923;

	function requirePadAnsix923 () {
		if (hasRequiredPadAnsix923) return padAnsix923.exports;
		hasRequiredPadAnsix923 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ANSI X.923 padding strategy.
				 */
				CryptoJS.pad.AnsiX923 = {
				    pad: function (data, blockSize) {
				        // Shortcuts
				        var dataSigBytes = data.sigBytes;
				        var blockSizeBytes = blockSize * 4;

				        // Count padding bytes
				        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

				        // Compute last byte position
				        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

				        // Pad
				        data.clamp();
				        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
				        data.sigBytes += nPaddingBytes;
				    },

				    unpad: function (data) {
				        // Get number of padding bytes from last byte
				        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				        // Remove padding
				        data.sigBytes -= nPaddingBytes;
				    }
				};


				return CryptoJS.pad.Ansix923;

			})); 
		} (padAnsix923, padAnsix923.exports));
		return padAnsix923.exports;
	}

	var padIso10126 = {exports: {}};

	padIso10126.exports;

	var hasRequiredPadIso10126;

	function requirePadIso10126 () {
		if (hasRequiredPadIso10126) return padIso10126.exports;
		hasRequiredPadIso10126 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ISO 10126 padding strategy.
				 */
				CryptoJS.pad.Iso10126 = {
				    pad: function (data, blockSize) {
				        // Shortcut
				        var blockSizeBytes = blockSize * 4;

				        // Count padding bytes
				        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

				        // Pad
				        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
				             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
				    },

				    unpad: function (data) {
				        // Get number of padding bytes from last byte
				        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

				        // Remove padding
				        data.sigBytes -= nPaddingBytes;
				    }
				};


				return CryptoJS.pad.Iso10126;

			})); 
		} (padIso10126, padIso10126.exports));
		return padIso10126.exports;
	}

	var padIso97971 = {exports: {}};

	padIso97971.exports;

	var hasRequiredPadIso97971;

	function requirePadIso97971 () {
		if (hasRequiredPadIso97971) return padIso97971.exports;
		hasRequiredPadIso97971 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * ISO/IEC 9797-1 Padding Method 2.
				 */
				CryptoJS.pad.Iso97971 = {
				    pad: function (data, blockSize) {
				        // Add 0x80 byte
				        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

				        // Zero pad the rest
				        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
				    },

				    unpad: function (data) {
				        // Remove zero padding
				        CryptoJS.pad.ZeroPadding.unpad(data);

				        // Remove one more byte -- the 0x80 byte
				        data.sigBytes--;
				    }
				};


				return CryptoJS.pad.Iso97971;

			})); 
		} (padIso97971, padIso97971.exports));
		return padIso97971.exports;
	}

	var padZeropadding = {exports: {}};

	padZeropadding.exports;

	var hasRequiredPadZeropadding;

	function requirePadZeropadding () {
		if (hasRequiredPadZeropadding) return padZeropadding.exports;
		hasRequiredPadZeropadding = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * Zero padding strategy.
				 */
				CryptoJS.pad.ZeroPadding = {
				    pad: function (data, blockSize) {
				        // Shortcut
				        var blockSizeBytes = blockSize * 4;

				        // Pad
				        data.clamp();
				        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
				    },

				    unpad: function (data) {
				        // Shortcut
				        var dataWords = data.words;

				        // Unpad
				        var i = data.sigBytes - 1;
				        for (var i = data.sigBytes - 1; i >= 0; i--) {
				            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
				                data.sigBytes = i + 1;
				                break;
				            }
				        }
				    }
				};


				return CryptoJS.pad.ZeroPadding;

			})); 
		} (padZeropadding, padZeropadding.exports));
		return padZeropadding.exports;
	}

	var padNopadding = {exports: {}};

	padNopadding.exports;

	var hasRequiredPadNopadding;

	function requirePadNopadding () {
		if (hasRequiredPadNopadding) return padNopadding.exports;
		hasRequiredPadNopadding = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				/**
				 * A noop padding strategy.
				 */
				CryptoJS.pad.NoPadding = {
				    pad: function () {
				    },

				    unpad: function () {
				    }
				};


				return CryptoJS.pad.NoPadding;

			})); 
		} (padNopadding, padNopadding.exports));
		return padNopadding.exports;
	}

	var formatHex = {exports: {}};

	formatHex.exports;

	var hasRequiredFormatHex;

	function requireFormatHex () {
		if (hasRequiredFormatHex) return formatHex.exports;
		hasRequiredFormatHex = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function (undefined$1) {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var CipherParams = C_lib.CipherParams;
				    var C_enc = C.enc;
				    var Hex = C_enc.Hex;
				    var C_format = C.format;

				    C_format.Hex = {
				        /**
				         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
				         *
				         * @param {CipherParams} cipherParams The cipher params object.
				         *
				         * @return {string} The hexadecimally encoded string.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
				         */
				        stringify: function (cipherParams) {
				            return cipherParams.ciphertext.toString(Hex);
				        },

				        /**
				         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
				         *
				         * @param {string} input The hexadecimally encoded string.
				         *
				         * @return {CipherParams} The cipher params object.
				         *
				         * @static
				         *
				         * @example
				         *
				         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
				         */
				        parse: function (input) {
				            var ciphertext = Hex.parse(input);
				            return CipherParams.create({ ciphertext: ciphertext });
				        }
				    };
				}());


				return CryptoJS.format.Hex;

			})); 
		} (formatHex, formatHex.exports));
		return formatHex.exports;
	}

	var aes$1 = {exports: {}};

	aes$1.exports;

	var hasRequiredAes;

	function requireAes () {
		if (hasRequiredAes) return aes$1.exports;
		hasRequiredAes = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var BlockCipher = C_lib.BlockCipher;
				    var C_algo = C.algo;

				    // Lookup tables
				    var SBOX = [];
				    var INV_SBOX = [];
				    var SUB_MIX_0 = [];
				    var SUB_MIX_1 = [];
				    var SUB_MIX_2 = [];
				    var SUB_MIX_3 = [];
				    var INV_SUB_MIX_0 = [];
				    var INV_SUB_MIX_1 = [];
				    var INV_SUB_MIX_2 = [];
				    var INV_SUB_MIX_3 = [];

				    // Compute lookup tables
				    (function () {
				        // Compute double table
				        var d = [];
				        for (var i = 0; i < 256; i++) {
				            if (i < 128) {
				                d[i] = i << 1;
				            } else {
				                d[i] = (i << 1) ^ 0x11b;
				            }
				        }

				        // Walk GF(2^8)
				        var x = 0;
				        var xi = 0;
				        for (var i = 0; i < 256; i++) {
				            // Compute sbox
				            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
				            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
				            SBOX[x] = sx;
				            INV_SBOX[sx] = x;

				            // Compute multiplication
				            var x2 = d[x];
				            var x4 = d[x2];
				            var x8 = d[x4];

				            // Compute sub bytes, mix columns tables
				            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
				            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
				            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
				            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
				            SUB_MIX_3[x] = t;

				            // Compute inv sub bytes, inv mix columns tables
				            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
				            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
				            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
				            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
				            INV_SUB_MIX_3[sx] = t;

				            // Compute next counter
				            if (!x) {
				                x = xi = 1;
				            } else {
				                x = x2 ^ d[d[d[x8 ^ x2]]];
				                xi ^= d[d[xi]];
				            }
				        }
				    }());

				    // Precomputed Rcon lookup
				    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

				    /**
				     * AES block cipher algorithm.
				     */
				    var AES = C_algo.AES = BlockCipher.extend({
				        _doReset: function () {
				            var t;

				            // Skip reset of nRounds has been set before and key did not change
				            if (this._nRounds && this._keyPriorReset === this._key) {
				                return;
				            }

				            // Shortcuts
				            var key = this._keyPriorReset = this._key;
				            var keyWords = key.words;
				            var keySize = key.sigBytes / 4;

				            // Compute number of rounds
				            var nRounds = this._nRounds = keySize + 6;

				            // Compute number of key schedule rows
				            var ksRows = (nRounds + 1) * 4;

				            // Compute key schedule
				            var keySchedule = this._keySchedule = [];
				            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
				                if (ksRow < keySize) {
				                    keySchedule[ksRow] = keyWords[ksRow];
				                } else {
				                    t = keySchedule[ksRow - 1];

				                    if (!(ksRow % keySize)) {
				                        // Rot word
				                        t = (t << 8) | (t >>> 24);

				                        // Sub word
				                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

				                        // Mix Rcon
				                        t ^= RCON[(ksRow / keySize) | 0] << 24;
				                    } else if (keySize > 6 && ksRow % keySize == 4) {
				                        // Sub word
				                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
				                    }

				                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
				                }
				            }

				            // Compute inv key schedule
				            var invKeySchedule = this._invKeySchedule = [];
				            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
				                var ksRow = ksRows - invKsRow;

				                if (invKsRow % 4) {
				                    var t = keySchedule[ksRow];
				                } else {
				                    var t = keySchedule[ksRow - 4];
				                }

				                if (invKsRow < 4 || ksRow <= 4) {
				                    invKeySchedule[invKsRow] = t;
				                } else {
				                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
				                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
				                }
				            }
				        },

				        encryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
				        },

				        decryptBlock: function (M, offset) {
				            // Swap 2nd and 4th rows
				            var t = M[offset + 1];
				            M[offset + 1] = M[offset + 3];
				            M[offset + 3] = t;

				            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

				            // Inv swap 2nd and 4th rows
				            var t = M[offset + 1];
				            M[offset + 1] = M[offset + 3];
				            M[offset + 3] = t;
				        },

				        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
				            // Shortcut
				            var nRounds = this._nRounds;

				            // Get input, add round key
				            var s0 = M[offset]     ^ keySchedule[0];
				            var s1 = M[offset + 1] ^ keySchedule[1];
				            var s2 = M[offset + 2] ^ keySchedule[2];
				            var s3 = M[offset + 3] ^ keySchedule[3];

				            // Key schedule row counter
				            var ksRow = 4;

				            // Rounds
				            for (var round = 1; round < nRounds; round++) {
				                // Shift rows, sub bytes, mix columns, add round key
				                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
				                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
				                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
				                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

				                // Update state
				                s0 = t0;
				                s1 = t1;
				                s2 = t2;
				                s3 = t3;
				            }

				            // Shift rows, sub bytes, add round key
				            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
				            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
				            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
				            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

				            // Set output
				            M[offset]     = t0;
				            M[offset + 1] = t1;
				            M[offset + 2] = t2;
				            M[offset + 3] = t3;
				        },

				        keySize: 256/32
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
				     */
				    C.AES = BlockCipher._createHelper(AES);
				}());


				return CryptoJS.AES;

			})); 
		} (aes$1, aes$1.exports));
		return aes$1.exports;
	}

	var tripledes = {exports: {}};

	tripledes.exports;

	var hasRequiredTripledes;

	function requireTripledes () {
		if (hasRequiredTripledes) return tripledes.exports;
		hasRequiredTripledes = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var WordArray = C_lib.WordArray;
				    var BlockCipher = C_lib.BlockCipher;
				    var C_algo = C.algo;

				    // Permuted Choice 1 constants
				    var PC1 = [
				        57, 49, 41, 33, 25, 17, 9,  1,
				        58, 50, 42, 34, 26, 18, 10, 2,
				        59, 51, 43, 35, 27, 19, 11, 3,
				        60, 52, 44, 36, 63, 55, 47, 39,
				        31, 23, 15, 7,  62, 54, 46, 38,
				        30, 22, 14, 6,  61, 53, 45, 37,
				        29, 21, 13, 5,  28, 20, 12, 4
				    ];

				    // Permuted Choice 2 constants
				    var PC2 = [
				        14, 17, 11, 24, 1,  5,
				        3,  28, 15, 6,  21, 10,
				        23, 19, 12, 4,  26, 8,
				        16, 7,  27, 20, 13, 2,
				        41, 52, 31, 37, 47, 55,
				        30, 40, 51, 45, 33, 48,
				        44, 49, 39, 56, 34, 53,
				        46, 42, 50, 36, 29, 32
				    ];

				    // Cumulative bit shift constants
				    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

				    // SBOXes and round permutation constants
				    var SBOX_P = [
				        {
				            0x0: 0x808200,
				            0x10000000: 0x8000,
				            0x20000000: 0x808002,
				            0x30000000: 0x2,
				            0x40000000: 0x200,
				            0x50000000: 0x808202,
				            0x60000000: 0x800202,
				            0x70000000: 0x800000,
				            0x80000000: 0x202,
				            0x90000000: 0x800200,
				            0xa0000000: 0x8200,
				            0xb0000000: 0x808000,
				            0xc0000000: 0x8002,
				            0xd0000000: 0x800002,
				            0xe0000000: 0x0,
				            0xf0000000: 0x8202,
				            0x8000000: 0x0,
				            0x18000000: 0x808202,
				            0x28000000: 0x8202,
				            0x38000000: 0x8000,
				            0x48000000: 0x808200,
				            0x58000000: 0x200,
				            0x68000000: 0x808002,
				            0x78000000: 0x2,
				            0x88000000: 0x800200,
				            0x98000000: 0x8200,
				            0xa8000000: 0x808000,
				            0xb8000000: 0x800202,
				            0xc8000000: 0x800002,
				            0xd8000000: 0x8002,
				            0xe8000000: 0x202,
				            0xf8000000: 0x800000,
				            0x1: 0x8000,
				            0x10000001: 0x2,
				            0x20000001: 0x808200,
				            0x30000001: 0x800000,
				            0x40000001: 0x808002,
				            0x50000001: 0x8200,
				            0x60000001: 0x200,
				            0x70000001: 0x800202,
				            0x80000001: 0x808202,
				            0x90000001: 0x808000,
				            0xa0000001: 0x800002,
				            0xb0000001: 0x8202,
				            0xc0000001: 0x202,
				            0xd0000001: 0x800200,
				            0xe0000001: 0x8002,
				            0xf0000001: 0x0,
				            0x8000001: 0x808202,
				            0x18000001: 0x808000,
				            0x28000001: 0x800000,
				            0x38000001: 0x200,
				            0x48000001: 0x8000,
				            0x58000001: 0x800002,
				            0x68000001: 0x2,
				            0x78000001: 0x8202,
				            0x88000001: 0x8002,
				            0x98000001: 0x800202,
				            0xa8000001: 0x202,
				            0xb8000001: 0x808200,
				            0xc8000001: 0x800200,
				            0xd8000001: 0x0,
				            0xe8000001: 0x8200,
				            0xf8000001: 0x808002
				        },
				        {
				            0x0: 0x40084010,
				            0x1000000: 0x4000,
				            0x2000000: 0x80000,
				            0x3000000: 0x40080010,
				            0x4000000: 0x40000010,
				            0x5000000: 0x40084000,
				            0x6000000: 0x40004000,
				            0x7000000: 0x10,
				            0x8000000: 0x84000,
				            0x9000000: 0x40004010,
				            0xa000000: 0x40000000,
				            0xb000000: 0x84010,
				            0xc000000: 0x80010,
				            0xd000000: 0x0,
				            0xe000000: 0x4010,
				            0xf000000: 0x40080000,
				            0x800000: 0x40004000,
				            0x1800000: 0x84010,
				            0x2800000: 0x10,
				            0x3800000: 0x40004010,
				            0x4800000: 0x40084010,
				            0x5800000: 0x40000000,
				            0x6800000: 0x80000,
				            0x7800000: 0x40080010,
				            0x8800000: 0x80010,
				            0x9800000: 0x0,
				            0xa800000: 0x4000,
				            0xb800000: 0x40080000,
				            0xc800000: 0x40000010,
				            0xd800000: 0x84000,
				            0xe800000: 0x40084000,
				            0xf800000: 0x4010,
				            0x10000000: 0x0,
				            0x11000000: 0x40080010,
				            0x12000000: 0x40004010,
				            0x13000000: 0x40084000,
				            0x14000000: 0x40080000,
				            0x15000000: 0x10,
				            0x16000000: 0x84010,
				            0x17000000: 0x4000,
				            0x18000000: 0x4010,
				            0x19000000: 0x80000,
				            0x1a000000: 0x80010,
				            0x1b000000: 0x40000010,
				            0x1c000000: 0x84000,
				            0x1d000000: 0x40004000,
				            0x1e000000: 0x40000000,
				            0x1f000000: 0x40084010,
				            0x10800000: 0x84010,
				            0x11800000: 0x80000,
				            0x12800000: 0x40080000,
				            0x13800000: 0x4000,
				            0x14800000: 0x40004000,
				            0x15800000: 0x40084010,
				            0x16800000: 0x10,
				            0x17800000: 0x40000000,
				            0x18800000: 0x40084000,
				            0x19800000: 0x40000010,
				            0x1a800000: 0x40004010,
				            0x1b800000: 0x80010,
				            0x1c800000: 0x0,
				            0x1d800000: 0x4010,
				            0x1e800000: 0x40080010,
				            0x1f800000: 0x84000
				        },
				        {
				            0x0: 0x104,
				            0x100000: 0x0,
				            0x200000: 0x4000100,
				            0x300000: 0x10104,
				            0x400000: 0x10004,
				            0x500000: 0x4000004,
				            0x600000: 0x4010104,
				            0x700000: 0x4010000,
				            0x800000: 0x4000000,
				            0x900000: 0x4010100,
				            0xa00000: 0x10100,
				            0xb00000: 0x4010004,
				            0xc00000: 0x4000104,
				            0xd00000: 0x10000,
				            0xe00000: 0x4,
				            0xf00000: 0x100,
				            0x80000: 0x4010100,
				            0x180000: 0x4010004,
				            0x280000: 0x0,
				            0x380000: 0x4000100,
				            0x480000: 0x4000004,
				            0x580000: 0x10000,
				            0x680000: 0x10004,
				            0x780000: 0x104,
				            0x880000: 0x4,
				            0x980000: 0x100,
				            0xa80000: 0x4010000,
				            0xb80000: 0x10104,
				            0xc80000: 0x10100,
				            0xd80000: 0x4000104,
				            0xe80000: 0x4010104,
				            0xf80000: 0x4000000,
				            0x1000000: 0x4010100,
				            0x1100000: 0x10004,
				            0x1200000: 0x10000,
				            0x1300000: 0x4000100,
				            0x1400000: 0x100,
				            0x1500000: 0x4010104,
				            0x1600000: 0x4000004,
				            0x1700000: 0x0,
				            0x1800000: 0x4000104,
				            0x1900000: 0x4000000,
				            0x1a00000: 0x4,
				            0x1b00000: 0x10100,
				            0x1c00000: 0x4010000,
				            0x1d00000: 0x104,
				            0x1e00000: 0x10104,
				            0x1f00000: 0x4010004,
				            0x1080000: 0x4000000,
				            0x1180000: 0x104,
				            0x1280000: 0x4010100,
				            0x1380000: 0x0,
				            0x1480000: 0x10004,
				            0x1580000: 0x4000100,
				            0x1680000: 0x100,
				            0x1780000: 0x4010004,
				            0x1880000: 0x10000,
				            0x1980000: 0x4010104,
				            0x1a80000: 0x10104,
				            0x1b80000: 0x4000004,
				            0x1c80000: 0x4000104,
				            0x1d80000: 0x4010000,
				            0x1e80000: 0x4,
				            0x1f80000: 0x10100
				        },
				        {
				            0x0: 0x80401000,
				            0x10000: 0x80001040,
				            0x20000: 0x401040,
				            0x30000: 0x80400000,
				            0x40000: 0x0,
				            0x50000: 0x401000,
				            0x60000: 0x80000040,
				            0x70000: 0x400040,
				            0x80000: 0x80000000,
				            0x90000: 0x400000,
				            0xa0000: 0x40,
				            0xb0000: 0x80001000,
				            0xc0000: 0x80400040,
				            0xd0000: 0x1040,
				            0xe0000: 0x1000,
				            0xf0000: 0x80401040,
				            0x8000: 0x80001040,
				            0x18000: 0x40,
				            0x28000: 0x80400040,
				            0x38000: 0x80001000,
				            0x48000: 0x401000,
				            0x58000: 0x80401040,
				            0x68000: 0x0,
				            0x78000: 0x80400000,
				            0x88000: 0x1000,
				            0x98000: 0x80401000,
				            0xa8000: 0x400000,
				            0xb8000: 0x1040,
				            0xc8000: 0x80000000,
				            0xd8000: 0x400040,
				            0xe8000: 0x401040,
				            0xf8000: 0x80000040,
				            0x100000: 0x400040,
				            0x110000: 0x401000,
				            0x120000: 0x80000040,
				            0x130000: 0x0,
				            0x140000: 0x1040,
				            0x150000: 0x80400040,
				            0x160000: 0x80401000,
				            0x170000: 0x80001040,
				            0x180000: 0x80401040,
				            0x190000: 0x80000000,
				            0x1a0000: 0x80400000,
				            0x1b0000: 0x401040,
				            0x1c0000: 0x80001000,
				            0x1d0000: 0x400000,
				            0x1e0000: 0x40,
				            0x1f0000: 0x1000,
				            0x108000: 0x80400000,
				            0x118000: 0x80401040,
				            0x128000: 0x0,
				            0x138000: 0x401000,
				            0x148000: 0x400040,
				            0x158000: 0x80000000,
				            0x168000: 0x80001040,
				            0x178000: 0x40,
				            0x188000: 0x80000040,
				            0x198000: 0x1000,
				            0x1a8000: 0x80001000,
				            0x1b8000: 0x80400040,
				            0x1c8000: 0x1040,
				            0x1d8000: 0x80401000,
				            0x1e8000: 0x400000,
				            0x1f8000: 0x401040
				        },
				        {
				            0x0: 0x80,
				            0x1000: 0x1040000,
				            0x2000: 0x40000,
				            0x3000: 0x20000000,
				            0x4000: 0x20040080,
				            0x5000: 0x1000080,
				            0x6000: 0x21000080,
				            0x7000: 0x40080,
				            0x8000: 0x1000000,
				            0x9000: 0x20040000,
				            0xa000: 0x20000080,
				            0xb000: 0x21040080,
				            0xc000: 0x21040000,
				            0xd000: 0x0,
				            0xe000: 0x1040080,
				            0xf000: 0x21000000,
				            0x800: 0x1040080,
				            0x1800: 0x21000080,
				            0x2800: 0x80,
				            0x3800: 0x1040000,
				            0x4800: 0x40000,
				            0x5800: 0x20040080,
				            0x6800: 0x21040000,
				            0x7800: 0x20000000,
				            0x8800: 0x20040000,
				            0x9800: 0x0,
				            0xa800: 0x21040080,
				            0xb800: 0x1000080,
				            0xc800: 0x20000080,
				            0xd800: 0x21000000,
				            0xe800: 0x1000000,
				            0xf800: 0x40080,
				            0x10000: 0x40000,
				            0x11000: 0x80,
				            0x12000: 0x20000000,
				            0x13000: 0x21000080,
				            0x14000: 0x1000080,
				            0x15000: 0x21040000,
				            0x16000: 0x20040080,
				            0x17000: 0x1000000,
				            0x18000: 0x21040080,
				            0x19000: 0x21000000,
				            0x1a000: 0x1040000,
				            0x1b000: 0x20040000,
				            0x1c000: 0x40080,
				            0x1d000: 0x20000080,
				            0x1e000: 0x0,
				            0x1f000: 0x1040080,
				            0x10800: 0x21000080,
				            0x11800: 0x1000000,
				            0x12800: 0x1040000,
				            0x13800: 0x20040080,
				            0x14800: 0x20000000,
				            0x15800: 0x1040080,
				            0x16800: 0x80,
				            0x17800: 0x21040000,
				            0x18800: 0x40080,
				            0x19800: 0x21040080,
				            0x1a800: 0x0,
				            0x1b800: 0x21000000,
				            0x1c800: 0x1000080,
				            0x1d800: 0x40000,
				            0x1e800: 0x20040000,
				            0x1f800: 0x20000080
				        },
				        {
				            0x0: 0x10000008,
				            0x100: 0x2000,
				            0x200: 0x10200000,
				            0x300: 0x10202008,
				            0x400: 0x10002000,
				            0x500: 0x200000,
				            0x600: 0x200008,
				            0x700: 0x10000000,
				            0x800: 0x0,
				            0x900: 0x10002008,
				            0xa00: 0x202000,
				            0xb00: 0x8,
				            0xc00: 0x10200008,
				            0xd00: 0x202008,
				            0xe00: 0x2008,
				            0xf00: 0x10202000,
				            0x80: 0x10200000,
				            0x180: 0x10202008,
				            0x280: 0x8,
				            0x380: 0x200000,
				            0x480: 0x202008,
				            0x580: 0x10000008,
				            0x680: 0x10002000,
				            0x780: 0x2008,
				            0x880: 0x200008,
				            0x980: 0x2000,
				            0xa80: 0x10002008,
				            0xb80: 0x10200008,
				            0xc80: 0x0,
				            0xd80: 0x10202000,
				            0xe80: 0x202000,
				            0xf80: 0x10000000,
				            0x1000: 0x10002000,
				            0x1100: 0x10200008,
				            0x1200: 0x10202008,
				            0x1300: 0x2008,
				            0x1400: 0x200000,
				            0x1500: 0x10000000,
				            0x1600: 0x10000008,
				            0x1700: 0x202000,
				            0x1800: 0x202008,
				            0x1900: 0x0,
				            0x1a00: 0x8,
				            0x1b00: 0x10200000,
				            0x1c00: 0x2000,
				            0x1d00: 0x10002008,
				            0x1e00: 0x10202000,
				            0x1f00: 0x200008,
				            0x1080: 0x8,
				            0x1180: 0x202000,
				            0x1280: 0x200000,
				            0x1380: 0x10000008,
				            0x1480: 0x10002000,
				            0x1580: 0x2008,
				            0x1680: 0x10202008,
				            0x1780: 0x10200000,
				            0x1880: 0x10202000,
				            0x1980: 0x10200008,
				            0x1a80: 0x2000,
				            0x1b80: 0x202008,
				            0x1c80: 0x200008,
				            0x1d80: 0x0,
				            0x1e80: 0x10000000,
				            0x1f80: 0x10002008
				        },
				        {
				            0x0: 0x100000,
				            0x10: 0x2000401,
				            0x20: 0x400,
				            0x30: 0x100401,
				            0x40: 0x2100401,
				            0x50: 0x0,
				            0x60: 0x1,
				            0x70: 0x2100001,
				            0x80: 0x2000400,
				            0x90: 0x100001,
				            0xa0: 0x2000001,
				            0xb0: 0x2100400,
				            0xc0: 0x2100000,
				            0xd0: 0x401,
				            0xe0: 0x100400,
				            0xf0: 0x2000000,
				            0x8: 0x2100001,
				            0x18: 0x0,
				            0x28: 0x2000401,
				            0x38: 0x2100400,
				            0x48: 0x100000,
				            0x58: 0x2000001,
				            0x68: 0x2000000,
				            0x78: 0x401,
				            0x88: 0x100401,
				            0x98: 0x2000400,
				            0xa8: 0x2100000,
				            0xb8: 0x100001,
				            0xc8: 0x400,
				            0xd8: 0x2100401,
				            0xe8: 0x1,
				            0xf8: 0x100400,
				            0x100: 0x2000000,
				            0x110: 0x100000,
				            0x120: 0x2000401,
				            0x130: 0x2100001,
				            0x140: 0x100001,
				            0x150: 0x2000400,
				            0x160: 0x2100400,
				            0x170: 0x100401,
				            0x180: 0x401,
				            0x190: 0x2100401,
				            0x1a0: 0x100400,
				            0x1b0: 0x1,
				            0x1c0: 0x0,
				            0x1d0: 0x2100000,
				            0x1e0: 0x2000001,
				            0x1f0: 0x400,
				            0x108: 0x100400,
				            0x118: 0x2000401,
				            0x128: 0x2100001,
				            0x138: 0x1,
				            0x148: 0x2000000,
				            0x158: 0x100000,
				            0x168: 0x401,
				            0x178: 0x2100400,
				            0x188: 0x2000001,
				            0x198: 0x2100000,
				            0x1a8: 0x0,
				            0x1b8: 0x2100401,
				            0x1c8: 0x100401,
				            0x1d8: 0x400,
				            0x1e8: 0x2000400,
				            0x1f8: 0x100001
				        },
				        {
				            0x0: 0x8000820,
				            0x1: 0x20000,
				            0x2: 0x8000000,
				            0x3: 0x20,
				            0x4: 0x20020,
				            0x5: 0x8020820,
				            0x6: 0x8020800,
				            0x7: 0x800,
				            0x8: 0x8020000,
				            0x9: 0x8000800,
				            0xa: 0x20800,
				            0xb: 0x8020020,
				            0xc: 0x820,
				            0xd: 0x0,
				            0xe: 0x8000020,
				            0xf: 0x20820,
				            0x80000000: 0x800,
				            0x80000001: 0x8020820,
				            0x80000002: 0x8000820,
				            0x80000003: 0x8000000,
				            0x80000004: 0x8020000,
				            0x80000005: 0x20800,
				            0x80000006: 0x20820,
				            0x80000007: 0x20,
				            0x80000008: 0x8000020,
				            0x80000009: 0x820,
				            0x8000000a: 0x20020,
				            0x8000000b: 0x8020800,
				            0x8000000c: 0x0,
				            0x8000000d: 0x8020020,
				            0x8000000e: 0x8000800,
				            0x8000000f: 0x20000,
				            0x10: 0x20820,
				            0x11: 0x8020800,
				            0x12: 0x20,
				            0x13: 0x800,
				            0x14: 0x8000800,
				            0x15: 0x8000020,
				            0x16: 0x8020020,
				            0x17: 0x20000,
				            0x18: 0x0,
				            0x19: 0x20020,
				            0x1a: 0x8020000,
				            0x1b: 0x8000820,
				            0x1c: 0x8020820,
				            0x1d: 0x20800,
				            0x1e: 0x820,
				            0x1f: 0x8000000,
				            0x80000010: 0x20000,
				            0x80000011: 0x800,
				            0x80000012: 0x8020020,
				            0x80000013: 0x20820,
				            0x80000014: 0x20,
				            0x80000015: 0x8020000,
				            0x80000016: 0x8000000,
				            0x80000017: 0x8000820,
				            0x80000018: 0x8020820,
				            0x80000019: 0x8000020,
				            0x8000001a: 0x8000800,
				            0x8000001b: 0x0,
				            0x8000001c: 0x20800,
				            0x8000001d: 0x820,
				            0x8000001e: 0x20020,
				            0x8000001f: 0x8020800
				        }
				    ];

				    // Masks that select the SBOX input
				    var SBOX_MASK = [
				        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
				        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
				    ];

				    /**
				     * DES block cipher algorithm.
				     */
				    var DES = C_algo.DES = BlockCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;

				            // Select 56 bits according to PC1
				            var keyBits = [];
				            for (var i = 0; i < 56; i++) {
				                var keyBitPos = PC1[i] - 1;
				                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
				            }

				            // Assemble 16 subkeys
				            var subKeys = this._subKeys = [];
				            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
				                // Create subkey
				                var subKey = subKeys[nSubKey] = [];

				                // Shortcut
				                var bitShift = BIT_SHIFTS[nSubKey];

				                // Select 48 bits according to PC2
				                for (var i = 0; i < 24; i++) {
				                    // Select from the left 28 key bits
				                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

				                    // Select from the right 28 key bits
				                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
				                }

				                // Since each subkey is applied to an expanded 32-bit input,
				                // the subkey can be broken into 8 values scaled to 32-bits,
				                // which allows the key to be used without expansion
				                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
				                for (var i = 1; i < 7; i++) {
				                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
				                }
				                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
				            }

				            // Compute inverse subkeys
				            var invSubKeys = this._invSubKeys = [];
				            for (var i = 0; i < 16; i++) {
				                invSubKeys[i] = subKeys[15 - i];
				            }
				        },

				        encryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._subKeys);
				        },

				        decryptBlock: function (M, offset) {
				            this._doCryptBlock(M, offset, this._invSubKeys);
				        },

				        _doCryptBlock: function (M, offset, subKeys) {
				            // Get input
				            this._lBlock = M[offset];
				            this._rBlock = M[offset + 1];

				            // Initial permutation
				            exchangeLR.call(this, 4,  0x0f0f0f0f);
				            exchangeLR.call(this, 16, 0x0000ffff);
				            exchangeRL.call(this, 2,  0x33333333);
				            exchangeRL.call(this, 8,  0x00ff00ff);
				            exchangeLR.call(this, 1,  0x55555555);

				            // Rounds
				            for (var round = 0; round < 16; round++) {
				                // Shortcuts
				                var subKey = subKeys[round];
				                var lBlock = this._lBlock;
				                var rBlock = this._rBlock;

				                // Feistel function
				                var f = 0;
				                for (var i = 0; i < 8; i++) {
				                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
				                }
				                this._lBlock = rBlock;
				                this._rBlock = lBlock ^ f;
				            }

				            // Undo swap from last round
				            var t = this._lBlock;
				            this._lBlock = this._rBlock;
				            this._rBlock = t;

				            // Final permutation
				            exchangeLR.call(this, 1,  0x55555555);
				            exchangeRL.call(this, 8,  0x00ff00ff);
				            exchangeRL.call(this, 2,  0x33333333);
				            exchangeLR.call(this, 16, 0x0000ffff);
				            exchangeLR.call(this, 4,  0x0f0f0f0f);

				            // Set output
				            M[offset] = this._lBlock;
				            M[offset + 1] = this._rBlock;
				        },

				        keySize: 64/32,

				        ivSize: 64/32,

				        blockSize: 64/32
				    });

				    // Swap bits across the left and right words
				    function exchangeLR(offset, mask) {
				        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
				        this._rBlock ^= t;
				        this._lBlock ^= t << offset;
				    }

				    function exchangeRL(offset, mask) {
				        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
				        this._lBlock ^= t;
				        this._rBlock ^= t << offset;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
				     */
				    C.DES = BlockCipher._createHelper(DES);

				    /**
				     * Triple-DES block cipher algorithm.
				     */
				    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;
				            // Make sure the key length is valid (64, 128 or >= 192 bit)
				            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
				                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
				            }

				            // Extend the key according to the keying options defined in 3DES standard
				            var key1 = keyWords.slice(0, 2);
				            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
				            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

				            // Create DES instances
				            this._des1 = DES.createEncryptor(WordArray.create(key1));
				            this._des2 = DES.createEncryptor(WordArray.create(key2));
				            this._des3 = DES.createEncryptor(WordArray.create(key3));
				        },

				        encryptBlock: function (M, offset) {
				            this._des1.encryptBlock(M, offset);
				            this._des2.decryptBlock(M, offset);
				            this._des3.encryptBlock(M, offset);
				        },

				        decryptBlock: function (M, offset) {
				            this._des3.decryptBlock(M, offset);
				            this._des2.encryptBlock(M, offset);
				            this._des1.decryptBlock(M, offset);
				        },

				        keySize: 192/32,

				        ivSize: 64/32,

				        blockSize: 64/32
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
				     */
				    C.TripleDES = BlockCipher._createHelper(TripleDES);
				}());


				return CryptoJS.TripleDES;

			})); 
		} (tripledes, tripledes.exports));
		return tripledes.exports;
	}

	var rc4 = {exports: {}};

	rc4.exports;

	var hasRequiredRc4;

	function requireRc4 () {
		if (hasRequiredRc4) return rc4.exports;
		hasRequiredRc4 = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    /**
				     * RC4 stream cipher algorithm.
				     */
				    var RC4 = C_algo.RC4 = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var key = this._key;
				            var keyWords = key.words;
				            var keySigBytes = key.sigBytes;

				            // Init sbox
				            var S = this._S = [];
				            for (var i = 0; i < 256; i++) {
				                S[i] = i;
				            }

				            // Key setup
				            for (var i = 0, j = 0; i < 256; i++) {
				                var keyByteIndex = i % keySigBytes;
				                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

				                j = (j + S[i] + keyByte) % 256;

				                // Swap
				                var t = S[i];
				                S[i] = S[j];
				                S[j] = t;
				            }

				            // Counters
				            this._i = this._j = 0;
				        },

				        _doProcessBlock: function (M, offset) {
				            M[offset] ^= generateKeystreamWord.call(this);
				        },

				        keySize: 256/32,

				        ivSize: 0
				    });

				    function generateKeystreamWord() {
				        // Shortcuts
				        var S = this._S;
				        var i = this._i;
				        var j = this._j;

				        // Generate keystream word
				        var keystreamWord = 0;
				        for (var n = 0; n < 4; n++) {
				            i = (i + 1) % 256;
				            j = (j + S[i]) % 256;

				            // Swap
				            var t = S[i];
				            S[i] = S[j];
				            S[j] = t;

				            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
				        }

				        // Update counters
				        this._i = i;
				        this._j = j;

				        return keystreamWord;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
				     */
				    C.RC4 = StreamCipher._createHelper(RC4);

				    /**
				     * Modified RC4 stream cipher algorithm.
				     */
				    var RC4Drop = C_algo.RC4Drop = RC4.extend({
				        /**
				         * Configuration options.
				         *
				         * @property {number} drop The number of keystream words to drop. Default 192
				         */
				        cfg: RC4.cfg.extend({
				            drop: 192
				        }),

				        _doReset: function () {
				            RC4._doReset.call(this);

				            // Drop
				            for (var i = this.cfg.drop; i > 0; i--) {
				                generateKeystreamWord.call(this);
				            }
				        }
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
				     */
				    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
				}());


				return CryptoJS.RC4;

			})); 
		} (rc4, rc4.exports));
		return rc4.exports;
	}

	var rabbit = {exports: {}};

	rabbit.exports;

	var hasRequiredRabbit;

	function requireRabbit () {
		if (hasRequiredRabbit) return rabbit.exports;
		hasRequiredRabbit = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    // Reusable objects
				    var S  = [];
				    var C_ = [];
				    var G  = [];

				    /**
				     * Rabbit stream cipher algorithm
				     */
				    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var K = this._key.words;
				            var iv = this.cfg.iv;

				            // Swap endian
				            for (var i = 0; i < 4; i++) {
				                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
				                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
				            }

				            // Generate initial state values
				            var X = this._X = [
				                K[0], (K[3] << 16) | (K[2] >>> 16),
				                K[1], (K[0] << 16) | (K[3] >>> 16),
				                K[2], (K[1] << 16) | (K[0] >>> 16),
				                K[3], (K[2] << 16) | (K[1] >>> 16)
				            ];

				            // Generate initial counter values
				            var C = this._C = [
				                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
				                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
				                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
				                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
				            ];

				            // Carry bit
				            this._b = 0;

				            // Iterate the system four times
				            for (var i = 0; i < 4; i++) {
				                nextState.call(this);
				            }

				            // Modify the counters
				            for (var i = 0; i < 8; i++) {
				                C[i] ^= X[(i + 4) & 7];
				            }

				            // IV setup
				            if (iv) {
				                // Shortcuts
				                var IV = iv.words;
				                var IV_0 = IV[0];
				                var IV_1 = IV[1];

				                // Generate four subvectors
				                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
				                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
				                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
				                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

				                // Modify counter values
				                C[0] ^= i0;
				                C[1] ^= i1;
				                C[2] ^= i2;
				                C[3] ^= i3;
				                C[4] ^= i0;
				                C[5] ^= i1;
				                C[6] ^= i2;
				                C[7] ^= i3;

				                // Iterate the system four times
				                for (var i = 0; i < 4; i++) {
				                    nextState.call(this);
				                }
				            }
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var X = this._X;

				            // Iterate the system
				            nextState.call(this);

				            // Generate four keystream words
				            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
				            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
				            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
				            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

				            for (var i = 0; i < 4; i++) {
				                // Swap endian
				                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
				                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

				                // Encrypt
				                M[offset + i] ^= S[i];
				            }
				        },

				        blockSize: 128/32,

				        ivSize: 64/32
				    });

				    function nextState() {
				        // Shortcuts
				        var X = this._X;
				        var C = this._C;

				        // Save old counter values
				        for (var i = 0; i < 8; i++) {
				            C_[i] = C[i];
				        }

				        // Calculate new counter values
				        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
				        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
				        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
				        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
				        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
				        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
				        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
				        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
				        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

				        // Calculate the g-values
				        for (var i = 0; i < 8; i++) {
				            var gx = X[i] + C[i];

				            // Construct high and low argument for squaring
				            var ga = gx & 0xffff;
				            var gb = gx >>> 16;

				            // Calculate high and low result of squaring
				            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
				            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

				            // High XOR low
				            G[i] = gh ^ gl;
				        }

				        // Calculate new state values
				        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
				        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
				        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
				        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
				        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
				        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
				        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
				        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
				     */
				    C.Rabbit = StreamCipher._createHelper(Rabbit);
				}());


				return CryptoJS.Rabbit;

			})); 
		} (rabbit, rabbit.exports));
		return rabbit.exports;
	}

	var rabbitLegacy = {exports: {}};

	rabbitLegacy.exports;

	var hasRequiredRabbitLegacy;

	function requireRabbitLegacy () {
		if (hasRequiredRabbitLegacy) return rabbitLegacy.exports;
		hasRequiredRabbitLegacy = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var StreamCipher = C_lib.StreamCipher;
				    var C_algo = C.algo;

				    // Reusable objects
				    var S  = [];
				    var C_ = [];
				    var G  = [];

				    /**
				     * Rabbit stream cipher algorithm.
				     *
				     * This is a legacy version that neglected to convert the key to little-endian.
				     * This error doesn't affect the cipher's security,
				     * but it does affect its compatibility with other implementations.
				     */
				    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
				        _doReset: function () {
				            // Shortcuts
				            var K = this._key.words;
				            var iv = this.cfg.iv;

				            // Generate initial state values
				            var X = this._X = [
				                K[0], (K[3] << 16) | (K[2] >>> 16),
				                K[1], (K[0] << 16) | (K[3] >>> 16),
				                K[2], (K[1] << 16) | (K[0] >>> 16),
				                K[3], (K[2] << 16) | (K[1] >>> 16)
				            ];

				            // Generate initial counter values
				            var C = this._C = [
				                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
				                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
				                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
				                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
				            ];

				            // Carry bit
				            this._b = 0;

				            // Iterate the system four times
				            for (var i = 0; i < 4; i++) {
				                nextState.call(this);
				            }

				            // Modify the counters
				            for (var i = 0; i < 8; i++) {
				                C[i] ^= X[(i + 4) & 7];
				            }

				            // IV setup
				            if (iv) {
				                // Shortcuts
				                var IV = iv.words;
				                var IV_0 = IV[0];
				                var IV_1 = IV[1];

				                // Generate four subvectors
				                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
				                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
				                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
				                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

				                // Modify counter values
				                C[0] ^= i0;
				                C[1] ^= i1;
				                C[2] ^= i2;
				                C[3] ^= i3;
				                C[4] ^= i0;
				                C[5] ^= i1;
				                C[6] ^= i2;
				                C[7] ^= i3;

				                // Iterate the system four times
				                for (var i = 0; i < 4; i++) {
				                    nextState.call(this);
				                }
				            }
				        },

				        _doProcessBlock: function (M, offset) {
				            // Shortcut
				            var X = this._X;

				            // Iterate the system
				            nextState.call(this);

				            // Generate four keystream words
				            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
				            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
				            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
				            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

				            for (var i = 0; i < 4; i++) {
				                // Swap endian
				                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
				                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

				                // Encrypt
				                M[offset + i] ^= S[i];
				            }
				        },

				        blockSize: 128/32,

				        ivSize: 64/32
				    });

				    function nextState() {
				        // Shortcuts
				        var X = this._X;
				        var C = this._C;

				        // Save old counter values
				        for (var i = 0; i < 8; i++) {
				            C_[i] = C[i];
				        }

				        // Calculate new counter values
				        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
				        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
				        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
				        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
				        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
				        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
				        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
				        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
				        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

				        // Calculate the g-values
				        for (var i = 0; i < 8; i++) {
				            var gx = X[i] + C[i];

				            // Construct high and low argument for squaring
				            var ga = gx & 0xffff;
				            var gb = gx >>> 16;

				            // Calculate high and low result of squaring
				            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
				            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

				            // High XOR low
				            G[i] = gh ^ gl;
				        }

				        // Calculate new state values
				        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
				        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
				        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
				        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
				        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
				        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
				        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
				        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
				    }

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
				     */
				    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
				}());


				return CryptoJS.RabbitLegacy;

			})); 
		} (rabbitLegacy, rabbitLegacy.exports));
		return rabbitLegacy.exports;
	}

	var blowfish = {exports: {}};

	blowfish.exports;

	var hasRequiredBlowfish;

	function requireBlowfish () {
		if (hasRequiredBlowfish) return blowfish.exports;
		hasRequiredBlowfish = 1;
		(function (module, exports) {
	(function (root, factory, undef) {
				{
					// CommonJS
					module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
				}
			}(commonjsGlobal, function (CryptoJS) {

				(function () {
				    // Shortcuts
				    var C = CryptoJS;
				    var C_lib = C.lib;
				    var BlockCipher = C_lib.BlockCipher;
				    var C_algo = C.algo;

				    const N = 16;

				    //Origin pbox and sbox, derived from PI
				    const ORIG_P = [
				        0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,
				        0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,
				        0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,
				        0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,
				        0x9216D5D9, 0x8979FB1B
				    ];

				    const ORIG_S = [
				        [   0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,
				            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,
				            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,
				            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,
				            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,
				            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,
				            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,
				            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,
				            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,
				            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,
				            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,
				            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,
				            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,
				            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,
				            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,
				            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,
				            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,
				            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,
				            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,
				            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,
				            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,
				            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,
				            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,
				            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,
				            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,
				            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,
				            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,
				            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,
				            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,
				            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,
				            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,
				            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,
				            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,
				            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,
				            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,
				            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,
				            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,
				            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,
				            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,
				            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,
				            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,
				            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,
				            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,
				            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,
				            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,
				            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,
				            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,
				            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,
				            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,
				            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,
				            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,
				            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,
				            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,
				            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,
				            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,
				            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,
				            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,
				            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,
				            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,
				            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,
				            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,
				            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,
				            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,
				            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A   ],
				        [   0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,
				            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,
				            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,
				            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,
				            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,
				            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,
				            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,
				            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,
				            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,
				            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,
				            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,
				            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,
				            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,
				            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,
				            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,
				            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,
				            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,
				            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,
				            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,
				            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,
				            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,
				            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,
				            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,
				            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,
				            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,
				            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,
				            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,
				            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,
				            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,
				            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,
				            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,
				            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,
				            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,
				            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,
				            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,
				            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,
				            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,
				            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,
				            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,
				            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,
				            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,
				            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,
				            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,
				            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,
				            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,
				            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,
				            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,
				            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,
				            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,
				            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,
				            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,
				            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,
				            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,
				            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,
				            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,
				            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,
				            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,
				            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,
				            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,
				            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,
				            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,
				            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,
				            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,
				            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7   ],
				        [   0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,
				            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,
				            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,
				            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,
				            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,
				            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,
				            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,
				            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,
				            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,
				            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,
				            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,
				            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,
				            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,
				            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,
				            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,
				            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,
				            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,
				            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,
				            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,
				            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,
				            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,
				            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,
				            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,
				            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,
				            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,
				            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,
				            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,
				            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,
				            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,
				            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,
				            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,
				            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,
				            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,
				            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,
				            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,
				            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,
				            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,
				            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,
				            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,
				            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,
				            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,
				            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,
				            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,
				            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,
				            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,
				            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,
				            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,
				            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,
				            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,
				            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,
				            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,
				            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,
				            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,
				            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,
				            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,
				            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,
				            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,
				            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,
				            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,
				            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,
				            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,
				            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,
				            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,
				            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0  ],
				        [   0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,
				            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,
				            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,
				            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,
				            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,
				            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,
				            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,
				            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,
				            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,
				            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,
				            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,
				            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,
				            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,
				            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,
				            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,
				            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,
				            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,
				            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,
				            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,
				            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,
				            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,
				            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,
				            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,
				            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,
				            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,
				            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,
				            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,
				            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,
				            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,
				            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,
				            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,
				            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,
				            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,
				            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,
				            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,
				            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,
				            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,
				            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,
				            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,
				            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,
				            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,
				            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,
				            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,
				            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,
				            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,
				            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,
				            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,
				            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,
				            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,
				            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,
				            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,
				            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,
				            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,
				            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,
				            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,
				            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,
				            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,
				            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,
				            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,
				            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,
				            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,
				            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,
				            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,
				            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6  ]
				    ];

				    var BLOWFISH_CTX = {
				        pbox: [],
				        sbox: []
				    };

				    function F(ctx, x){
				        let a = (x >> 24) & 0xFF;
				        let b = (x >> 16) & 0xFF;
				        let c = (x >> 8) & 0xFF;
				        let d = x & 0xFF;

				        let y = ctx.sbox[0][a] + ctx.sbox[1][b];
				        y = y ^ ctx.sbox[2][c];
				        y = y + ctx.sbox[3][d];

				        return y;
				    }

				    function BlowFish_Encrypt(ctx, left, right){
				        let Xl = left;
				        let Xr = right;
				        let temp;

				        for(let i = 0; i < N; ++i){
				            Xl = Xl ^ ctx.pbox[i];
				            Xr = F(ctx, Xl) ^ Xr;

				            temp = Xl;
				            Xl = Xr;
				            Xr = temp;
				        }

				        temp = Xl;
				        Xl = Xr;
				        Xr = temp;

				        Xr = Xr ^ ctx.pbox[N];
				        Xl = Xl ^ ctx.pbox[N + 1];

				        return {left: Xl, right: Xr};
				    }

				    function BlowFish_Decrypt(ctx, left, right){
				        let Xl = left;
				        let Xr = right;
				        let temp;

				        for(let i = N + 1; i > 1; --i){
				            Xl = Xl ^ ctx.pbox[i];
				            Xr = F(ctx, Xl) ^ Xr;

				            temp = Xl;
				            Xl = Xr;
				            Xr = temp;
				        }

				        temp = Xl;
				        Xl = Xr;
				        Xr = temp;

				        Xr = Xr ^ ctx.pbox[1];
				        Xl = Xl ^ ctx.pbox[0];

				        return {left: Xl, right: Xr};
				    }

				    /**
				     * Initialization ctx's pbox and sbox.
				     *
				     * @param {Object} ctx The object has pbox and sbox.
				     * @param {Array} key An array of 32-bit words.
				     * @param {int} keysize The length of the key.
				     *
				     * @example
				     *
				     *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
				     */
				    function BlowFishInit(ctx, key, keysize)
				    {
				        for(let Row = 0; Row < 4; Row++)
				        {
				            ctx.sbox[Row] = [];
				            for(let Col = 0; Col < 256; Col++)
				            {
				                ctx.sbox[Row][Col] = ORIG_S[Row][Col];
				            }
				        }

				        let keyIndex = 0;
				        for(let index = 0; index < N + 2; index++)
				        {
				            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
				            keyIndex++;
				            if(keyIndex >= keysize)
				            {
				                keyIndex = 0;
				            }
				        }

				        let Data1 = 0;
				        let Data2 = 0;
				        let res = 0;
				        for(let i = 0; i < N + 2; i += 2)
				        {
				            res = BlowFish_Encrypt(ctx, Data1, Data2);
				            Data1 = res.left;
				            Data2 = res.right;
				            ctx.pbox[i] = Data1;
				            ctx.pbox[i + 1] = Data2;
				        }

				        for(let i = 0; i < 4; i++)
				        {
				            for(let j = 0; j < 256; j += 2)
				            {
				                res = BlowFish_Encrypt(ctx, Data1, Data2);
				                Data1 = res.left;
				                Data2 = res.right;
				                ctx.sbox[i][j] = Data1;
				                ctx.sbox[i][j + 1] = Data2;
				            }
				        }

				        return true;
				    }

				    /**
				     * Blowfish block cipher algorithm.
				     */
				    var Blowfish = C_algo.Blowfish = BlockCipher.extend({
				        _doReset: function () {
				            // Skip reset of nRounds has been set before and key did not change
				            if (this._keyPriorReset === this._key) {
				                return;
				            }

				            // Shortcuts
				            var key = this._keyPriorReset = this._key;
				            var keyWords = key.words;
				            var keySize = key.sigBytes / 4;

				            //Initialization pbox and sbox
				            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
				        },

				        encryptBlock: function (M, offset) {
				            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
				            M[offset] = res.left;
				            M[offset + 1] = res.right;
				        },

				        decryptBlock: function (M, offset) {
				            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
				            M[offset] = res.left;
				            M[offset + 1] = res.right;
				        },

				        blockSize: 64/32,

				        keySize: 128/32,

				        ivSize: 64/32
				    });

				    /**
				     * Shortcut functions to the cipher's object interface.
				     *
				     * @example
				     *
				     *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
				     *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
				     */
				    C.Blowfish = BlockCipher._createHelper(Blowfish);
				}());


				return CryptoJS.Blowfish;

			})); 
		} (blowfish, blowfish.exports));
		return blowfish.exports;
	}

	cryptoJs$1.exports;

	(function (module, exports) {
	(function (root, factory, undef) {
			{
				// CommonJS
				module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
			}
		}(commonjsGlobal, function (CryptoJS) {

			return CryptoJS;

		})); 
	} (cryptoJs$1, cryptoJs$1.exports));

	var cryptoJsExports = cryptoJs$1.exports;
	var cryptoJs = /*@__PURE__*/getDefaultExportFromCjs(cryptoJsExports);

	//  Copyright (C) 2018 Zilliqa
	/**
	 * Generates random bytes using native crypto module version available in the current execution environment.
	 *
	 * @param {number} bytes
	 * @returns {string}
	 */
	var randomBytes = function (bytes) {
	    return cryptoJs.lib.WordArray.random(bytes).toString(cryptoJs.enc.Hex);
	};

	/*!
	 * schnorr.js - schnorr signatures for bcoin
	 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
	 * https://github.com/bcoin-org/bcoin
	 */
	var ec = elliptic.ec;
	var secp256k1$1 = new ec("secp256k1");
	var curve = secp256k1$1.curve;
	var PRIVKEY_SIZE_BYTES = 32;
	// Public key is a point (x, y) on the curve.
	// Each coordinate requires 32 bytes.
	// In its compressed form it suffices to store the x co-ordinate
	// and the sign for y.
	// Hence a total of 33 bytes.
	var PUBKEY_COMPRESSED_SIZE_BYTES = 33;
	// Personalization string used for HMAC-DRBG instantiation.
	var ALG = Buffer$c.from("Schnorr+SHA256  ", "ascii");
	// The length in bytes of the string above.
	var ALG_LEN = 16;
	// The length in bytes of entropy inputs to HMAC-DRBG
	var ENT_LEN = 32;
	var HEX_ENC = "hex";
	/**
	 * generatePrivateKey
	 *
	 * @returns {string} - the hex-encoded private key
	 */
	var generatePrivateKey = function () {
	    return secp256k1$1
	        .genKeyPair({
	        entropy: randomBytes(secp256k1$1.curve.n.byteLength()),
	        entropyEnc: HEX_ENC,
	        pers: "zilliqajs+secp256k1+SHA256",
	    })
	        .getPrivate()
	        .toString(16, PRIVKEY_SIZE_BYTES * 2);
	};
	/**
	 * Hash (r | M).
	 * @param {Buffer} msg
	 * @param {BN} r
	 *
	 * @returns {Buffer}
	 */
	var hash$1 = function (q, pubkey, msg) {
	    var sha256 = hashjs.sha256();
	    var totalLength = PUBKEY_COMPRESSED_SIZE_BYTES * 2 + msg.byteLength; // 33 q + 33 pubkey + variable msgLen
	    var Q = q.toArrayLike(Buffer$c, "be", 33);
	    var B = Buffer$c.allocUnsafe(totalLength);
	    Q.copy(B, 0);
	    pubkey.copy(B, 33);
	    msg.copy(B, 66);
	    return new bundleExports.BN(sha256.update(B).digest("hex"), 16);
	};
	/**
	 * sign
	 *
	 * @param {Buffer} msg
	 * @param {Buffer} key
	 * @param {Buffer} pubkey
	 *
	 * @returns {Signature}
	 */
	var sign$1 = function (msg, privKey, pubKey) {
	    var prv = new bundleExports.BN(privKey);
	    var drbg = getDRBG(msg);
	    var len = curve.n.byteLength();
	    var sig;
	    while (!sig) {
	        var k = new bundleExports.BN(drbg.generate(len));
	        sig = trySign(msg, k, prv, pubKey);
	    }
	    return sig;
	};
	/**
	 * trySign
	 *
	 * @param {Buffer} msg - the message to sign over
	 * @param {BN} k - output of the HMAC-DRBG
	 * @param {BN} privateKey - the private key
	 * @param {Buffer} pubKey - the public key
	 *
	 * @returns {Signature | null =>}
	 */
	var trySign = function (msg, k, privKey, pubKey) {
	    if (privKey.isZero()) {
	        throw new Error("Bad private key.");
	    }
	    if (privKey.gte(curve.n)) {
	        throw new Error("Bad private key.");
	    }
	    // 1a. check that k is not 0
	    if (k.isZero()) {
	        return null;
	    }
	    // 1b. check that k is < the order of the group
	    if (k.gte(curve.n)) {
	        return null;
	    }
	    // 2. Compute commitment Q = kG, where g is the base point
	    var Q = curve.g.mul(k);
	    // convert the commitment to octets first
	    var compressedQ = new bundleExports.BN(Q.encodeCompressed());
	    // 3. Compute the challenge r = H(Q || pubKey || msg)
	    // mod reduce the r value by the order of secp256k1, n
	    var r = hash$1(compressedQ, pubKey, msg).umod(curve.n);
	    var h = r.clone();
	    if (h.isZero()) {
	        return null;
	    }
	    // 4. Compute s = k - r * prv
	    // 4a. Compute r * prv
	    var s = h.imul(privKey).umod(curve.n);
	    // 4b. Compute s = k - r * prv mod n
	    s = k.isub(s).umod(curve.n);
	    if (s.isZero()) {
	        return null;
	    }
	    return new Signature({ r: r, s: s });
	};
	/**
	 * Verify signature.
	 *
	 * @param {Buffer} msg
	 * @param {Buffer} signature
	 * @param {Buffer} key
	 *
	 * @returns {boolean}
	 *
	 * 1. Check if r,s is in [1, ..., order-1]
	 * 2. Compute Q = sG + r*kpub
	 * 3. If Q = O (the neutral point), return 0;
	 * 4. r' = H(Q, kpub, m)
	 * 5. return r' == r
	 */
	var verify = function (msg, signature, key) {
	    var sig = new Signature(signature);
	    if (sig.s.isZero() || sig.r.isZero()) {
	        throw new Error("Invalid signature");
	    }
	    if (sig.s.isNeg() || sig.r.isNeg()) {
	        throw new Error("Invalid signature");
	    }
	    if (sig.s.gte(curve.n) || sig.r.gte(curve.n)) {
	        throw new Error("Invalid signature");
	    }
	    var kpub = curve.decodePoint(key);
	    if (!curve.validate(kpub)) {
	        throw new Error("Invalid public key");
	    }
	    var l = kpub.mul(sig.r);
	    var r = curve.g.mul(sig.s);
	    var Q = l.add(r);
	    if (Q.isInfinity()) {
	        throw new Error("Invalid intermediate point.");
	    }
	    var compressedQ = new bundleExports.BN(Q.encodeCompressed());
	    var r1 = hash$1(compressedQ, key, msg).umod(curve.n);
	    if (r1.isZero()) {
	        throw new Error("Invalid hash.");
	    }
	    return r1.eq(sig.r);
	};
	var toSignature = function (serialised) {
	    var r = serialised.slice(0, 64);
	    var s = serialised.slice(64);
	    return new Signature({ r: r, s: s });
	};
	/**
	 * Instantiate an HMAC-DRBG.
	 *
	 * @param {Buffer} msg - used as nonce
	 *
	 * @returns {DRBG}
	 */
	var getDRBG = function (msg) {
	    var entropy = randomBytes(ENT_LEN);
	    var pers = Buffer$c.allocUnsafe(ALG_LEN + ENT_LEN);
	    Buffer$c.from(randomBytes(ENT_LEN)).copy(pers, 0);
	    ALG.copy(pers, ENT_LEN);
	    return new DRBG({
	        hash: hashjs.sha256,
	        entropy: entropy,
	        nonce: msg,
	        pers: pers,
	    });
	};

	var schnorr = /*#__PURE__*/Object.freeze({
		__proto__: null,
		generatePrivateKey: generatePrivateKey,
		hash: hash$1,
		sign: sign$1,
		trySign: trySign,
		verify: verify,
		toSignature: toSignature
	});

	//  Copyright (C) 2018 Zilliqa
	// This replaces `elliptic/lib/elliptic/ec/signature`.
	// Q. Why do we replace `elliptic/lib/elliptic/ec/signature` with this?
	// A. At the moment, Signature() in 'elliptic' is not exposed.
	var Signature = /** @class */ (function () {
	    function Signature(options) {
	        var isValid = options.r && options.s;
	        if (!isValid) {
	            throw new Error("Signature without r or s");
	        }
	        this.r = new bundleExports.BN(options.r, 16);
	        this.s = new bundleExports.BN(options.s, 16);
	    }
	    return Signature;
	}());

	//  Copyright (C) 2018 Zilliqa
	var CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
	var GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
	var polymod = function (values) {
	    var chk = 1;
	    for (var p = 0; p < values.length; ++p) {
	        var top_1 = chk >> 25;
	        chk = ((chk & 0x1ffffff) << 5) ^ values[p];
	        for (var i = 0; i < 5; ++i) {
	            if ((top_1 >> i) & 1) {
	                chk ^= GENERATOR[i];
	            }
	        }
	    }
	    return chk;
	};
	var hrpExpand = function (hrp) {
	    var ret = [];
	    var p;
	    for (p = 0; p < hrp.length; ++p) {
	        ret.push(hrp.charCodeAt(p) >> 5);
	    }
	    ret.push(0);
	    for (p = 0; p < hrp.length; ++p) {
	        ret.push(hrp.charCodeAt(p) & 31);
	    }
	    return Buffer$c.from(ret);
	};
	function verifyChecksum(hrp, data) {
	    return polymod(Buffer$c.concat([hrpExpand(hrp), data])) === 1;
	}
	function createChecksum(hrp, data) {
	    var values = Buffer$c.concat([
	        Buffer$c.from(hrpExpand(hrp)),
	        data,
	        Buffer$c.from([0, 0, 0, 0, 0, 0]),
	    ]);
	    // var values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);
	    var mod = polymod(values) ^ 1;
	    var ret = [];
	    for (var p = 0; p < 6; ++p) {
	        ret.push((mod >> (5 * (5 - p))) & 31);
	    }
	    return Buffer$c.from(ret);
	}
	var encode = function (hrp, data) {
	    var combined = Buffer$c.concat([data, createChecksum(hrp, data)]);
	    var ret = hrp + "1";
	    for (var p = 0; p < combined.length; ++p) {
	        ret += CHARSET.charAt(combined[p]);
	    }
	    return ret;
	};
	var decode = function (bechString) {
	    var p;
	    var hasLower = false;
	    var hasUpper = false;
	    for (p = 0; p < bechString.length; ++p) {
	        if (bechString.charCodeAt(p) < 33 || bechString.charCodeAt(p) > 126) {
	            return null;
	        }
	        if (bechString.charCodeAt(p) >= 97 && bechString.charCodeAt(p) <= 122) {
	            hasLower = true;
	        }
	        if (bechString.charCodeAt(p) >= 65 && bechString.charCodeAt(p) <= 90) {
	            hasUpper = true;
	        }
	    }
	    if (hasLower && hasUpper) {
	        return null;
	    }
	    bechString = bechString.toLowerCase();
	    var pos = bechString.lastIndexOf("1");
	    if (pos < 1 || pos + 7 > bechString.length || bechString.length > 90) {
	        return null;
	    }
	    var hrp = bechString.substring(0, pos);
	    var data = [];
	    for (p = pos + 1; p < bechString.length; ++p) {
	        var d = CHARSET.indexOf(bechString.charAt(p));
	        if (d === -1) {
	            return null;
	        }
	        data.push(d);
	    }
	    if (!verifyChecksum(hrp, Buffer$c.from(data))) {
	        return null;
	    }
	    return { hrp: hrp, data: Buffer$c.from(data.slice(0, data.length - 6)) };
	};
	// HRP is the human-readable part of zilliqa bech32 addresses
	var HRP = "zil";
	/**
	 * convertBits
	 *
	 * groups buffers of a certain width to buffers of the desired width.
	 *
	 * For example, converts byte buffers to buffers of maximum 5 bit numbers,
	 * padding those numbers as necessary. Necessary for encoding Ethereum-style
	 * addresses as bech32 ones.
	 *
	 * @param {Buffer} data
	 * @param {number} fromWidth
	 * @param {number} toWidth
	 * @param {boolean} pad
	 * @returns {Buffer|null}
	 */
	var convertBits = function (data, fromWidth, toWidth, pad) {
	    if (pad === void 0) { pad = true; }
	    var acc = 0;
	    var bits = 0;
	    var ret = [];
	    var maxv = (1 << toWidth) - 1;
	    for (var p = 0; p < data.length; ++p) {
	        var value = data[p];
	        if (value < 0 || value >> fromWidth !== 0) {
	            return null;
	        }
	        acc = (acc << fromWidth) | value;
	        bits += fromWidth;
	        while (bits >= toWidth) {
	            bits -= toWidth;
	            ret.push((acc >> bits) & maxv);
	        }
	    }
	    if (pad) {
	        if (bits > 0) {
	            ret.push((acc << (toWidth - bits)) & maxv);
	        }
	    }
	    else if (bits >= fromWidth || (acc << (toWidth - bits)) & maxv) {
	        return null;
	    }
	    return Buffer$c.from(ret);
	};
	/**
	 * toBech32Address
	 *
	 * Encodes a canonical 20-byte Ethereum-style address as a bech32 zilliqa
	 * address.
	 *
	 * The expected format is zil1<address><checksum> where address and checksum
	 * are the result of bech32 encoding a Buffer containing the address bytes.
	 *
	 * @param {string} 20 byte canonical address
	 * @returns {string} 38 char bech32 encoded zilliqa address
	 */
	var toBech32Address = function (address) {
	    if (!bundleExports.validation.isAddress(address)) {
	        throw new Error("Invalid address format.");
	    }
	    var addrBz = convertBits(Buffer$c.from(address.replace("0x", ""), "hex"), 8, 5);
	    if (addrBz === null) {
	        throw new Error("Could not convert byte Buffer to 5-bit Buffer");
	    }
	    return encode(HRP, addrBz);
	};
	/**
	 * fromBech32Address
	 *
	 * @param {string} address - a valid Zilliqa bech32 address
	 * @returns {string} a canonical 20-byte Ethereum-style address
	 */
	var fromBech32Address = function (address) {
	    var res = decode(address);
	    if (res === null) {
	        throw new Error("Invalid bech32 address");
	    }
	    var hrp = res.hrp, data = res.data;
	    var shouldBe = HRP;
	    if (hrp !== shouldBe) {
	        throw new Error("Expected hrp to be ".concat(shouldBe, " but got ").concat(hrp));
	    }
	    var buf = convertBits(data, 5, 8, false);
	    if (buf === null) {
	        throw new Error("Could not convert buffer to bytes");
	    }
	    return toChecksumAddress(buf.toString("hex"));
	};

	//  Copyright (C) 2018 Zilliqa
	var secp256k1 = new elliptic.ec("secp256k1");
	/**
	 * getAddressFromPrivateKey
	 *
	 * takes a hex-encoded string (private key) and returns its corresponding
	 * 20-byte hex-encoded address.
	 *
	 * @param {string} privateKey
	 * @returns {string}
	 */
	var getAddressFromPrivateKey = function (privateKey) {
	    var normalizedPrviateKey = normalizePrivateKey(privateKey);
	    var keyPair = secp256k1.keyFromPrivate(normalizedPrviateKey, "hex");
	    var pub = keyPair.getPublic(true, "hex");
	    return toChecksumAddress(hashjs.sha256().update(pub, "hex").digest("hex").slice(24));
	};
	/**
	 * getPubKeyFromPrivateKey
	 *
	 * takes a hex-encoded string (private key) and returns its corresponding
	 * hex-encoded 33-byte public key.
	 *
	 * @param {string} privateKey
	 * @returns {string}
	 */
	var getPubKeyFromPrivateKey = function (privateKey) {
	    var normalizedPrviateKey = normalizePrivateKey(privateKey);
	    var keyPair = secp256k1.keyFromPrivate(normalizedPrviateKey, "hex");
	    return keyPair.getPublic(true, "hex");
	};
	/**
	 * getAccountFrom0xPrivateKey
	 *
	 * Utility method for recovering account from 0x private key.
	 * See https://github.com/Zilliqa/zilliqa-js/pull/159
	 * @param privateKeyWith0x : private key with 0x prefix
	 */
	var getAccountFrom0xPrivateKey = function (privateKeyWith0x) {
	    var privateKeyWithout0x = normalizePrivateKey(privateKeyWith0x);
	    var keyPair = secp256k1.keyFromPrivate(privateKeyWith0x, "hex");
	    var publicKeyWith0x = keyPair.getPublic(true, "hex");
	    var addressWith0x = getAddressFromPublicKey(publicKeyWith0x);
	    var bech32With0x = toBech32Address(addressWith0x);
	    var with0x = {
	        prv: privateKeyWith0x,
	        pub: publicKeyWith0x,
	        addr: addressWith0x,
	        bech32: bech32With0x,
	    };
	    var keyPair2 = secp256k1.keyFromPrivate(privateKeyWithout0x, "hex");
	    var publicKeyWithout0x = keyPair2.getPublic(true, "hex");
	    var addressWithout0x = getAddressFromPublicKey(publicKeyWithout0x);
	    var bech32Without0x = toBech32Address(addressWithout0x);
	    var without0x = {
	        prv: privateKeyWithout0x,
	        pub: publicKeyWithout0x,
	        addr: addressWithout0x,
	        bech32: bech32Without0x,
	    };
	    var privateKeyAfterChange = keyPair.getPrivate("hex");
	    var publicKeyAfterChange = keyPair.getPublic(true, "hex");
	    var addressAfterChange = getAddressFromPublicKey(publicKeyAfterChange);
	    var bech32AfterChange = toBech32Address(addressAfterChange);
	    var changed = {
	        prv: privateKeyAfterChange,
	        pub: publicKeyAfterChange,
	        addr: addressAfterChange,
	        bech32: bech32AfterChange,
	    };
	    return {
	        with0x: with0x,
	        without0x: without0x,
	        changed: changed,
	    };
	};
	/**
	 * compressPublicKey
	 *
	 * @param {string} publicKey - 65-byte public key, a point (x, y)
	 *
	 * @returns {string}
	 */
	var compressPublicKey = function (publicKey) {
	    return secp256k1.keyFromPublic(publicKey, "hex").getPublic(true, "hex");
	};
	/**
	 * getAddressFromPublicKey
	 *
	 * takes hex-encoded string and returns the corresponding address
	 *
	 * @param {string} pubKey
	 * @returns {string}
	 */
	var getAddressFromPublicKey = function (publicKey) {
	    var normalized = publicKey.toLowerCase().replace("0x", "");
	    return toChecksumAddress(hashjs.sha256().update(normalized, "hex").digest("hex").slice(24));
	};
	/**
	 * toChecksumAddress
	 *
	 * takes hex-encoded string and returns the corresponding address
	 *
	 * @param {string} address
	 * @returns {string}
	 */
	var toChecksumAddress = function (address) {
	    if (!bundleExports.validation.isAddress(address)) {
	        throw new Error("".concat(address, " is not a valid base 16 address"));
	    }
	    address = address.toLowerCase().replace("0x", "");
	    var hash = hashjs.sha256().update(address, "hex").digest("hex");
	    var v = new bundleExports.BN(hash, "hex", "be");
	    var ret = "0x";
	    for (var i = 0; i < address.length; i++) {
	        if ("0123456789".indexOf(address[i]) !== -1) {
	            ret += address[i];
	        }
	        else {
	            ret += v.and(new bundleExports.BN(2).pow(new bundleExports.BN(255 - 6 * i))).gte(new bundleExports.BN(1))
	                ? address[i].toUpperCase()
	                : address[i].toLowerCase();
	        }
	    }
	    return ret;
	};
	/**
	 * isValidChecksumAddress
	 *
	 * takes hex-encoded string and returns boolean if address is checksumed
	 *
	 * @param {string} address
	 * @returns {boolean}
	 */
	var isValidChecksumAddress = function (address) {
	    return (bundleExports.validation.isAddress(address.replace("0x", "")) &&
	        toChecksumAddress(address) === address);
	};
	/**
	 * normaliseAddress
	 *
	 * takes in a base16 address or a zilliqa bech32 encoded address
	 * and returns a checksum base16 address. If the address is neither a base16
	 * nor bech32 address, the code will return an error
	 * @param {string)} address
	 * @returns {string}
	 */
	var normaliseAddress = function (address) {
	    if (bundleExports.validation.isBech32(address)) {
	        return fromBech32Address(address);
	    }
	    if (!isValidChecksumAddress(address)) {
	        throw Error("Wrong address format, should be either bech32 or checksummed address");
	    }
	    return address;
	};
	/**
	 * encodeBase58 - may be required for DID public key
	 * undeprecating this function after version 2.0.0
	 *
	 * @param {string} hex - base 16 encoded string
	 * @returns {string} - big endian base 58 encoded string
	 */
	var encodeBase58 = function (hex) {
	    var clean = hex.toLowerCase().replace("0x", "");
	    var tbl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
	    var base = new bundleExports.BN(58);
	    var zero = new bundleExports.BN(0);
	    var x = new bundleExports.BN(clean, 16);
	    var res = "";
	    while (x.gt(zero)) {
	        var rem = x.mod(base).toNumber(); // safe, always < 58
	        // big endian
	        res = tbl[rem] + res;
	        // quotient, remainders thrown away in integer division
	        x = x.div(base);
	    }
	    // convert to big endian in case the input hex is little endian
	    var hexBE = x.toString("hex", clean.length);
	    for (var i = 0; i < hexBE.length; i += 2) {
	        if (hex[i] === "0" && hex[i + 1] === "0") {
	            res = tbl[0] + res;
	        }
	        else {
	            break;
	        }
	    }
	    return res;
	};
	/**
	 * decodeBase58 - may be required for DID public key
	 * undeprecating this function after version 2.0.0
	 *
	 * @param {string} raw - base 58 string
	 * @returns {string} - big endian base 16 string
	 */
	var decodeBase58 = function (raw) {
	    var tbl = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
	    var base = new bundleExports.BN(58);
	    var zero = new bundleExports.BN(0);
	    var isBreak = false;
	    var n = new bundleExports.BN(0);
	    var leader = "";
	    for (var i = 0; i < raw.length; i++) {
	        var char = raw.charAt(i);
	        var weight = new bundleExports.BN(tbl.indexOf(char));
	        n = n.mul(base).add(weight);
	        // check if padding required
	        if (!isBreak) {
	            if (i - 1 > 0 && raw[i - 1] !== "1") {
	                isBreak = true;
	                continue;
	            }
	            if (char === "1") {
	                leader += "00";
	            }
	        }
	    }
	    if (n.eq(zero)) {
	        return leader;
	    }
	    var res = leader + n.toString("hex");
	    if (res.length % 2 !== 0) {
	        res = "0" + res;
	    }
	    return res;
	};
	/**
	 * verifyPrivateKey
	 *
	 * @param {string|Buffer} privateKey
	 * @returns {boolean}
	 */
	var verifyPrivateKey = function (privateKey) {
	    var keyPair = secp256k1.keyFromPrivate(privateKey, "hex");
	    var result = keyPair.validate().result;
	    return result;
	};
	/**
	 * normalizePrivateKey : normalise private key from 0x or without 0x prefix
	 *
	 * @param {string} privateKey
	 * @returns {string}
	 */
	var normalizePrivateKey = function (privateKey) {
	    try {
	        if (!bundleExports.validation.isPrivateKey(privateKey)) {
	            throw new Error("Private key is not correct");
	        }
	        var normalized = privateKey.toLowerCase().replace("0x", "");
	        if (!verifyPrivateKey(normalized)) {
	            throw new Error("Private key is not correct");
	        }
	        return normalized;
	    }
	    catch (error) {
	        throw error;
	    }
	};

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	var aesJs = {exports: {}};

	/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
	aesJs.exports;

	(function (module, exports) {
		(function(root) {

		    function checkInt(value) {
		        return (parseInt(value) === value);
		    }

		    function checkInts(arrayish) {
		        if (!checkInt(arrayish.length)) { return false; }

		        for (var i = 0; i < arrayish.length; i++) {
		            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
		                return false;
		            }
		        }

		        return true;
		    }

		    function coerceArray(arg, copy) {

		        // ArrayBuffer view
		        if (arg.buffer && arg.name === 'Uint8Array') {

		            if (copy) {
		                if (arg.slice) {
		                    arg = arg.slice();
		                } else {
		                    arg = Array.prototype.slice.call(arg);
		                }
		            }

		            return arg;
		        }

		        // It's an array; check it is a valid representation of a byte
		        if (Array.isArray(arg)) {
		            if (!checkInts(arg)) {
		                throw new Error('Array contains invalid value: ' + arg);
		            }

		            return new Uint8Array(arg);
		        }

		        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
		        if (checkInt(arg.length) && checkInts(arg)) {
		            return new Uint8Array(arg);
		        }

		        throw new Error('unsupported array-like object');
		    }

		    function createArray(length) {
		        return new Uint8Array(length);
		    }

		    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
		        if (sourceStart != null || sourceEnd != null) {
		            if (sourceArray.slice) {
		                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
		            } else {
		                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
		            }
		        }
		        targetArray.set(sourceArray, targetStart);
		    }



		    var convertUtf8 = (function() {
		        function toBytes(text) {
		            var result = [], i = 0;
		            text = encodeURI(text);
		            while (i < text.length) {
		                var c = text.charCodeAt(i++);

		                // if it is a % sign, encode the following 2 bytes as a hex value
		                if (c === 37) {
		                    result.push(parseInt(text.substr(i, 2), 16));
		                    i += 2;

		                // otherwise, just the actual byte
		                } else {
		                    result.push(c);
		                }
		            }

		            return coerceArray(result);
		        }

		        function fromBytes(bytes) {
		            var result = [], i = 0;

		            while (i < bytes.length) {
		                var c = bytes[i];

		                if (c < 128) {
		                    result.push(String.fromCharCode(c));
		                    i++;
		                } else if (c > 191 && c < 224) {
		                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
		                    i += 2;
		                } else {
		                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
		                    i += 3;
		                }
		            }

		            return result.join('');
		        }

		        return {
		            toBytes: toBytes,
		            fromBytes: fromBytes,
		        }
		    })();

		    var convertHex = (function() {
		        function toBytes(text) {
		            var result = [];
		            for (var i = 0; i < text.length; i += 2) {
		                result.push(parseInt(text.substr(i, 2), 16));
		            }

		            return result;
		        }

		        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
		        var Hex = '0123456789abcdef';

		        function fromBytes(bytes) {
		                var result = [];
		                for (var i = 0; i < bytes.length; i++) {
		                    var v = bytes[i];
		                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
		                }
		                return result.join('');
		        }

		        return {
		            toBytes: toBytes,
		            fromBytes: fromBytes,
		        }
		    })();


		    // Number of rounds by keysize
		    var numberOfRounds = {16: 10, 24: 12, 32: 14};

		    // Round constant words
		    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

		    // S-box and Inverse S-box (S is for Substitution)
		    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
		    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

		    // Transformations for encryption
		    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
		    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
		    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
		    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

		    // Transformations for decryption
		    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
		    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
		    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
		    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

		    // Transformations for decryption key expansion
		    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
		    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
		    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
		    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

		    function convertToInt32(bytes) {
		        var result = [];
		        for (var i = 0; i < bytes.length; i += 4) {
		            result.push(
		                (bytes[i    ] << 24) |
		                (bytes[i + 1] << 16) |
		                (bytes[i + 2] <<  8) |
		                 bytes[i + 3]
		            );
		        }
		        return result;
		    }

		    var AES = function(key) {
		        if (!(this instanceof AES)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        Object.defineProperty(this, 'key', {
		            value: coerceArray(key, true)
		        });

		        this._prepare();
		    };


		    AES.prototype._prepare = function() {

		        var rounds = numberOfRounds[this.key.length];
		        if (rounds == null) {
		            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
		        }

		        // encryption round keys
		        this._Ke = [];

		        // decryption round keys
		        this._Kd = [];

		        for (var i = 0; i <= rounds; i++) {
		            this._Ke.push([0, 0, 0, 0]);
		            this._Kd.push([0, 0, 0, 0]);
		        }

		        var roundKeyCount = (rounds + 1) * 4;
		        var KC = this.key.length / 4;

		        // convert the key into ints
		        var tk = convertToInt32(this.key);

		        // copy values into round key arrays
		        var index;
		        for (var i = 0; i < KC; i++) {
		            index = i >> 2;
		            this._Ke[index][i % 4] = tk[i];
		            this._Kd[rounds - index][i % 4] = tk[i];
		        }

		        // key expansion (fips-197 section 5.2)
		        var rconpointer = 0;
		        var t = KC, tt;
		        while (t < roundKeyCount) {
		            tt = tk[KC - 1];
		            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
		                      (S[(tt >>  8) & 0xFF] << 16) ^
		                      (S[ tt        & 0xFF] <<  8) ^
		                       S[(tt >> 24) & 0xFF]        ^
		                      (rcon[rconpointer] << 24));
		            rconpointer += 1;

		            // key expansion (for non-256 bit)
		            if (KC != 8) {
		                for (var i = 1; i < KC; i++) {
		                    tk[i] ^= tk[i - 1];
		                }

		            // key expansion for 256-bit keys is "slightly different" (fips-197)
		            } else {
		                for (var i = 1; i < (KC / 2); i++) {
		                    tk[i] ^= tk[i - 1];
		                }
		                tt = tk[(KC / 2) - 1];

		                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
		                              (S[(tt >>  8) & 0xFF] <<  8) ^
		                              (S[(tt >> 16) & 0xFF] << 16) ^
		                              (S[(tt >> 24) & 0xFF] << 24));

		                for (var i = (KC / 2) + 1; i < KC; i++) {
		                    tk[i] ^= tk[i - 1];
		                }
		            }

		            // copy values into round key arrays
		            var i = 0, r, c;
		            while (i < KC && t < roundKeyCount) {
		                r = t >> 2;
		                c = t % 4;
		                this._Ke[r][c] = tk[i];
		                this._Kd[rounds - r][c] = tk[i++];
		                t++;
		            }
		        }

		        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
		        for (var r = 1; r < rounds; r++) {
		            for (var c = 0; c < 4; c++) {
		                tt = this._Kd[r][c];
		                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
		                                  U2[(tt >> 16) & 0xFF] ^
		                                  U3[(tt >>  8) & 0xFF] ^
		                                  U4[ tt        & 0xFF]);
		            }
		        }
		    };

		    AES.prototype.encrypt = function(plaintext) {
		        if (plaintext.length != 16) {
		            throw new Error('invalid plaintext size (must be 16 bytes)');
		        }

		        var rounds = this._Ke.length - 1;
		        var a = [0, 0, 0, 0];

		        // convert plaintext to (ints ^ key)
		        var t = convertToInt32(plaintext);
		        for (var i = 0; i < 4; i++) {
		            t[i] ^= this._Ke[0][i];
		        }

		        // apply round transforms
		        for (var r = 1; r < rounds; r++) {
		            for (var i = 0; i < 4; i++) {
		                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
		                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
		                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
		                        T4[ t[(i + 3) % 4]        & 0xff] ^
		                        this._Ke[r][i]);
		            }
		            t = a.slice();
		        }

		        // the last round is special
		        var result = createArray(16), tt;
		        for (var i = 0; i < 4; i++) {
		            tt = this._Ke[rounds][i];
		            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
		            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
		            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
		            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
		        }

		        return result;
		    };

		    AES.prototype.decrypt = function(ciphertext) {
		        if (ciphertext.length != 16) {
		            throw new Error('invalid ciphertext size (must be 16 bytes)');
		        }

		        var rounds = this._Kd.length - 1;
		        var a = [0, 0, 0, 0];

		        // convert plaintext to (ints ^ key)
		        var t = convertToInt32(ciphertext);
		        for (var i = 0; i < 4; i++) {
		            t[i] ^= this._Kd[0][i];
		        }

		        // apply round transforms
		        for (var r = 1; r < rounds; r++) {
		            for (var i = 0; i < 4; i++) {
		                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
		                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
		                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
		                        T8[ t[(i + 1) % 4]        & 0xff] ^
		                        this._Kd[r][i]);
		            }
		            t = a.slice();
		        }

		        // the last round is special
		        var result = createArray(16), tt;
		        for (var i = 0; i < 4; i++) {
		            tt = this._Kd[rounds][i];
		            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
		            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
		            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
		            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
		        }

		        return result;
		    };


		    /**
		     *  Mode Of Operation - Electonic Codebook (ECB)
		     */
		    var ModeOfOperationECB = function(key) {
		        if (!(this instanceof ModeOfOperationECB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Electronic Code Block";
		        this.name = "ecb";

		        this._aes = new AES(key);
		    };

		    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
		        plaintext = coerceArray(plaintext);

		        if ((plaintext.length % 16) !== 0) {
		            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
		        }

		        var ciphertext = createArray(plaintext.length);
		        var block = createArray(16);

		        for (var i = 0; i < plaintext.length; i += 16) {
		            copyArray(plaintext, block, 0, i, i + 16);
		            block = this._aes.encrypt(block);
		            copyArray(block, ciphertext, i);
		        }

		        return ciphertext;
		    };

		    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
		        ciphertext = coerceArray(ciphertext);

		        if ((ciphertext.length % 16) !== 0) {
		            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
		        }

		        var plaintext = createArray(ciphertext.length);
		        var block = createArray(16);

		        for (var i = 0; i < ciphertext.length; i += 16) {
		            copyArray(ciphertext, block, 0, i, i + 16);
		            block = this._aes.decrypt(block);
		            copyArray(block, plaintext, i);
		        }

		        return plaintext;
		    };


		    /**
		     *  Mode Of Operation - Cipher Block Chaining (CBC)
		     */
		    var ModeOfOperationCBC = function(key, iv) {
		        if (!(this instanceof ModeOfOperationCBC)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Cipher Block Chaining";
		        this.name = "cbc";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 bytes)');
		        }

		        this._lastCipherblock = coerceArray(iv, true);

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
		        plaintext = coerceArray(plaintext);

		        if ((plaintext.length % 16) !== 0) {
		            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
		        }

		        var ciphertext = createArray(plaintext.length);
		        var block = createArray(16);

		        for (var i = 0; i < plaintext.length; i += 16) {
		            copyArray(plaintext, block, 0, i, i + 16);

		            for (var j = 0; j < 16; j++) {
		                block[j] ^= this._lastCipherblock[j];
		            }

		            this._lastCipherblock = this._aes.encrypt(block);
		            copyArray(this._lastCipherblock, ciphertext, i);
		        }

		        return ciphertext;
		    };

		    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
		        ciphertext = coerceArray(ciphertext);

		        if ((ciphertext.length % 16) !== 0) {
		            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
		        }

		        var plaintext = createArray(ciphertext.length);
		        var block = createArray(16);

		        for (var i = 0; i < ciphertext.length; i += 16) {
		            copyArray(ciphertext, block, 0, i, i + 16);
		            block = this._aes.decrypt(block);

		            for (var j = 0; j < 16; j++) {
		                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
		            }

		            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
		        }

		        return plaintext;
		    };


		    /**
		     *  Mode Of Operation - Cipher Feedback (CFB)
		     */
		    var ModeOfOperationCFB = function(key, iv, segmentSize) {
		        if (!(this instanceof ModeOfOperationCFB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Cipher Feedback";
		        this.name = "cfb";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 size)');
		        }

		        if (!segmentSize) { segmentSize = 1; }

		        this.segmentSize = segmentSize;

		        this._shiftRegister = coerceArray(iv, true);

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
		        if ((plaintext.length % this.segmentSize) != 0) {
		            throw new Error('invalid plaintext size (must be segmentSize bytes)');
		        }

		        var encrypted = coerceArray(plaintext, true);

		        var xorSegment;
		        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
		            xorSegment = this._aes.encrypt(this._shiftRegister);
		            for (var j = 0; j < this.segmentSize; j++) {
		                encrypted[i + j] ^= xorSegment[j];
		            }

		            // Shift the register
		            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
		            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
		        }

		        return encrypted;
		    };

		    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
		        if ((ciphertext.length % this.segmentSize) != 0) {
		            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
		        }

		        var plaintext = coerceArray(ciphertext, true);

		        var xorSegment;
		        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
		            xorSegment = this._aes.encrypt(this._shiftRegister);

		            for (var j = 0; j < this.segmentSize; j++) {
		                plaintext[i + j] ^= xorSegment[j];
		            }

		            // Shift the register
		            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
		            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
		        }

		        return plaintext;
		    };

		    /**
		     *  Mode Of Operation - Output Feedback (OFB)
		     */
		    var ModeOfOperationOFB = function(key, iv) {
		        if (!(this instanceof ModeOfOperationOFB)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Output Feedback";
		        this.name = "ofb";

		        if (!iv) {
		            iv = createArray(16);

		        } else if (iv.length != 16) {
		            throw new Error('invalid initialation vector size (must be 16 bytes)');
		        }

		        this._lastPrecipher = coerceArray(iv, true);
		        this._lastPrecipherIndex = 16;

		        this._aes = new AES(key);
		    };

		    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
		        var encrypted = coerceArray(plaintext, true);

		        for (var i = 0; i < encrypted.length; i++) {
		            if (this._lastPrecipherIndex === 16) {
		                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
		                this._lastPrecipherIndex = 0;
		            }
		            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
		        }

		        return encrypted;
		    };

		    // Decryption is symetric
		    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


		    /**
		     *  Counter object for CTR common mode of operation
		     */
		    var Counter = function(initialValue) {
		        if (!(this instanceof Counter)) {
		            throw Error('Counter must be instanitated with `new`');
		        }

		        // We allow 0, but anything false-ish uses the default 1
		        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

		        if (typeof(initialValue) === 'number') {
		            this._counter = createArray(16);
		            this.setValue(initialValue);

		        } else {
		            this.setBytes(initialValue);
		        }
		    };

		    Counter.prototype.setValue = function(value) {
		        if (typeof(value) !== 'number' || parseInt(value) != value) {
		            throw new Error('invalid counter value (must be an integer)');
		        }

		        // We cannot safely handle numbers beyond the safe range for integers
		        if (value > Number.MAX_SAFE_INTEGER) {
		            throw new Error('integer value out of safe range');
		        }

		        for (var index = 15; index >= 0; --index) {
		            this._counter[index] = value % 256;
		            value = parseInt(value / 256);
		        }
		    };

		    Counter.prototype.setBytes = function(bytes) {
		        bytes = coerceArray(bytes, true);

		        if (bytes.length != 16) {
		            throw new Error('invalid counter bytes size (must be 16 bytes)');
		        }

		        this._counter = bytes;
		    };

		    Counter.prototype.increment = function() {
		        for (var i = 15; i >= 0; i--) {
		            if (this._counter[i] === 255) {
		                this._counter[i] = 0;
		            } else {
		                this._counter[i]++;
		                break;
		            }
		        }
		    };


		    /**
		     *  Mode Of Operation - Counter (CTR)
		     */
		    var ModeOfOperationCTR = function(key, counter) {
		        if (!(this instanceof ModeOfOperationCTR)) {
		            throw Error('AES must be instanitated with `new`');
		        }

		        this.description = "Counter";
		        this.name = "ctr";

		        if (!(counter instanceof Counter)) {
		            counter = new Counter(counter);
		        }

		        this._counter = counter;

		        this._remainingCounter = null;
		        this._remainingCounterIndex = 16;

		        this._aes = new AES(key);
		    };

		    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
		        var encrypted = coerceArray(plaintext, true);

		        for (var i = 0; i < encrypted.length; i++) {
		            if (this._remainingCounterIndex === 16) {
		                this._remainingCounter = this._aes.encrypt(this._counter._counter);
		                this._remainingCounterIndex = 0;
		                this._counter.increment();
		            }
		            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
		        }

		        return encrypted;
		    };

		    // Decryption is symetric
		    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


		    ///////////////////////
		    // Padding

		    // See:https://tools.ietf.org/html/rfc2315
		    function pkcs7pad(data) {
		        data = coerceArray(data, true);
		        var padder = 16 - (data.length % 16);
		        var result = createArray(data.length + padder);
		        copyArray(data, result);
		        for (var i = data.length; i < result.length; i++) {
		            result[i] = padder;
		        }
		        return result;
		    }

		    function pkcs7strip(data) {
		        data = coerceArray(data, true);
		        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

		        var padder = data[data.length - 1];
		        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

		        var length = data.length - padder;
		        for (var i = 0; i < padder; i++) {
		            if (data[length + i] !== padder) {
		                throw new Error('PKCS#7 invalid padding byte');
		            }
		        }

		        var result = createArray(length);
		        copyArray(data, result, 0, 0, length);
		        return result;
		    }

		    ///////////////////////
		    // Exporting


		    // The block cipher
		    var aesjs = {
		        AES: AES,
		        Counter: Counter,

		        ModeOfOperation: {
		            ecb: ModeOfOperationECB,
		            cbc: ModeOfOperationCBC,
		            cfb: ModeOfOperationCFB,
		            ofb: ModeOfOperationOFB,
		            ctr: ModeOfOperationCTR
		        },

		        utils: {
		            hex: convertHex,
		            utf8: convertUtf8
		        },

		        padding: {
		            pkcs7: {
		                pad: pkcs7pad,
		                strip: pkcs7strip
		            }
		        },

		        _arrayTest: {
		            coerceArray: coerceArray,
		            createArray: createArray,
		            copyArray: copyArray,
		        }
		    };


		    // node.js
		    {
		        module.exports = aesjs;

		    // RequireJS/AMD
		    // http://www.requirejs.org/docs/api.html
		    // https://github.com/amdjs/amdjs-api/wiki/AMD
		    }


		})(); 
	} (aesJs, aesJs.exports));

	var aesJsExports = aesJs.exports;
	var aes = /*@__PURE__*/getDefaultExportFromCjs(aesJsExports);

	var safeBuffer = {exports: {}};

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	safeBuffer.exports;

	(function (module, exports) {
		/* eslint-disable node/no-deprecated-api */
		var buffer = require$$0$3;
		var Buffer = buffer.Buffer;

		// alternative to using Object.keys for old browsers
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer;
		} else {
		  // Copy properties from require('buffer')
		  copyProps(buffer, exports);
		  exports.Buffer = SafeBuffer;
		}

		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}

		SafeBuffer.prototype = Object.create(Buffer.prototype);

		// Copy static methods from Buffer
		copyProps(Buffer, SafeBuffer);

		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		};

		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf
		};

		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		};

		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer.SlowBuffer(size)
		}; 
	} (safeBuffer, safeBuffer.exports));

	var safeBufferExports = safeBuffer.exports;

	var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

	var precondition = function (iterations, keylen) {
	  if (typeof iterations !== 'number') {
	    throw new TypeError('Iterations not a number')
	  }

	  if (iterations < 0) {
	    throw new TypeError('Bad iterations')
	  }

	  if (typeof keylen !== 'number') {
	    throw new TypeError('Key length not a number')
	  }

	  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
	    throw new TypeError('Bad key length')
	  }
	};

	var defaultEncoding$1;
	/* istanbul ignore next */
	if (commonjsGlobal.process && commonjsGlobal.process.browser) {
	  defaultEncoding$1 = 'utf-8';
	} else if (commonjsGlobal.process && commonjsGlobal.process.version) {
	  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

	  defaultEncoding$1 = pVersionMajor >= 6 ? 'utf-8' : 'binary';
	} else {
	  defaultEncoding$1 = 'utf-8';
	}
	var defaultEncoding_1 = defaultEncoding$1;

	var readableBrowser = {exports: {}};

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };
	    
	// Alias for removeListener added in NodeJS 10.0
	// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
	EventEmitter.prototype.off = function(type, listener){
	    return this.removeListener(type, listener);
	};

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var _polyfillNode_events = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': EventEmitter,
		EventEmitter: EventEmitter
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

	var streamBrowser = require$$0.EventEmitter;

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser$1 = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config$1 = {};

	function noop$2() {}

	var on = noop$2;
	var addListener = noop$2;
	var once$2 = noop$2;
	var off = noop$2;
	var removeListener = noop$2;
	var removeAllListeners = noop$2;
	var emit = noop$2;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1$1 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser$1,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once$2,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config$1,
	  uptime: uptime
	};

	var inherits$9;
	if (typeof Object.create === 'function'){
	  inherits$9 = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$9 = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$a = inherits$9;

	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
	  function getOwnPropertyDescriptors(obj) {
	    var keys = Object.keys(obj);
	    var descriptors = {};
	    for (var i = 0; i < keys.length; i++) {
	      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
	    }
	    return descriptors;
	  };

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate$1(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate$1(fn, msg).apply(this, arguments);
	    };
	  }

	  if (browser$1$1.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (browser$1$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (browser$1$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = browser$1$1.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer(maybeBuf) {
	  return Buffer$c.isBuffer(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log() {
	  console.log('%s - %s', timestamp(), format.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

	function promisify(original) {
	  if (typeof original !== 'function')
	    throw new TypeError('The "original" argument must be of type Function');

	  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
	    var fn = original[kCustomPromisifiedSymbol];
	    if (typeof fn !== 'function') {
	      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
	    }
	    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	      value: fn, enumerable: false, writable: false, configurable: true
	    });
	    return fn;
	  }

	  function fn() {
	    var promiseResolve, promiseReject;
	    var promise = new Promise(function (resolve, reject) {
	      promiseResolve = resolve;
	      promiseReject = reject;
	    });

	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    args.push(function (err, value) {
	      if (err) {
	        promiseReject(err);
	      } else {
	        promiseResolve(value);
	      }
	    });

	    try {
	      original.apply(this, args);
	    } catch (err) {
	      promiseReject(err);
	    }

	    return promise;
	  }

	  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

	  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	    value: fn, enumerable: false, writable: false, configurable: true
	  });
	  return Object.defineProperties(
	    fn,
	    getOwnPropertyDescriptors(original)
	  );
	}

	promisify.custom = kCustomPromisifiedSymbol;

	function callbackifyOnRejected(reason, cb) {
	  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
	  // Because `null` is a special error value in callbacks which means "no error
	  // occurred", we error-wrap so the callback consumer can distinguish between
	  // "the promise rejected with null" or "the promise fulfilled with undefined".
	  if (!reason) {
	    var newReason = new Error('Promise was rejected with a falsy value');
	    newReason.reason = reason;
	    reason = newReason;
	  }
	  return cb(reason);
	}

	function callbackify(original) {
	  if (typeof original !== 'function') {
	    throw new TypeError('The "original" argument must be of type Function');
	  }

	  // We DO NOT return the promise as it gives the user a false sense that
	  // the promise is actually somehow related to the callback's execution
	  // and that the callback throwing will reject the promise.
	  function callbackified() {
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }

	    var maybeCb = args.pop();
	    if (typeof maybeCb !== 'function') {
	      throw new TypeError('The last argument must be of type Function');
	    }
	    var self = this;
	    var cb = function() {
	      return maybeCb.apply(self, arguments);
	    };
	    // In true node style we process the callback on `nextTick` with all the
	    // implications (stack, `uncaughtException`, `async_hooks`)
	    original.apply(this, args)
	      .then(function(ret) { browser$1$1.nextTick(cb.bind(null, null, ret)); },
	        function(rej) { browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
	  }

	  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
	  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
	  return callbackified;
	}

	var _polyfillNode_util = {
	  inherits: inherits$a,
	  _extend: _extend,
	  log: log,
	  isBuffer: isBuffer,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString,
	  isNumber: isNumber,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray,
	  inspect: inspect,
	  deprecate: deprecate$1,
	  format: format,
	  debuglog: debuglog,
	  promisify: promisify,
	  callbackify: callbackify,
	};

	var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		format: format,
		deprecate: deprecate$1,
		debuglog: debuglog,
		inspect: inspect,
		isArray: isArray,
		isBoolean: isBoolean,
		isNull: isNull,
		isNullOrUndefined: isNullOrUndefined,
		isNumber: isNumber,
		isString: isString,
		isSymbol: isSymbol,
		isUndefined: isUndefined,
		isRegExp: isRegExp,
		isObject: isObject,
		isDate: isDate,
		isError: isError,
		isFunction: isFunction,
		isPrimitive: isPrimitive,
		isBuffer: isBuffer,
		log: log,
		inherits: inherits$a,
		_extend: _extend,
		promisify: promisify,
		callbackify: callbackify,
		'default': _polyfillNode_util
	});

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);

	var buffer_list;
	var hasRequiredBuffer_list;

	function requireBuffer_list () {
		if (hasRequiredBuffer_list) return buffer_list;
		hasRequiredBuffer_list = 1;

		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
		function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
		function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
		const _require = require$$0$3,
		  Buffer = _require.Buffer;
		const _require2 = require$$3,
		  inspect = _require2.inspect;
		const custom = inspect && inspect.custom || 'inspect';
		function copyBuffer(src, target, offset) {
		  Buffer.prototype.copy.call(src, target, offset);
		}
		buffer_list = class BufferList {
		  constructor() {
		    this.head = null;
		    this.tail = null;
		    this.length = 0;
		  }
		  push(v) {
		    const entry = {
		      data: v,
		      next: null
		    };
		    if (this.length > 0) this.tail.next = entry;else this.head = entry;
		    this.tail = entry;
		    ++this.length;
		  }
		  unshift(v) {
		    const entry = {
		      data: v,
		      next: this.head
		    };
		    if (this.length === 0) this.tail = entry;
		    this.head = entry;
		    ++this.length;
		  }
		  shift() {
		    if (this.length === 0) return;
		    const ret = this.head.data;
		    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		    --this.length;
		    return ret;
		  }
		  clear() {
		    this.head = this.tail = null;
		    this.length = 0;
		  }
		  join(s) {
		    if (this.length === 0) return '';
		    var p = this.head;
		    var ret = '' + p.data;
		    while (p = p.next) ret += s + p.data;
		    return ret;
		  }
		  concat(n) {
		    if (this.length === 0) return Buffer.alloc(0);
		    const ret = Buffer.allocUnsafe(n >>> 0);
		    var p = this.head;
		    var i = 0;
		    while (p) {
		      copyBuffer(p.data, ret, i);
		      i += p.data.length;
		      p = p.next;
		    }
		    return ret;
		  }

		  // Consumes a specified amount of bytes or characters from the buffered data.
		  consume(n, hasStrings) {
		    var ret;
		    if (n < this.head.data.length) {
		      // `slice` is the same for buffers and strings.
		      ret = this.head.data.slice(0, n);
		      this.head.data = this.head.data.slice(n);
		    } else if (n === this.head.data.length) {
		      // First chunk is a perfect match.
		      ret = this.shift();
		    } else {
		      // Result spans more than one buffer.
		      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
		    }
		    return ret;
		  }
		  first() {
		    return this.head.data;
		  }

		  // Consumes a specified amount of characters from the buffered data.
		  _getString(n) {
		    var p = this.head;
		    var c = 1;
		    var ret = p.data;
		    n -= ret.length;
		    while (p = p.next) {
		      const str = p.data;
		      const nb = n > str.length ? str.length : n;
		      if (nb === str.length) ret += str;else ret += str.slice(0, n);
		      n -= nb;
		      if (n === 0) {
		        if (nb === str.length) {
		          ++c;
		          if (p.next) this.head = p.next;else this.head = this.tail = null;
		        } else {
		          this.head = p;
		          p.data = str.slice(nb);
		        }
		        break;
		      }
		      ++c;
		    }
		    this.length -= c;
		    return ret;
		  }

		  // Consumes a specified amount of bytes from the buffered data.
		  _getBuffer(n) {
		    const ret = Buffer.allocUnsafe(n);
		    var p = this.head;
		    var c = 1;
		    p.data.copy(ret);
		    n -= p.data.length;
		    while (p = p.next) {
		      const buf = p.data;
		      const nb = n > buf.length ? buf.length : n;
		      buf.copy(ret, ret.length - n, 0, nb);
		      n -= nb;
		      if (n === 0) {
		        if (nb === buf.length) {
		          ++c;
		          if (p.next) this.head = p.next;else this.head = this.tail = null;
		        } else {
		          this.head = p;
		          p.data = buf.slice(nb);
		        }
		        break;
		      }
		      ++c;
		    }
		    this.length -= c;
		    return ret;
		  }

		  // Make sure the linked list only shows the minimal necessary information.
		  [custom](_, options) {
		    return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
		      // Only inspect one level.
		      depth: 0,
		      // It should not recurse.
		      customInspect: false
		    }));
		  }
		};
		return buffer_list;
	}

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  const readableDestroyed = this._readableState && this._readableState.destroyed;
	  const writableDestroyed = this._writableState && this._writableState.destroyed;
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorNT, this, err);
	      }
	    }
	    return this;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	  this._destroy(err || null, err => {
	    if (!cb && err) {
	      if (!this._writableState) {
	        process.nextTick(emitErrorAndCloseNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process.nextTick(emitErrorAndCloseNT, this, err);
	      } else {
	        process.nextTick(emitCloseNT, this);
	      }
	    } else if (cb) {
	      process.nextTick(emitCloseNT, this);
	      cb(err);
	    } else {
	      process.nextTick(emitCloseNT, this);
	    }
	  });
	  return this;
	}
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.

	  const rState = stream._readableState;
	  const wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	var destroy_1 = {
	  destroy,
	  undestroy,
	  errorOrDestroy
	};

	var errorsBrowser = {};

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var codes = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }

	  var NodeError =
	  /*#__PURE__*/
	  function (_Base) {
	    _inheritsLoose(NodeError, _Base);

	    function NodeError(arg1, arg2, arg3) {
	      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
	    }

	    return NodeError;
	  }(Base);

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes[code] = NodeError;
	} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });

	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }

	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"';
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  var determiner;

	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  var msg;

	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }

	  msg += ". Received type ".concat(typeof actual);
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented';
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg;
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	errorsBrowser.codes = codes;

	const ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      const name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }
	    return Math.floor(hwm);
	  }

	  // Default value
	  return state.objectMode ? 16 : 16 * 1024;
	}
	var state = {
	  getHighWaterMark
	};

	/**
	 * Module exports.
	 */

	var browser = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!commonjsGlobal.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = commonjsGlobal.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	var _stream_writable;
	var hasRequired_stream_writable;

	function require_stream_writable () {
		if (hasRequired_stream_writable) return _stream_writable;
		hasRequired_stream_writable = 1;

		_stream_writable = Writable;

		// It seems a linked list but it is not
		// there will be only 2 of these for each stream
		function CorkedRequest(state) {
		  this.next = null;
		  this.entry = null;
		  this.finish = () => {
		    onCorkedFinish(this, state);
		  };
		}
		/* </replacement> */

		/*<replacement>*/
		var Duplex;
		/*</replacement>*/

		Writable.WritableState = WritableState;

		/*<replacement>*/
		const internalUtil = {
		  deprecate: browser
		};
		/*</replacement>*/

		/*<replacement>*/
		var Stream = streamBrowser;
		/*</replacement>*/

		const Buffer = require$$0$3.Buffer;
		const OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}
		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}
		const destroyImpl = destroy_1;
		const _require = state,
		  getHighWaterMark = _require.getHighWaterMark;
		const _require$codes = errorsBrowser.codes,
		  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
		  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
		  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
		  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
		  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
		  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
		const errorOrDestroy = destroyImpl.errorOrDestroy;
		require$$0$1(Writable, Stream);
		function nop() {}
		function WritableState(options, stream, isDuplex) {
		  Duplex = Duplex || require_stream_duplex();
		  options = options || {};

		  // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream,
		  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
		  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

		  // object stream flag to indicate whether or not this stream
		  // contains buffers or objects.
		  this.objectMode = !!options.objectMode;
		  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

		  // the point at which write() starts returning false
		  // Note: 0 is a valid value, means that we always return false if
		  // the entire buffer is not flushed immediately on write()
		  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

		  // if _final has been called
		  this.finalCalled = false;

		  // drain event flag.
		  this.needDrain = false;
		  // at the start of calling end()
		  this.ending = false;
		  // when end() has been called, and returned
		  this.ended = false;
		  // when 'finish' is emitted
		  this.finished = false;

		  // has it been destroyed
		  this.destroyed = false;

		  // should we decode strings into buffers before passing to _write?
		  // this is here so that some node-core streams can optimize string
		  // handling at a lower level.
		  var noDecode = options.decodeStrings === false;
		  this.decodeStrings = !noDecode;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // not an actual buffer we keep track of, but a measurement
		  // of how much we're waiting to get pushed to some underlying
		  // socket or file.
		  this.length = 0;

		  // a flag to see when we're in the middle of a write.
		  this.writing = false;

		  // when true all writes will be buffered until .uncork() call
		  this.corked = 0;

		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;

		  // a flag to know if we're processing previously buffered items, which
		  // may call the _write() callback in the same tick, so that we don't
		  // end up in an overlapped onwrite situation.
		  this.bufferProcessing = false;

		  // the callback that's passed to _write(chunk,cb)
		  this.onwrite = function (er) {
		    onwrite(stream, er);
		  };

		  // the callback that the user supplies to write(chunk,encoding,cb)
		  this.writecb = null;

		  // the amount that is being written when _write is called.
		  this.writelen = 0;
		  this.bufferedRequest = null;
		  this.lastBufferedRequest = null;

		  // number of pending user-supplied write callbacks
		  // this must be 0 before 'finish' can be emitted
		  this.pendingcb = 0;

		  // emit prefinish if the only thing we're waiting for is _write cbs
		  // This is relevant for synchronous Transform streams
		  this.prefinished = false;

		  // True if the error was already emitted and should not be thrown again
		  this.errorEmitted = false;

		  // Should close be emitted on destroy. Defaults to true.
		  this.emitClose = options.emitClose !== false;

		  // Should .destroy() be called after 'finish' (and potentially 'end')
		  this.autoDestroy = !!options.autoDestroy;

		  // count buffered requests
		  this.bufferedRequestCount = 0;

		  // allocate the first CorkedRequest, there is always
		  // one allocated and free to use, and we maintain at most two
		  this.corkedRequestsFree = new CorkedRequest(this);
		}
		WritableState.prototype.getBuffer = function getBuffer() {
		  var current = this.bufferedRequest;
		  var out = [];
		  while (current) {
		    out.push(current);
		    current = current.next;
		  }
		  return out;
		};
		(function () {
		  try {
		    Object.defineProperty(WritableState.prototype, 'buffer', {
		      get: internalUtil.deprecate(function writableStateBufferGetter() {
		        return this.getBuffer();
		      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
		    });
		  } catch (_) {}
		})();

		// Test _writableState for inheritance to account for Duplex streams,
		// whose prototype chain only points to Readable.
		var realHasInstance;
		if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
		  realHasInstance = Function.prototype[Symbol.hasInstance];
		  Object.defineProperty(Writable, Symbol.hasInstance, {
		    value: function value(object) {
		      if (realHasInstance.call(this, object)) return true;
		      if (this !== Writable) return false;
		      return object && object._writableState instanceof WritableState;
		    }
		  });
		} else {
		  realHasInstance = function realHasInstance(object) {
		    return object instanceof this;
		  };
		}
		function Writable(options) {
		  Duplex = Duplex || require_stream_duplex();

		  // Writable ctor is applied to Duplexes, too.
		  // `realHasInstance` is necessary because using plain `instanceof`
		  // would return false, as no `_writableState` property is attached.

		  // Trying to use the custom `instanceof` for Writable here will also break the
		  // Node.js LazyTransform implementation, which has a non-trivial getter for
		  // `_writableState` that would lead to infinite recursion.

		  // Checking for a Stream.Duplex instance is faster here instead of inside
		  // the WritableState constructor, at least with V8 6.5
		  const isDuplex = this instanceof Duplex;
		  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
		  this._writableState = new WritableState(options, this, isDuplex);

		  // legacy.
		  this.writable = true;
		  if (options) {
		    if (typeof options.write === 'function') this._write = options.write;
		    if (typeof options.writev === 'function') this._writev = options.writev;
		    if (typeof options.destroy === 'function') this._destroy = options.destroy;
		    if (typeof options.final === 'function') this._final = options.final;
		  }
		  Stream.call(this);
		}

		// Otherwise people can pipe Writable streams, which is just wrong.
		Writable.prototype.pipe = function () {
		  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
		};
		function writeAfterEnd(stream, cb) {
		  var er = new ERR_STREAM_WRITE_AFTER_END();
		  // TODO: defer error events consistently everywhere, not just the cb
		  errorOrDestroy(stream, er);
		  process.nextTick(cb, er);
		}

		// Checks that a user-supplied chunk is valid, especially for the particular
		// mode the stream is in. Currently this means that `null` is never accepted
		// and undefined/non-string values are only allowed in object mode.
		function validChunk(stream, state, chunk, cb) {
		  var er;
		  if (chunk === null) {
		    er = new ERR_STREAM_NULL_VALUES();
		  } else if (typeof chunk !== 'string' && !state.objectMode) {
		    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
		  }
		  if (er) {
		    errorOrDestroy(stream, er);
		    process.nextTick(cb, er);
		    return false;
		  }
		  return true;
		}
		Writable.prototype.write = function (chunk, encoding, cb) {
		  var state = this._writableState;
		  var ret = false;
		  var isBuf = !state.objectMode && _isUint8Array(chunk);
		  if (isBuf && !Buffer.isBuffer(chunk)) {
		    chunk = _uint8ArrayToBuffer(chunk);
		  }
		  if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }
		  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
		  if (typeof cb !== 'function') cb = nop;
		  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
		    state.pendingcb++;
		    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
		  }
		  return ret;
		};
		Writable.prototype.cork = function () {
		  this._writableState.corked++;
		};
		Writable.prototype.uncork = function () {
		  var state = this._writableState;
		  if (state.corked) {
		    state.corked--;
		    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
		  }
		};
		Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		  // node::ParseEncoding() requires lower case.
		  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
		  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
		  this._writableState.defaultEncoding = encoding;
		  return this;
		};
		Object.defineProperty(Writable.prototype, 'writableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState && this._writableState.getBuffer();
		  }
		});
		function decodeChunk(state, chunk, encoding) {
		  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		    chunk = Buffer.from(chunk, encoding);
		  }
		  return chunk;
		}
		Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState.highWaterMark;
		  }
		});

		// if we're already writing something, then just put this
		// in the queue, and wait our turn.  Otherwise, call _write
		// If we return false, then we need a drain event, so set that flag.
		function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
		  if (!isBuf) {
		    var newChunk = decodeChunk(state, chunk, encoding);
		    if (chunk !== newChunk) {
		      isBuf = true;
		      encoding = 'buffer';
		      chunk = newChunk;
		    }
		  }
		  var len = state.objectMode ? 1 : chunk.length;
		  state.length += len;
		  var ret = state.length < state.highWaterMark;
		  // we must ensure that previous needDrain will not be reset to false.
		  if (!ret) state.needDrain = true;
		  if (state.writing || state.corked) {
		    var last = state.lastBufferedRequest;
		    state.lastBufferedRequest = {
		      chunk,
		      encoding,
		      isBuf,
		      callback: cb,
		      next: null
		    };
		    if (last) {
		      last.next = state.lastBufferedRequest;
		    } else {
		      state.bufferedRequest = state.lastBufferedRequest;
		    }
		    state.bufferedRequestCount += 1;
		  } else {
		    doWrite(stream, state, false, len, chunk, encoding, cb);
		  }
		  return ret;
		}
		function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		  state.writelen = len;
		  state.writecb = cb;
		  state.writing = true;
		  state.sync = true;
		  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
		  state.sync = false;
		}
		function onwriteError(stream, state, sync, er, cb) {
		  --state.pendingcb;
		  if (sync) {
		    // defer the callback if we are being called synchronously
		    // to avoid piling up things on the stack
		    process.nextTick(cb, er);
		    // this can emit finish, and it will always happen
		    // after error
		    process.nextTick(finishMaybe, stream, state);
		    stream._writableState.errorEmitted = true;
		    errorOrDestroy(stream, er);
		  } else {
		    // the caller expect this to happen before if
		    // it is async
		    cb(er);
		    stream._writableState.errorEmitted = true;
		    errorOrDestroy(stream, er);
		    // this can emit finish, but finish must
		    // always follow error
		    finishMaybe(stream, state);
		  }
		}
		function onwriteStateUpdate(state) {
		  state.writing = false;
		  state.writecb = null;
		  state.length -= state.writelen;
		  state.writelen = 0;
		}
		function onwrite(stream, er) {
		  var state = stream._writableState;
		  var sync = state.sync;
		  var cb = state.writecb;
		  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
		  onwriteStateUpdate(state);
		  if (er) onwriteError(stream, state, sync, er, cb);else {
		    // Check if we're actually ready to finish, but don't emit yet
		    var finished = needFinish(state) || stream.destroyed;
		    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		      clearBuffer(stream, state);
		    }
		    if (sync) {
		      process.nextTick(afterWrite, stream, state, finished, cb);
		    } else {
		      afterWrite(stream, state, finished, cb);
		    }
		  }
		}
		function afterWrite(stream, state, finished, cb) {
		  if (!finished) onwriteDrain(stream, state);
		  state.pendingcb--;
		  cb();
		  finishMaybe(stream, state);
		}

		// Must force callback to be called on nextTick, so that we don't
		// emit 'drain' before the write() consumer gets the 'false' return
		// value, and has a chance to attach a 'drain' listener.
		function onwriteDrain(stream, state) {
		  if (state.length === 0 && state.needDrain) {
		    state.needDrain = false;
		    stream.emit('drain');
		  }
		}

		// if there's something in the buffer waiting, then process it
		function clearBuffer(stream, state) {
		  state.bufferProcessing = true;
		  var entry = state.bufferedRequest;
		  if (stream._writev && entry && entry.next) {
		    // Fast case, write everything using _writev()
		    var l = state.bufferedRequestCount;
		    var buffer = new Array(l);
		    var holder = state.corkedRequestsFree;
		    holder.entry = entry;
		    var count = 0;
		    var allBuffers = true;
		    while (entry) {
		      buffer[count] = entry;
		      if (!entry.isBuf) allBuffers = false;
		      entry = entry.next;
		      count += 1;
		    }
		    buffer.allBuffers = allBuffers;
		    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

		    // doWrite is almost always async, defer these to save a bit of time
		    // as the hot path ends with doWrite
		    state.pendingcb++;
		    state.lastBufferedRequest = null;
		    if (holder.next) {
		      state.corkedRequestsFree = holder.next;
		      holder.next = null;
		    } else {
		      state.corkedRequestsFree = new CorkedRequest(state);
		    }
		    state.bufferedRequestCount = 0;
		  } else {
		    // Slow case, write chunks one-by-one
		    while (entry) {
		      var chunk = entry.chunk;
		      var encoding = entry.encoding;
		      var cb = entry.callback;
		      var len = state.objectMode ? 1 : chunk.length;
		      doWrite(stream, state, false, len, chunk, encoding, cb);
		      entry = entry.next;
		      state.bufferedRequestCount--;
		      // if we didn't call the onwrite immediately, then
		      // it means that we need to wait until it does.
		      // also, that means that the chunk and cb are currently
		      // being processed, so move the buffer counter past them.
		      if (state.writing) {
		        break;
		      }
		    }
		    if (entry === null) state.lastBufferedRequest = null;
		  }
		  state.bufferedRequest = entry;
		  state.bufferProcessing = false;
		}
		Writable.prototype._write = function (chunk, encoding, cb) {
		  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
		};
		Writable.prototype._writev = null;
		Writable.prototype.end = function (chunk, encoding, cb) {
		  var state = this._writableState;
		  if (typeof chunk === 'function') {
		    cb = chunk;
		    chunk = null;
		    encoding = null;
		  } else if (typeof encoding === 'function') {
		    cb = encoding;
		    encoding = null;
		  }
		  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

		  // .end() fully uncorks
		  if (state.corked) {
		    state.corked = 1;
		    this.uncork();
		  }

		  // ignore unnecessary end() calls.
		  if (!state.ending) endWritable(this, state, cb);
		  return this;
		};
		Object.defineProperty(Writable.prototype, 'writableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    return this._writableState.length;
		  }
		});
		function needFinish(state) {
		  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
		}
		function callFinal(stream, state) {
		  stream._final(err => {
		    state.pendingcb--;
		    if (err) {
		      errorOrDestroy(stream, err);
		    }
		    state.prefinished = true;
		    stream.emit('prefinish');
		    finishMaybe(stream, state);
		  });
		}
		function prefinish(stream, state) {
		  if (!state.prefinished && !state.finalCalled) {
		    if (typeof stream._final === 'function' && !state.destroyed) {
		      state.pendingcb++;
		      state.finalCalled = true;
		      process.nextTick(callFinal, stream, state);
		    } else {
		      state.prefinished = true;
		      stream.emit('prefinish');
		    }
		  }
		}
		function finishMaybe(stream, state) {
		  var need = needFinish(state);
		  if (need) {
		    prefinish(stream, state);
		    if (state.pendingcb === 0) {
		      state.finished = true;
		      stream.emit('finish');
		      if (state.autoDestroy) {
		        // In case of duplex streams we need a way to detect
		        // if the readable side is ready for autoDestroy as well
		        const rState = stream._readableState;
		        if (!rState || rState.autoDestroy && rState.endEmitted) {
		          stream.destroy();
		        }
		      }
		    }
		  }
		  return need;
		}
		function endWritable(stream, state, cb) {
		  state.ending = true;
		  finishMaybe(stream, state);
		  if (cb) {
		    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
		  }
		  state.ended = true;
		  stream.writable = false;
		}
		function onCorkedFinish(corkReq, state, err) {
		  var entry = corkReq.entry;
		  corkReq.entry = null;
		  while (entry) {
		    var cb = entry.callback;
		    state.pendingcb--;
		    cb(err);
		    entry = entry.next;
		  }

		  // reuse the free corkReq.
		  state.corkedRequestsFree.next = corkReq;
		}
		Object.defineProperty(Writable.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    if (this._writableState === undefined) {
		      return false;
		    }
		    return this._writableState.destroyed;
		  },
		  set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._writableState) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._writableState.destroyed = value;
		  }
		});
		Writable.prototype.destroy = destroyImpl.destroy;
		Writable.prototype._undestroy = destroyImpl.undestroy;
		Writable.prototype._destroy = function (err, cb) {
		  cb(err);
		};
		return _stream_writable;
	}

	var _stream_duplex;
	var hasRequired_stream_duplex;

	function require_stream_duplex () {
		if (hasRequired_stream_duplex) return _stream_duplex;
		hasRequired_stream_duplex = 1;

		/*<replacement>*/
		var objectKeys = Object.keys || function (obj) {
		  var keys = [];
		  for (var key in obj) keys.push(key);
		  return keys;
		};
		/*</replacement>*/

		_stream_duplex = Duplex;
		const Readable = require_stream_readable();
		const Writable = require_stream_writable();
		require$$0$1(Duplex, Readable);
		{
		  // Allow the keys array to be GC'ed.
		  const keys = objectKeys(Writable.prototype);
		  for (var v = 0; v < keys.length; v++) {
		    const method = keys[v];
		    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
		  }
		}
		function Duplex(options) {
		  if (!(this instanceof Duplex)) return new Duplex(options);
		  Readable.call(this, options);
		  Writable.call(this, options);
		  this.allowHalfOpen = true;
		  if (options) {
		    if (options.readable === false) this.readable = false;
		    if (options.writable === false) this.writable = false;
		    if (options.allowHalfOpen === false) {
		      this.allowHalfOpen = false;
		      this.once('end', onend);
		    }
		  }
		}
		Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    return this._writableState.highWaterMark;
		  }
		});
		Object.defineProperty(Duplex.prototype, 'writableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._writableState && this._writableState.getBuffer();
		  }
		});
		Object.defineProperty(Duplex.prototype, 'writableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    return this._writableState.length;
		  }
		});

		// the no-half-open enforcer
		function onend() {
		  // If the writable side ended, then we're ok.
		  if (this._writableState.ended) return;

		  // no more data can be written.
		  // But allow more writes to happen in this tick.
		  process.nextTick(onEndNT, this);
		}
		function onEndNT(self) {
		  self.end();
		}
		Object.defineProperty(Duplex.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return false;
		    }
		    return this._readableState.destroyed && this._writableState.destroyed;
		  },
		  set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (this._readableState === undefined || this._writableState === undefined) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._readableState.destroyed = value;
		    this._writableState.destroyed = value;
		  }
		});
		return _stream_duplex;
	}

	// Copyright Joyent, Inc. and other Node contributors.
	var isBufferEncoding = Buffer$c.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	function StringDecoder(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer$c(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	}

	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	var _polyfillNode_string_decoder = /*#__PURE__*/Object.freeze({
		__proto__: null,
		StringDecoder: StringDecoder
	});

	var require$$10 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_string_decoder);

	const ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
	function once$1(callback) {
	  let called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    callback.apply(this, args);
	  };
	}
	function noop$1() {}
	function isRequest$1(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function eos$1(stream, opts, callback) {
	  if (typeof opts === 'function') return eos$1(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once$1(callback || noop$1);
	  let readable = opts.readable || opts.readable !== false && stream.readable;
	  let writable = opts.writable || opts.writable !== false && stream.writable;
	  const onlegacyfinish = () => {
	    if (!stream.writable) onfinish();
	  };
	  var writableEnded = stream._writableState && stream._writableState.finished;
	  const onfinish = () => {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };
	  var readableEnded = stream._readableState && stream._readableState.endEmitted;
	  const onend = () => {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };
	  const onerror = err => {
	    callback.call(stream, err);
	  };
	  const onclose = () => {
	    let err;
	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };
	  const onrequest = () => {
	    stream.req.on('finish', onfinish);
	  };
	  if (isRequest$1(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }
	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}
	var endOfStream = eos$1;

	var async_iterator;
	var hasRequiredAsync_iterator;

	function requireAsync_iterator () {
		if (hasRequiredAsync_iterator) return async_iterator;
		hasRequiredAsync_iterator = 1;

		const finished = endOfStream;
		const kLastResolve = Symbol('lastResolve');
		const kLastReject = Symbol('lastReject');
		const kError = Symbol('error');
		const kEnded = Symbol('ended');
		const kLastPromise = Symbol('lastPromise');
		const kHandlePromise = Symbol('handlePromise');
		const kStream = Symbol('stream');
		function createIterResult(value, done) {
		  return {
		    value,
		    done
		  };
		}
		function readAndResolve(iter) {
		  const resolve = iter[kLastResolve];
		  if (resolve !== null) {
		    const data = iter[kStream].read();
		    // we defer if data is null
		    // we can be expecting either 'end' or
		    // 'error'
		    if (data !== null) {
		      iter[kLastPromise] = null;
		      iter[kLastResolve] = null;
		      iter[kLastReject] = null;
		      resolve(createIterResult(data, false));
		    }
		  }
		}
		function onReadable(iter) {
		  // we wait for the next tick, because it might
		  // emit an error with process.nextTick
		  process.nextTick(readAndResolve, iter);
		}
		function wrapForNext(lastPromise, iter) {
		  return (resolve, reject) => {
		    lastPromise.then(() => {
		      if (iter[kEnded]) {
		        resolve(createIterResult(undefined, true));
		        return;
		      }
		      iter[kHandlePromise](resolve, reject);
		    }, reject);
		  };
		}
		const AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
		const ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf({
		  get stream() {
		    return this[kStream];
		  },
		  next() {
		    // if we have detected an error in the meanwhile
		    // reject straight away
		    const error = this[kError];
		    if (error !== null) {
		      return Promise.reject(error);
		    }
		    if (this[kEnded]) {
		      return Promise.resolve(createIterResult(undefined, true));
		    }
		    if (this[kStream].destroyed) {
		      // We need to defer via nextTick because if .destroy(err) is
		      // called, the error will be emitted via nextTick, and
		      // we cannot guarantee that there is no error lingering around
		      // waiting to be emitted.
		      return new Promise((resolve, reject) => {
		        process.nextTick(() => {
		          if (this[kError]) {
		            reject(this[kError]);
		          } else {
		            resolve(createIterResult(undefined, true));
		          }
		        });
		      });
		    }

		    // if we have multiple next() calls
		    // we will wait for the previous Promise to finish
		    // this logic is optimized to support for await loops,
		    // where next() is only called once at a time
		    const lastPromise = this[kLastPromise];
		    let promise;
		    if (lastPromise) {
		      promise = new Promise(wrapForNext(lastPromise, this));
		    } else {
		      // fast path needed to support multiple this.push()
		      // without triggering the next() queue
		      const data = this[kStream].read();
		      if (data !== null) {
		        return Promise.resolve(createIterResult(data, false));
		      }
		      promise = new Promise(this[kHandlePromise]);
		    }
		    this[kLastPromise] = promise;
		    return promise;
		  },
		  [Symbol.asyncIterator]() {
		    return this;
		  },
		  return() {
		    // destroy(err, cb) is a private API
		    // we can guarantee we have that here, because we control the
		    // Readable class this is attached to
		    return new Promise((resolve, reject) => {
		      this[kStream].destroy(null, err => {
		        if (err) {
		          reject(err);
		          return;
		        }
		        resolve(createIterResult(undefined, true));
		      });
		    });
		  }
		}, AsyncIteratorPrototype);
		const createReadableStreamAsyncIterator = stream => {
		  const iterator = Object.create(ReadableStreamAsyncIteratorPrototype, {
		    [kStream]: {
		      value: stream,
		      writable: true
		    },
		    [kLastResolve]: {
		      value: null,
		      writable: true
		    },
		    [kLastReject]: {
		      value: null,
		      writable: true
		    },
		    [kError]: {
		      value: null,
		      writable: true
		    },
		    [kEnded]: {
		      value: stream._readableState.endEmitted,
		      writable: true
		    },
		    // the function passed to new Promise
		    // is cached so we avoid allocating a new
		    // closure at every run
		    [kHandlePromise]: {
		      value: (resolve, reject) => {
		        const data = iterator[kStream].read();
		        if (data) {
		          iterator[kLastPromise] = null;
		          iterator[kLastResolve] = null;
		          iterator[kLastReject] = null;
		          resolve(createIterResult(data, false));
		        } else {
		          iterator[kLastResolve] = resolve;
		          iterator[kLastReject] = reject;
		        }
		      },
		      writable: true
		    }
		  });
		  iterator[kLastPromise] = null;
		  finished(stream, err => {
		    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
		      const reject = iterator[kLastReject];
		      // reject if we are waiting for data in the Promise
		      // returned by next() and store the error
		      if (reject !== null) {
		        iterator[kLastPromise] = null;
		        iterator[kLastResolve] = null;
		        iterator[kLastReject] = null;
		        reject(err);
		      }
		      iterator[kError] = err;
		      return;
		    }
		    const resolve = iterator[kLastResolve];
		    if (resolve !== null) {
		      iterator[kLastPromise] = null;
		      iterator[kLastResolve] = null;
		      iterator[kLastReject] = null;
		      resolve(createIterResult(undefined, true));
		    }
		    iterator[kEnded] = true;
		  });
		  stream.on('readable', onReadable.bind(null, iterator));
		  return iterator;
		};
		async_iterator = createReadableStreamAsyncIterator;
		return async_iterator;
	}

	var fromBrowser;
	var hasRequiredFromBrowser;

	function requireFromBrowser () {
		if (hasRequiredFromBrowser) return fromBrowser;
		hasRequiredFromBrowser = 1;
		fromBrowser = function () {
		  throw new Error('Readable.from is not available in the browser')
		};
		return fromBrowser;
	}

	var _stream_readable;
	var hasRequired_stream_readable;

	function require_stream_readable () {
		if (hasRequired_stream_readable) return _stream_readable;
		hasRequired_stream_readable = 1;

		_stream_readable = Readable;

		/*<replacement>*/
		var Duplex;
		/*</replacement>*/

		Readable.ReadableState = ReadableState;

		/*<replacement>*/
		require$$0.EventEmitter;
		var EElistenerCount = function EElistenerCount(emitter, type) {
		  return emitter.listeners(type).length;
		};
		/*</replacement>*/

		/*<replacement>*/
		var Stream = streamBrowser;
		/*</replacement>*/

		const Buffer = require$$0$3.Buffer;
		const OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
		function _uint8ArrayToBuffer(chunk) {
		  return Buffer.from(chunk);
		}
		function _isUint8Array(obj) {
		  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
		}

		/*<replacement>*/
		const debugUtil = require$$3;
		let debug;
		if (debugUtil && debugUtil.debuglog) {
		  debug = debugUtil.debuglog('stream');
		} else {
		  debug = function debug() {};
		}
		/*</replacement>*/

		const BufferList = requireBuffer_list();
		const destroyImpl = destroy_1;
		const _require = state,
		  getHighWaterMark = _require.getHighWaterMark;
		const _require$codes = errorsBrowser.codes,
		  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
		  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

		// Lazy loaded to improve the startup performance.
		let StringDecoder;
		let createReadableStreamAsyncIterator;
		let from;
		require$$0$1(Readable, Stream);
		const errorOrDestroy = destroyImpl.errorOrDestroy;
		const kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
		function prependListener(emitter, event, fn) {
		  // Sadly this is not cacheable as some libraries bundle their own
		  // event emitter implementation with them.
		  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

		  // This is a hack to make sure that our error handler is attached before any
		  // userland ones.  NEVER DO THIS. This is here only because this code needs
		  // to continue to work with older versions of Node.js that do not include
		  // the prependListener() method. The goal is to eventually remove this hack.
		  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
		}
		function ReadableState(options, stream, isDuplex) {
		  Duplex = Duplex || require_stream_duplex();
		  options = options || {};

		  // Duplex streams are both readable and writable, but share
		  // the same options object.
		  // However, some cases require setting options to different
		  // values for the readable and the writable sides of the duplex stream.
		  // These options can be provided separately as readableXXX and writableXXX.
		  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

		  // object stream flag. Used to make read(n) ignore n and to
		  // make all the buffer merging and length checks go away
		  this.objectMode = !!options.objectMode;
		  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

		  // the point at which it stops calling _read() to fill the buffer
		  // Note: 0 is a valid value, means "don't call _read preemptively ever"
		  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

		  // A linked list is used to store data chunks instead of an array because the
		  // linked list can remove elements from the beginning faster than
		  // array.shift()
		  this.buffer = new BufferList();
		  this.length = 0;
		  this.pipes = null;
		  this.pipesCount = 0;
		  this.flowing = null;
		  this.ended = false;
		  this.endEmitted = false;
		  this.reading = false;

		  // a flag to be able to tell if the event 'readable'/'data' is emitted
		  // immediately, or on a later tick.  We set this to true at first, because
		  // any actions that shouldn't happen until "later" should generally also
		  // not happen before the first read call.
		  this.sync = true;

		  // whenever we return null, then we set a flag to say
		  // that we're awaiting a 'readable' event emission.
		  this.needReadable = false;
		  this.emittedReadable = false;
		  this.readableListening = false;
		  this.resumeScheduled = false;
		  this.paused = true;

		  // Should close be emitted on destroy. Defaults to true.
		  this.emitClose = options.emitClose !== false;

		  // Should .destroy() be called after 'end' (and potentially 'finish')
		  this.autoDestroy = !!options.autoDestroy;

		  // has it been destroyed
		  this.destroyed = false;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // the number of writers that are awaiting a drain event in .pipe()s
		  this.awaitDrain = 0;

		  // if true, a maybeReadMore has been scheduled
		  this.readingMore = false;
		  this.decoder = null;
		  this.encoding = null;
		  if (options.encoding) {
		    if (!StringDecoder) StringDecoder = require$$10.StringDecoder;
		    this.decoder = new StringDecoder(options.encoding);
		    this.encoding = options.encoding;
		  }
		}
		function Readable(options) {
		  Duplex = Duplex || require_stream_duplex();
		  if (!(this instanceof Readable)) return new Readable(options);

		  // Checking for a Stream.Duplex instance is faster here instead of inside
		  // the ReadableState constructor, at least with V8 6.5
		  const isDuplex = this instanceof Duplex;
		  this._readableState = new ReadableState(options, this, isDuplex);

		  // legacy
		  this.readable = true;
		  if (options) {
		    if (typeof options.read === 'function') this._read = options.read;
		    if (typeof options.destroy === 'function') this._destroy = options.destroy;
		  }
		  Stream.call(this);
		}
		Object.defineProperty(Readable.prototype, 'destroyed', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    if (this._readableState === undefined) {
		      return false;
		    }
		    return this._readableState.destroyed;
		  },
		  set(value) {
		    // we ignore the value if the stream
		    // has not been initialized yet
		    if (!this._readableState) {
		      return;
		    }

		    // backward compatibility, the user is explicitly
		    // managing destroyed
		    this._readableState.destroyed = value;
		  }
		});
		Readable.prototype.destroy = destroyImpl.destroy;
		Readable.prototype._undestroy = destroyImpl.undestroy;
		Readable.prototype._destroy = function (err, cb) {
		  cb(err);
		};

		// Manually shove something into the read() buffer.
		// This returns true if the highWaterMark has not been hit yet,
		// similar to how Writable.write() returns true if you should
		// write() some more.
		Readable.prototype.push = function (chunk, encoding) {
		  var state = this._readableState;
		  var skipChunkCheck;
		  if (!state.objectMode) {
		    if (typeof chunk === 'string') {
		      encoding = encoding || state.defaultEncoding;
		      if (encoding !== state.encoding) {
		        chunk = Buffer.from(chunk, encoding);
		        encoding = '';
		      }
		      skipChunkCheck = true;
		    }
		  } else {
		    skipChunkCheck = true;
		  }
		  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
		};

		// Unshift should *always* be something directly out of read()
		Readable.prototype.unshift = function (chunk) {
		  return readableAddChunk(this, chunk, null, true, false);
		};
		function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
		  debug('readableAddChunk', chunk);
		  var state = stream._readableState;
		  if (chunk === null) {
		    state.reading = false;
		    onEofChunk(stream, state);
		  } else {
		    var er;
		    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
		    if (er) {
		      errorOrDestroy(stream, er);
		    } else if (state.objectMode || chunk && chunk.length > 0) {
		      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
		        chunk = _uint8ArrayToBuffer(chunk);
		      }
		      if (addToFront) {
		        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
		      } else if (state.ended) {
		        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
		      } else if (state.destroyed) {
		        return false;
		      } else {
		        state.reading = false;
		        if (state.decoder && !encoding) {
		          chunk = state.decoder.write(chunk);
		          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
		        } else {
		          addChunk(stream, state, chunk, false);
		        }
		      }
		    } else if (!addToFront) {
		      state.reading = false;
		      maybeReadMore(stream, state);
		    }
		  }

		  // We can push more data if we are below the highWaterMark.
		  // Also, if we have no data yet, we can stand some more bytes.
		  // This is to work around cases where hwm=0, such as the repl.
		  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
		}
		function addChunk(stream, state, chunk, addToFront) {
		  if (state.flowing && state.length === 0 && !state.sync) {
		    state.awaitDrain = 0;
		    stream.emit('data', chunk);
		  } else {
		    // update the buffer info.
		    state.length += state.objectMode ? 1 : chunk.length;
		    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
		    if (state.needReadable) emitReadable(stream);
		  }
		  maybeReadMore(stream, state);
		}
		function chunkInvalid(state, chunk) {
		  var er;
		  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
		  }
		  return er;
		}
		Readable.prototype.isPaused = function () {
		  return this._readableState.flowing === false;
		};

		// backwards compatibility.
		Readable.prototype.setEncoding = function (enc) {
		  if (!StringDecoder) StringDecoder = require$$10.StringDecoder;
		  const decoder = new StringDecoder(enc);
		  this._readableState.decoder = decoder;
		  // If setEncoding(null), decoder.encoding equals utf8
		  this._readableState.encoding = this._readableState.decoder.encoding;

		  // Iterate over current buffer to convert already stored Buffers:
		  let p = this._readableState.buffer.head;
		  let content = '';
		  while (p !== null) {
		    content += decoder.write(p.data);
		    p = p.next;
		  }
		  this._readableState.buffer.clear();
		  if (content !== '') this._readableState.buffer.push(content);
		  this._readableState.length = content.length;
		  return this;
		};

		// Don't raise the hwm > 1GB
		const MAX_HWM = 0x40000000;
		function computeNewHighWaterMark(n) {
		  if (n >= MAX_HWM) {
		    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
		    n = MAX_HWM;
		  } else {
		    // Get the next highest power of 2 to prevent increasing hwm excessively in
		    // tiny amounts
		    n--;
		    n |= n >>> 1;
		    n |= n >>> 2;
		    n |= n >>> 4;
		    n |= n >>> 8;
		    n |= n >>> 16;
		    n++;
		  }
		  return n;
		}

		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function howMuchToRead(n, state) {
		  if (n <= 0 || state.length === 0 && state.ended) return 0;
		  if (state.objectMode) return 1;
		  if (n !== n) {
		    // Only flow one buffer at a time
		    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
		  }
		  // If we're asking for more than the current hwm, then raise the hwm.
		  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
		  if (n <= state.length) return n;
		  // Don't have enough
		  if (!state.ended) {
		    state.needReadable = true;
		    return 0;
		  }
		  return state.length;
		}

		// you can override either this method, or the async _read(n) below.
		Readable.prototype.read = function (n) {
		  debug('read', n);
		  n = parseInt(n, 10);
		  var state = this._readableState;
		  var nOrig = n;
		  if (n !== 0) state.emittedReadable = false;

		  // if we're doing read(0) to trigger a readable event, but we
		  // already have a bunch of data in the buffer, then just trigger
		  // the 'readable' event and move on.
		  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
		    debug('read: emitReadable', state.length, state.ended);
		    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		    return null;
		  }
		  n = howMuchToRead(n, state);

		  // if we've ended, and we're now clear, then finish it up.
		  if (n === 0 && state.ended) {
		    if (state.length === 0) endReadable(this);
		    return null;
		  }

		  // All the actual chunk generation logic needs to be
		  // *below* the call to _read.  The reason is that in certain
		  // synthetic stream cases, such as passthrough streams, _read
		  // may be a completely synchronous operation which may change
		  // the state of the read buffer, providing enough data when
		  // before there was *not* enough.
		  //
		  // So, the steps are:
		  // 1. Figure out what the state of things will be after we do
		  // a read from the buffer.
		  //
		  // 2. If that resulting state will trigger a _read, then call _read.
		  // Note that this may be asynchronous, or synchronous.  Yes, it is
		  // deeply ugly to write APIs this way, but that still doesn't mean
		  // that the Readable class should behave improperly, as streams are
		  // designed to be sync/async agnostic.
		  // Take note if the _read call is sync or async (ie, if the read call
		  // has returned yet), so that we know whether or not it's safe to emit
		  // 'readable' etc.
		  //
		  // 3. Actually pull the requested chunks out of the buffer and return.

		  // if we need a readable event, then we need to do some reading.
		  var doRead = state.needReadable;
		  debug('need readable', doRead);

		  // if we currently have less than the highWaterMark, then also read some
		  if (state.length === 0 || state.length - n < state.highWaterMark) {
		    doRead = true;
		    debug('length less than watermark', doRead);
		  }

		  // however, if we've ended, then there's no point, and if we're already
		  // reading, then it's unnecessary.
		  if (state.ended || state.reading) {
		    doRead = false;
		    debug('reading or ended', doRead);
		  } else if (doRead) {
		    debug('do read');
		    state.reading = true;
		    state.sync = true;
		    // if the length is currently zero, then we *need* a readable event.
		    if (state.length === 0) state.needReadable = true;
		    // call internal read method
		    this._read(state.highWaterMark);
		    state.sync = false;
		    // If _read pushed data synchronously, then `reading` will be false,
		    // and we need to re-evaluate how much data we can return to the user.
		    if (!state.reading) n = howMuchToRead(nOrig, state);
		  }
		  var ret;
		  if (n > 0) ret = fromList(n, state);else ret = null;
		  if (ret === null) {
		    state.needReadable = state.length <= state.highWaterMark;
		    n = 0;
		  } else {
		    state.length -= n;
		    state.awaitDrain = 0;
		  }
		  if (state.length === 0) {
		    // If we have nothing in the buffer, then we want to know
		    // as soon as we *do* get something into the buffer.
		    if (!state.ended) state.needReadable = true;

		    // If we tried to read() past the EOF, then emit end on the next tick.
		    if (nOrig !== n && state.ended) endReadable(this);
		  }
		  if (ret !== null) this.emit('data', ret);
		  return ret;
		};
		function onEofChunk(stream, state) {
		  debug('onEofChunk');
		  if (state.ended) return;
		  if (state.decoder) {
		    var chunk = state.decoder.end();
		    if (chunk && chunk.length) {
		      state.buffer.push(chunk);
		      state.length += state.objectMode ? 1 : chunk.length;
		    }
		  }
		  state.ended = true;
		  if (state.sync) {
		    // if we are sync, wait until next tick to emit the data.
		    // Otherwise we risk emitting data in the flow()
		    // the readable code triggers during a read() call
		    emitReadable(stream);
		  } else {
		    // emit 'readable' now to make sure it gets picked up.
		    state.needReadable = false;
		    if (!state.emittedReadable) {
		      state.emittedReadable = true;
		      emitReadable_(stream);
		    }
		  }
		}

		// Don't emit readable right away in sync mode, because this can trigger
		// another read() call => stack overflow.  This way, it might trigger
		// a nextTick recursion warning, but that's not so bad.
		function emitReadable(stream) {
		  var state = stream._readableState;
		  debug('emitReadable', state.needReadable, state.emittedReadable);
		  state.needReadable = false;
		  if (!state.emittedReadable) {
		    debug('emitReadable', state.flowing);
		    state.emittedReadable = true;
		    process.nextTick(emitReadable_, stream);
		  }
		}
		function emitReadable_(stream) {
		  var state = stream._readableState;
		  debug('emitReadable_', state.destroyed, state.length, state.ended);
		  if (!state.destroyed && (state.length || state.ended)) {
		    stream.emit('readable');
		    state.emittedReadable = false;
		  }

		  // The stream needs another readable event if
		  // 1. It is not flowing, as the flow mechanism will take
		  //    care of it.
		  // 2. It is not ended.
		  // 3. It is below the highWaterMark, so we can schedule
		  //    another readable later.
		  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
		  flow(stream);
		}

		// at this point, the user has presumably seen the 'readable' event,
		// and called read() to consume some data.  that may have triggered
		// in turn another _read(n) call, in which case reading = true if
		// it's in progress.
		// However, if we're not ended, or reading, and the length < hwm,
		// then go ahead and try to read some more preemptively.
		function maybeReadMore(stream, state) {
		  if (!state.readingMore) {
		    state.readingMore = true;
		    process.nextTick(maybeReadMore_, stream, state);
		  }
		}
		function maybeReadMore_(stream, state) {
		  // Attempt to read more data if we should.
		  //
		  // The conditions for reading more data are (one of):
		  // - Not enough data buffered (state.length < state.highWaterMark). The loop
		  //   is responsible for filling the buffer with enough data if such data
		  //   is available. If highWaterMark is 0 and we are not in the flowing mode
		  //   we should _not_ attempt to buffer any extra data. We'll get more data
		  //   when the stream consumer calls read() instead.
		  // - No data in the buffer, and the stream is in flowing mode. In this mode
		  //   the loop below is responsible for ensuring read() is called. Failing to
		  //   call read here would abort the flow and there's no other mechanism for
		  //   continuing the flow if the stream consumer has just subscribed to the
		  //   'data' event.
		  //
		  // In addition to the above conditions to keep reading data, the following
		  // conditions prevent the data from being read:
		  // - The stream has ended (state.ended).
		  // - There is already a pending 'read' operation (state.reading). This is a
		  //   case where the the stream has called the implementation defined _read()
		  //   method, but they are processing the call asynchronously and have _not_
		  //   called push() with new data. In this case we skip performing more
		  //   read()s. The execution ends in this method again after the _read() ends
		  //   up calling push() with more data.
		  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
		    const len = state.length;
		    debug('maybeReadMore read 0');
		    stream.read(0);
		    if (len === state.length)
		      // didn't get any data, stop spinning.
		      break;
		  }
		  state.readingMore = false;
		}

		// abstract method.  to be overridden in specific implementation classes.
		// call cb(er, data) where data is <= n in length.
		// for virtual (non-string, non-buffer) streams, "length" is somewhat
		// arbitrary, and perhaps not very meaningful.
		Readable.prototype._read = function (n) {
		  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
		};
		Readable.prototype.pipe = function (dest, pipeOpts) {
		  var src = this;
		  var state = this._readableState;
		  switch (state.pipesCount) {
		    case 0:
		      state.pipes = dest;
		      break;
		    case 1:
		      state.pipes = [state.pipes, dest];
		      break;
		    default:
		      state.pipes.push(dest);
		      break;
		  }
		  state.pipesCount += 1;
		  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
		  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
		  var endFn = doEnd ? onend : unpipe;
		  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
		  dest.on('unpipe', onunpipe);
		  function onunpipe(readable, unpipeInfo) {
		    debug('onunpipe');
		    if (readable === src) {
		      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
		        unpipeInfo.hasUnpiped = true;
		        cleanup();
		      }
		    }
		  }
		  function onend() {
		    debug('onend');
		    dest.end();
		  }

		  // when the dest drains, it reduces the awaitDrain counter
		  // on the source.  This would be more elegant with a .once()
		  // handler in flow(), but adding and removing repeatedly is
		  // too slow.
		  var ondrain = pipeOnDrain(src);
		  dest.on('drain', ondrain);
		  var cleanedUp = false;
		  function cleanup() {
		    debug('cleanup');
		    // cleanup event handlers once the pipe is broken
		    dest.removeListener('close', onclose);
		    dest.removeListener('finish', onfinish);
		    dest.removeListener('drain', ondrain);
		    dest.removeListener('error', onerror);
		    dest.removeListener('unpipe', onunpipe);
		    src.removeListener('end', onend);
		    src.removeListener('end', unpipe);
		    src.removeListener('data', ondata);
		    cleanedUp = true;

		    // if the reader is waiting for a drain event from this
		    // specific writer, then it would cause it to never start
		    // flowing again.
		    // So, if this is awaiting a drain, then we just call it now.
		    // If we don't know, then assume that we are waiting for one.
		    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		  }
		  src.on('data', ondata);
		  function ondata(chunk) {
		    debug('ondata');
		    var ret = dest.write(chunk);
		    debug('dest.write', ret);
		    if (ret === false) {
		      // If the user unpiped during `dest.write()`, it is possible
		      // to get stuck in a permanently paused state if that write
		      // also returned false.
		      // => Check whether `dest` is still a piping destination.
		      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
		        debug('false write response, pause', state.awaitDrain);
		        state.awaitDrain++;
		      }
		      src.pause();
		    }
		  }

		  // if the dest has an error, then stop piping into it.
		  // however, don't suppress the throwing behavior for this.
		  function onerror(er) {
		    debug('onerror', er);
		    unpipe();
		    dest.removeListener('error', onerror);
		    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
		  }

		  // Make sure our error handler is attached before userland ones.
		  prependListener(dest, 'error', onerror);

		  // Both close and finish should trigger unpipe, but only once.
		  function onclose() {
		    dest.removeListener('finish', onfinish);
		    unpipe();
		  }
		  dest.once('close', onclose);
		  function onfinish() {
		    debug('onfinish');
		    dest.removeListener('close', onclose);
		    unpipe();
		  }
		  dest.once('finish', onfinish);
		  function unpipe() {
		    debug('unpipe');
		    src.unpipe(dest);
		  }

		  // tell the dest that it's being piped to
		  dest.emit('pipe', src);

		  // start the flow if it hasn't been started already.
		  if (!state.flowing) {
		    debug('pipe resume');
		    src.resume();
		  }
		  return dest;
		};
		function pipeOnDrain(src) {
		  return function pipeOnDrainFunctionResult() {
		    var state = src._readableState;
		    debug('pipeOnDrain', state.awaitDrain);
		    if (state.awaitDrain) state.awaitDrain--;
		    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
		      state.flowing = true;
		      flow(src);
		    }
		  };
		}
		Readable.prototype.unpipe = function (dest) {
		  var state = this._readableState;
		  var unpipeInfo = {
		    hasUnpiped: false
		  };

		  // if we're not piping anywhere, then do nothing.
		  if (state.pipesCount === 0) return this;

		  // just one destination.  most common case.
		  if (state.pipesCount === 1) {
		    // passed in one, but it's not the right one.
		    if (dest && dest !== state.pipes) return this;
		    if (!dest) dest = state.pipes;

		    // got a match.
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    if (dest) dest.emit('unpipe', this, unpipeInfo);
		    return this;
		  }

		  // slow case. multiple pipe destinations.

		  if (!dest) {
		    // remove all.
		    var dests = state.pipes;
		    var len = state.pipesCount;
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
		      hasUnpiped: false
		    });
		    return this;
		  }

		  // try to find the right one.
		  var index = indexOf(state.pipes, dest);
		  if (index === -1) return this;
		  state.pipes.splice(index, 1);
		  state.pipesCount -= 1;
		  if (state.pipesCount === 1) state.pipes = state.pipes[0];
		  dest.emit('unpipe', this, unpipeInfo);
		  return this;
		};

		// set up data events if they are asked for
		// Ensure readable listeners eventually get something
		Readable.prototype.on = function (ev, fn) {
		  const res = Stream.prototype.on.call(this, ev, fn);
		  const state = this._readableState;
		  if (ev === 'data') {
		    // update readableListening so that resume() may be a no-op
		    // a few lines down. This is needed to support once('readable').
		    state.readableListening = this.listenerCount('readable') > 0;

		    // Try start flowing on next tick if stream isn't explicitly paused
		    if (state.flowing !== false) this.resume();
		  } else if (ev === 'readable') {
		    if (!state.endEmitted && !state.readableListening) {
		      state.readableListening = state.needReadable = true;
		      state.flowing = false;
		      state.emittedReadable = false;
		      debug('on readable', state.length, state.reading);
		      if (state.length) {
		        emitReadable(this);
		      } else if (!state.reading) {
		        process.nextTick(nReadingNextTick, this);
		      }
		    }
		  }
		  return res;
		};
		Readable.prototype.addListener = Readable.prototype.on;
		Readable.prototype.removeListener = function (ev, fn) {
		  const res = Stream.prototype.removeListener.call(this, ev, fn);
		  if (ev === 'readable') {
		    // We need to check if there is someone still listening to
		    // readable and reset the state. However this needs to happen
		    // after readable has been emitted but before I/O (nextTick) to
		    // support once('readable', fn) cycles. This means that calling
		    // resume within the same tick will have no
		    // effect.
		    process.nextTick(updateReadableListening, this);
		  }
		  return res;
		};
		Readable.prototype.removeAllListeners = function (ev) {
		  const res = Stream.prototype.removeAllListeners.apply(this, arguments);
		  if (ev === 'readable' || ev === undefined) {
		    // We need to check if there is someone still listening to
		    // readable and reset the state. However this needs to happen
		    // after readable has been emitted but before I/O (nextTick) to
		    // support once('readable', fn) cycles. This means that calling
		    // resume within the same tick will have no
		    // effect.
		    process.nextTick(updateReadableListening, this);
		  }
		  return res;
		};
		function updateReadableListening(self) {
		  const state = self._readableState;
		  state.readableListening = self.listenerCount('readable') > 0;
		  if (state.resumeScheduled && !state.paused) {
		    // flowing needs to be set to true now, otherwise
		    // the upcoming resume will not flow.
		    state.flowing = true;

		    // crude way to check if we should resume
		  } else if (self.listenerCount('data') > 0) {
		    self.resume();
		  }
		}
		function nReadingNextTick(self) {
		  debug('readable nexttick read 0');
		  self.read(0);
		}

		// pause() and resume() are remnants of the legacy readable stream API
		// If the user uses them, then switch into old mode.
		Readable.prototype.resume = function () {
		  var state = this._readableState;
		  if (!state.flowing) {
		    debug('resume');
		    // we flow only if there is no one listening
		    // for readable, but we still have to call
		    // resume()
		    state.flowing = !state.readableListening;
		    resume(this, state);
		  }
		  state.paused = false;
		  return this;
		};
		function resume(stream, state) {
		  if (!state.resumeScheduled) {
		    state.resumeScheduled = true;
		    process.nextTick(resume_, stream, state);
		  }
		}
		function resume_(stream, state) {
		  debug('resume', state.reading);
		  if (!state.reading) {
		    stream.read(0);
		  }
		  state.resumeScheduled = false;
		  stream.emit('resume');
		  flow(stream);
		  if (state.flowing && !state.reading) stream.read(0);
		}
		Readable.prototype.pause = function () {
		  debug('call pause flowing=%j', this._readableState.flowing);
		  if (this._readableState.flowing !== false) {
		    debug('pause');
		    this._readableState.flowing = false;
		    this.emit('pause');
		  }
		  this._readableState.paused = true;
		  return this;
		};
		function flow(stream) {
		  const state = stream._readableState;
		  debug('flow', state.flowing);
		  while (state.flowing && stream.read() !== null);
		}

		// wrap an old-style stream as the async data source.
		// This is *not* part of the readable stream interface.
		// It is an ugly unfortunate mess of history.
		Readable.prototype.wrap = function (stream) {
		  var state = this._readableState;
		  var paused = false;
		  stream.on('end', () => {
		    debug('wrapped end');
		    if (state.decoder && !state.ended) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length) this.push(chunk);
		    }
		    this.push(null);
		  });
		  stream.on('data', chunk => {
		    debug('wrapped data');
		    if (state.decoder) chunk = state.decoder.write(chunk);

		    // don't skip over falsy values in objectMode
		    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
		    var ret = this.push(chunk);
		    if (!ret) {
		      paused = true;
		      stream.pause();
		    }
		  });

		  // proxy all the other methods.
		  // important when wrapping filters and duplexes.
		  for (var i in stream) {
		    if (this[i] === undefined && typeof stream[i] === 'function') {
		      this[i] = function methodWrap(method) {
		        return function methodWrapReturnFunction() {
		          return stream[method].apply(stream, arguments);
		        };
		      }(i);
		    }
		  }

		  // proxy certain important events.
		  for (var n = 0; n < kProxyEvents.length; n++) {
		    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
		  }

		  // when we try to consume some more bytes, simply unpause the
		  // underlying stream.
		  this._read = n => {
		    debug('wrapped _read', n);
		    if (paused) {
		      paused = false;
		      stream.resume();
		    }
		  };
		  return this;
		};
		if (typeof Symbol === 'function') {
		  Readable.prototype[Symbol.asyncIterator] = function () {
		    if (createReadableStreamAsyncIterator === undefined) {
		      createReadableStreamAsyncIterator = requireAsync_iterator();
		    }
		    return createReadableStreamAsyncIterator(this);
		  };
		}
		Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState.highWaterMark;
		  }
		});
		Object.defineProperty(Readable.prototype, 'readableBuffer', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState && this._readableState.buffer;
		  }
		});
		Object.defineProperty(Readable.prototype, 'readableFlowing', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get: function get() {
		    return this._readableState.flowing;
		  },
		  set: function set(state) {
		    if (this._readableState) {
		      this._readableState.flowing = state;
		    }
		  }
		});

		// exposed for testing purposes only.
		Readable._fromList = fromList;
		Object.defineProperty(Readable.prototype, 'readableLength', {
		  // making it explicit this property is not enumerable
		  // because otherwise some prototype manipulation in
		  // userland will fail
		  enumerable: false,
		  get() {
		    return this._readableState.length;
		  }
		});

		// Pluck off n bytes from an array of buffers.
		// Length is the combined lengths of all the buffers in the list.
		// This function is designed to be inlinable, so please take care when making
		// changes to the function body.
		function fromList(n, state) {
		  // nothing buffered
		  if (state.length === 0) return null;
		  var ret;
		  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		    // read it all, truncate the list
		    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
		    state.buffer.clear();
		  } else {
		    // read part of list
		    ret = state.buffer.consume(n, state.decoder);
		  }
		  return ret;
		}
		function endReadable(stream) {
		  var state = stream._readableState;
		  debug('endReadable', state.endEmitted);
		  if (!state.endEmitted) {
		    state.ended = true;
		    process.nextTick(endReadableNT, state, stream);
		  }
		}
		function endReadableNT(state, stream) {
		  debug('endReadableNT', state.endEmitted, state.length);

		  // Check that we didn't get one last unshift.
		  if (!state.endEmitted && state.length === 0) {
		    state.endEmitted = true;
		    stream.readable = false;
		    stream.emit('end');
		    if (state.autoDestroy) {
		      // In case of duplex streams we need a way to detect
		      // if the writable side is ready for autoDestroy as well
		      const wState = stream._writableState;
		      if (!wState || wState.autoDestroy && wState.finished) {
		        stream.destroy();
		      }
		    }
		  }
		}
		if (typeof Symbol === 'function') {
		  Readable.from = function (iterable, opts) {
		    if (from === undefined) {
		      from = requireFromBrowser();
		    }
		    return from(Readable, iterable, opts);
		  };
		}
		function indexOf(xs, x) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    if (xs[i] === x) return i;
		  }
		  return -1;
		}
		return _stream_readable;
	}

	var _stream_transform = Transform$2;
	const _require$codes$1 = errorsBrowser.codes,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
	  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
	const Duplex = require_stream_duplex();
	require$$0$1(Transform$2, Duplex);
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}
	function Transform$2(options) {
	  if (!(this instanceof Transform$2)) return new Transform$2(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  };

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.on('prefinish', prefinish);
	}
	function prefinish() {
	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush((er, data) => {
	      done(this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}
	Transform$2.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform$2.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};
	Transform$2.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform$2.prototype._read = function (n) {
	  var ts = this._transformState;
	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	Transform$2.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, err2 => {
	    cb(err2);
	  });
	};
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null)
	    // single equals check for both `null` and `undefined`
	    stream.push(data);

	  // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}

	var _stream_passthrough = PassThrough;
	const Transform$1 = _stream_transform;
	require$$0$1(PassThrough, Transform$1);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform$1.call(this, options);
	}
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	let eos;
	function once(callback) {
	  let called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback(...arguments);
	  };
	}
	const _require$codes = errorsBrowser.codes,
	  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  let closed = false;
	  stream.on('close', () => {
	    closed = true;
	  });
	  if (eos === undefined) eos = endOfStream;
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, err => {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  let destroyed = false;
	  return err => {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true;

	    // request.destroy just do .end - .abort is what we want
	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}
	function call(fn) {
	  fn();
	}
	function pipe(from, to) {
	  return from.pipe(to);
	}
	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}
	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }
	  const callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];
	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }
	  let error;
	  const destroys = streams.map(function (stream, i) {
	    const reading = i < streams.length - 1;
	    const writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}
	var pipeline_1 = pipeline;

	readableBrowser.exports;

	(function (module, exports) {
		exports = module.exports = require_stream_readable();
		exports.Stream = exports;
		exports.Readable = exports;
		exports.Writable = require_stream_writable();
		exports.Duplex = require_stream_duplex();
		exports.Transform = _stream_transform;
		exports.PassThrough = _stream_passthrough;
		exports.finished = endOfStream;
		exports.pipeline = pipeline_1; 
	} (readableBrowser, readableBrowser.exports));

	var readableBrowserExports = readableBrowser.exports;

	var Buffer$b = safeBufferExports.Buffer;
	var Transform = readableBrowserExports.Transform;
	var inherits$8 = require$$0$1;

	function throwIfNotStringOrBuffer (val, prefix) {
	  if (!Buffer$b.isBuffer(val) && typeof val !== 'string') {
	    throw new TypeError(prefix + ' must be a string or a buffer')
	  }
	}

	function HashBase$2 (blockSize) {
	  Transform.call(this);

	  this._block = Buffer$b.allocUnsafe(blockSize);
	  this._blockSize = blockSize;
	  this._blockOffset = 0;
	  this._length = [0, 0, 0, 0];

	  this._finalized = false;
	}

	inherits$8(HashBase$2, Transform);

	HashBase$2.prototype._transform = function (chunk, encoding, callback) {
	  var error = null;
	  try {
	    this.update(chunk, encoding);
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype._flush = function (callback) {
	  var error = null;
	  try {
	    this.push(this.digest());
	  } catch (err) {
	    error = err;
	  }

	  callback(error);
	};

	HashBase$2.prototype.update = function (data, encoding) {
	  throwIfNotStringOrBuffer(data, 'Data');
	  if (this._finalized) throw new Error('Digest already called')
	  if (!Buffer$b.isBuffer(data)) data = Buffer$b.from(data, encoding);

	  // consume data
	  var block = this._block;
	  var offset = 0;
	  while (this._blockOffset + data.length - offset >= this._blockSize) {
	    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
	    this._update();
	    this._blockOffset = 0;
	  }
	  while (offset < data.length) block[this._blockOffset++] = data[offset++];

	  // update length
	  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
	    this._length[j] += carry;
	    carry = (this._length[j] / 0x0100000000) | 0;
	    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
	  }

	  return this
	};

	HashBase$2.prototype._update = function () {
	  throw new Error('_update is not implemented')
	};

	HashBase$2.prototype.digest = function (encoding) {
	  if (this._finalized) throw new Error('Digest already called')
	  this._finalized = true;

	  var digest = this._digest();
	  if (encoding !== undefined) digest = digest.toString(encoding);

	  // reset state
	  this._block.fill(0);
	  this._blockOffset = 0;
	  for (var i = 0; i < 4; ++i) this._length[i] = 0;

	  return digest
	};

	HashBase$2.prototype._digest = function () {
	  throw new Error('_digest is not implemented')
	};

	var hashBase = HashBase$2;

	var inherits$7 = require$$0$1;
	var HashBase$1 = hashBase;
	var Buffer$a = safeBufferExports.Buffer;

	var ARRAY16$1 = new Array(16);

	function MD5$1 () {
	  HashBase$1.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	}

	inherits$7(MD5$1, HashBase$1);

	MD5$1.prototype._update = function () {
	  var M = ARRAY16$1;
	  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

	  var a = this._a;
	  var b = this._b;
	  var c = this._c;
	  var d = this._d;

	  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
	  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
	  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
	  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
	  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
	  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
	  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
	  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
	  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
	  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
	  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
	  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
	  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
	  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
	  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
	  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

	  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
	  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
	  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
	  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
	  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
	  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
	  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
	  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
	  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
	  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
	  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
	  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
	  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
	  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
	  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
	  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

	  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
	  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
	  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
	  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
	  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
	  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
	  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
	  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
	  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
	  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
	  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
	  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
	  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
	  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
	  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
	  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

	  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
	  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
	  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
	  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
	  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
	  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
	  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
	  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
	  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
	  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
	  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
	  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
	  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
	  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
	  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
	  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

	  this._a = (this._a + a) | 0;
	  this._b = (this._b + b) | 0;
	  this._c = (this._c + c) | 0;
	  this._d = (this._d + d) | 0;
	};

	MD5$1.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$a.allocUnsafe(16);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  return buffer
	};

	function rotl$1 (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fnF (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
	}

	function fnG (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
	}

	function fnH (a, b, c, d, m, k, s) {
	  return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
	}

	function fnI (a, b, c, d, m, k, s) {
	  return (rotl$1((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
	}

	var md5_js = MD5$1;

	var MD5 = md5_js;

	var md5$1 = function (buffer) {
	  return new MD5().update(buffer).digest()
	};

	var Buffer$9 = require$$0$3.Buffer;
	var inherits$6 = require$$0$1;
	var HashBase = hashBase;

	var ARRAY16 = new Array(16);

	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
	var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

	function RIPEMD160$1 () {
	  HashBase.call(this, 64);

	  // state
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;
	}

	inherits$6(RIPEMD160$1, HashBase);

	RIPEMD160$1.prototype._update = function () {
	  var words = ARRAY16;
	  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

	  var al = this._a | 0;
	  var bl = this._b | 0;
	  var cl = this._c | 0;
	  var dl = this._d | 0;
	  var el = this._e | 0;

	  var ar = this._a | 0;
	  var br = this._b | 0;
	  var cr = this._c | 0;
	  var dr = this._d | 0;
	  var er = this._e | 0;

	  // computation
	  for (var i = 0; i < 80; i += 1) {
	    var tl;
	    var tr;
	    if (i < 16) {
	      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
	      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
	    } else if (i < 32) {
	      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
	      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
	    } else if (i < 48) {
	      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
	      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
	    } else if (i < 64) {
	      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
	      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
	    } else { // if (i<80) {
	      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
	      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
	    }

	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = tl;

	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = tr;
	  }

	  // update state
	  var t = (this._b + cl + dr) | 0;
	  this._b = (this._c + dl + er) | 0;
	  this._c = (this._d + el + ar) | 0;
	  this._d = (this._e + al + br) | 0;
	  this._e = (this._a + bl + cr) | 0;
	  this._a = t;
	};

	RIPEMD160$1.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80;
	  if (this._blockOffset > 56) {
	    this._block.fill(0, this._blockOffset, 64);
	    this._update();
	    this._blockOffset = 0;
	  }

	  this._block.fill(0, this._blockOffset, 56);
	  this._block.writeUInt32LE(this._length[0], 56);
	  this._block.writeUInt32LE(this._length[1], 60);
	  this._update();

	  // produce result
	  var buffer = Buffer$9.alloc ? Buffer$9.alloc(20) : new Buffer$9(20);
	  buffer.writeInt32LE(this._a, 0);
	  buffer.writeInt32LE(this._b, 4);
	  buffer.writeInt32LE(this._c, 8);
	  buffer.writeInt32LE(this._d, 12);
	  buffer.writeInt32LE(this._e, 16);
	  return buffer
	};

	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}

	function fn1 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn2 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
	}

	function fn3 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
	}

	function fn4 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
	}

	function fn5 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
	}

	var ripemd160 = RIPEMD160$1;

	var sha_js = {exports: {}};

	var Buffer$8 = safeBufferExports.Buffer;

	// prototype class for hash functions
	function Hash$6 (blockSize, finalSize) {
	  this._block = Buffer$8.alloc(blockSize);
	  this._finalSize = finalSize;
	  this._blockSize = blockSize;
	  this._len = 0;
	}

	Hash$6.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
	    enc = enc || 'utf8';
	    data = Buffer$8.from(data, enc);
	  }

	  var block = this._block;
	  var blockSize = this._blockSize;
	  var length = data.length;
	  var accum = this._len;

	  for (var offset = 0; offset < length;) {
	    var assigned = accum % blockSize;
	    var remainder = Math.min(length - offset, blockSize - assigned);

	    for (var i = 0; i < remainder; i++) {
	      block[assigned + i] = data[offset + i];
	    }

	    accum += remainder;
	    offset += remainder;

	    if ((accum % blockSize) === 0) {
	      this._update(block);
	    }
	  }

	  this._len += length;
	  return this
	};

	Hash$6.prototype.digest = function (enc) {
	  var rem = this._len % this._blockSize;

	  this._block[rem] = 0x80;

	  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	  this._block.fill(0, rem + 1);

	  if (rem >= this._finalSize) {
	    this._update(this._block);
	    this._block.fill(0);
	  }

	  var bits = this._len * 8;

	  // uint32
	  if (bits <= 0xffffffff) {
	    this._block.writeUInt32BE(bits, this._blockSize - 4);

	  // uint64
	  } else {
	    var lowBits = (bits & 0xffffffff) >>> 0;
	    var highBits = (bits - lowBits) / 0x100000000;

	    this._block.writeUInt32BE(highBits, this._blockSize - 8);
	    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
	  }

	  this._update(this._block);
	  var hash = this._hash();

	  return enc ? hash.toString(enc) : hash
	};

	Hash$6.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	};

	var hash = Hash$6;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */

	var inherits$5 = require$$0$1;
	var Hash$5 = hash;
	var Buffer$7 = safeBufferExports.Buffer;

	var K$3 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$5 = new Array(80);

	function Sha () {
	  this.init();
	  this._w = W$5;

	  Hash$5.call(this, 64, 56);
	}

	inherits$5(Sha, Hash$5);

	Sha.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl5$1 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30$1 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft$1 (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$3[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30$1(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha.prototype._hash = function () {
	  var H = Buffer$7.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha$1 = Sha;

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits$4 = require$$0$1;
	var Hash$4 = hash;
	var Buffer$6 = safeBufferExports.Buffer;

	var K$2 = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	];

	var W$4 = new Array(80);

	function Sha1 () {
	  this.init();
	  this._w = W$4;

	  Hash$4.call(this, 64, 56);
	}

	inherits$4(Sha1, Hash$4);

	Sha1.prototype.init = function () {
	  this._a = 0x67452301;
	  this._b = 0xefcdab89;
	  this._c = 0x98badcfe;
	  this._d = 0x10325476;
	  this._e = 0xc3d2e1f0;

	  return this
	};

	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}

	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}

	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}

	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}

	Sha1.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20);
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$2[s]) | 0;

	    e = d;
	    d = c;
	    c = rotl30(b);
	    b = a;
	    a = t;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	};

	Sha1.prototype._hash = function () {
	  var H = Buffer$6.allocUnsafe(20);

	  H.writeInt32BE(this._a | 0, 0);
	  H.writeInt32BE(this._b | 0, 4);
	  H.writeInt32BE(this._c | 0, 8);
	  H.writeInt32BE(this._d | 0, 12);
	  H.writeInt32BE(this._e | 0, 16);

	  return H
	};

	var sha1 = Sha1;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$3 = require$$0$1;
	var Hash$3 = hash;
	var Buffer$5 = safeBufferExports.Buffer;

	var K$1 = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	];

	var W$3 = new Array(64);

	function Sha256$1 () {
	  this.init();

	  this._w = W$3; // new Array(64)

	  Hash$3.call(this, 64, 56);
	}

	inherits$3(Sha256$1, Hash$3);

	Sha256$1.prototype.init = function () {
	  this._a = 0x6a09e667;
	  this._b = 0xbb67ae85;
	  this._c = 0x3c6ef372;
	  this._d = 0xa54ff53a;
	  this._e = 0x510e527f;
	  this._f = 0x9b05688c;
	  this._g = 0x1f83d9ab;
	  this._h = 0x5be0cd19;

	  return this
	};

	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj$1 (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0$1 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}

	function sigma1$1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}

	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}

	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}

	Sha256$1.prototype._update = function (M) {
	  var W = this._w;

	  var a = this._a | 0;
	  var b = this._b | 0;
	  var c = this._c | 0;
	  var d = this._d | 0;
	  var e = this._e | 0;
	  var f = this._f | 0;
	  var g = this._g | 0;
	  var h = this._h | 0;

	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

	  for (var j = 0; j < 64; ++j) {
	    var T1 = (h + sigma1$1(e) + ch(e, f, g) + K$1[j] + W[j]) | 0;
	    var T2 = (sigma0$1(a) + maj$1(a, b, c)) | 0;

	    h = g;
	    g = f;
	    f = e;
	    e = (d + T1) | 0;
	    d = c;
	    c = b;
	    b = a;
	    a = (T1 + T2) | 0;
	  }

	  this._a = (a + this._a) | 0;
	  this._b = (b + this._b) | 0;
	  this._c = (c + this._c) | 0;
	  this._d = (d + this._d) | 0;
	  this._e = (e + this._e) | 0;
	  this._f = (f + this._f) | 0;
	  this._g = (g + this._g) | 0;
	  this._h = (h + this._h) | 0;
	};

	Sha256$1.prototype._hash = function () {
	  var H = Buffer$5.allocUnsafe(32);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);
	  H.writeInt32BE(this._h, 28);

	  return H
	};

	var sha256 = Sha256$1;

	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits$2 = require$$0$1;
	var Sha256 = sha256;
	var Hash$2 = hash;
	var Buffer$4 = safeBufferExports.Buffer;

	var W$2 = new Array(64);

	function Sha224 () {
	  this.init();

	  this._w = W$2; // new Array(64)

	  Hash$2.call(this, 64, 56);
	}

	inherits$2(Sha224, Sha256);

	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8;
	  this._b = 0x367cd507;
	  this._c = 0x3070dd17;
	  this._d = 0xf70e5939;
	  this._e = 0xffc00b31;
	  this._f = 0x68581511;
	  this._g = 0x64f98fa7;
	  this._h = 0xbefa4fa4;

	  return this
	};

	Sha224.prototype._hash = function () {
	  var H = Buffer$4.allocUnsafe(28);

	  H.writeInt32BE(this._a, 0);
	  H.writeInt32BE(this._b, 4);
	  H.writeInt32BE(this._c, 8);
	  H.writeInt32BE(this._d, 12);
	  H.writeInt32BE(this._e, 16);
	  H.writeInt32BE(this._f, 20);
	  H.writeInt32BE(this._g, 24);

	  return H
	};

	var sha224 = Sha224;

	var inherits$1 = require$$0$1;
	var Hash$1 = hash;
	var Buffer$3 = safeBufferExports.Buffer;

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	var W$1 = new Array(160);

	function Sha512 () {
	  this.init();
	  this._w = W$1;

	  Hash$1.call(this, 128, 112);
	}

	inherits$1(Sha512, Hash$1);

	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667;
	  this._bh = 0xbb67ae85;
	  this._ch = 0x3c6ef372;
	  this._dh = 0xa54ff53a;
	  this._eh = 0x510e527f;
	  this._fh = 0x9b05688c;
	  this._gh = 0x1f83d9ab;
	  this._hh = 0x5be0cd19;

	  this._al = 0xf3bcc908;
	  this._bl = 0x84caa73b;
	  this._cl = 0xfe94f82b;
	  this._dl = 0x5f1d36f1;
	  this._el = 0xade682d1;
	  this._fl = 0x2b3e6c1f;
	  this._gl = 0xfb41bd6b;
	  this._hl = 0x137e2179;

	  return this
	};

	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}

	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}

	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}

	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}

	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}

	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}

	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}

	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}

	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}

	Sha512.prototype._update = function (M) {
	  var W = this._w;

	  var ah = this._ah | 0;
	  var bh = this._bh | 0;
	  var ch = this._ch | 0;
	  var dh = this._dh | 0;
	  var eh = this._eh | 0;
	  var fh = this._fh | 0;
	  var gh = this._gh | 0;
	  var hh = this._hh | 0;

	  var al = this._al | 0;
	  var bl = this._bl | 0;
	  var cl = this._cl | 0;
	  var dl = this._dl | 0;
	  var el = this._el | 0;
	  var fl = this._fl | 0;
	  var gl = this._gl | 0;
	  var hl = this._hl | 0;

	  for (var i = 0; i < 32; i += 2) {
	    W[i] = M.readInt32BE(i * 4);
	    W[i + 1] = M.readInt32BE(i * 4 + 4);
	  }
	  for (; i < 160; i += 2) {
	    var xh = W[i - 15 * 2];
	    var xl = W[i - 15 * 2 + 1];
	    var gamma0 = Gamma0(xh, xl);
	    var gamma0l = Gamma0l(xl, xh);

	    xh = W[i - 2 * 2];
	    xl = W[i - 2 * 2 + 1];
	    var gamma1 = Gamma1(xh, xl);
	    var gamma1l = Gamma1l(xl, xh);

	    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	    var Wi7h = W[i - 7 * 2];
	    var Wi7l = W[i - 7 * 2 + 1];

	    var Wi16h = W[i - 16 * 2];
	    var Wi16l = W[i - 16 * 2 + 1];

	    var Wil = (gamma0l + Wi7l) | 0;
	    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
	    Wil = (Wil + gamma1l) | 0;
	    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
	    Wil = (Wil + Wi16l) | 0;
	    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

	    W[i] = Wih;
	    W[i + 1] = Wil;
	  }

	  for (var j = 0; j < 160; j += 2) {
	    Wih = W[j];
	    Wil = W[j + 1];

	    var majh = maj(ah, bh, ch);
	    var majl = maj(al, bl, cl);

	    var sigma0h = sigma0(ah, al);
	    var sigma0l = sigma0(al, ah);
	    var sigma1h = sigma1(eh, el);
	    var sigma1l = sigma1(el, eh);

	    // t1 = h + sigma1 + ch + K[j] + W[j]
	    var Kih = K[j];
	    var Kil = K[j + 1];

	    var chh = Ch(eh, fh, gh);
	    var chl = Ch(el, fl, gl);

	    var t1l = (hl + sigma1l) | 0;
	    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
	    t1l = (t1l + chl) | 0;
	    t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
	    t1l = (t1l + Kil) | 0;
	    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
	    t1l = (t1l + Wil) | 0;
	    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

	    // t2 = sigma0 + maj
	    var t2l = (sigma0l + majl) | 0;
	    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

	    hh = gh;
	    hl = gl;
	    gh = fh;
	    gl = fl;
	    fh = eh;
	    fl = el;
	    el = (dl + t1l) | 0;
	    eh = (dh + t1h + getCarry(el, dl)) | 0;
	    dh = ch;
	    dl = cl;
	    ch = bh;
	    cl = bl;
	    bh = ah;
	    bl = al;
	    al = (t1l + t2l) | 0;
	    ah = (t1h + t2h + getCarry(al, t1l)) | 0;
	  }

	  this._al = (this._al + al) | 0;
	  this._bl = (this._bl + bl) | 0;
	  this._cl = (this._cl + cl) | 0;
	  this._dl = (this._dl + dl) | 0;
	  this._el = (this._el + el) | 0;
	  this._fl = (this._fl + fl) | 0;
	  this._gl = (this._gl + gl) | 0;
	  this._hl = (this._hl + hl) | 0;

	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
	};

	Sha512.prototype._hash = function () {
	  var H = Buffer$3.allocUnsafe(64);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);
	  writeInt64BE(this._gh, this._gl, 48);
	  writeInt64BE(this._hh, this._hl, 56);

	  return H
	};

	var sha512 = Sha512;

	var inherits = require$$0$1;
	var SHA512 = sha512;
	var Hash = hash;
	var Buffer$2 = safeBufferExports.Buffer;

	var W = new Array(160);

	function Sha384 () {
	  this.init();
	  this._w = W;

	  Hash.call(this, 128, 112);
	}

	inherits(Sha384, SHA512);

	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d;
	  this._bh = 0x629a292a;
	  this._ch = 0x9159015a;
	  this._dh = 0x152fecd8;
	  this._eh = 0x67332667;
	  this._fh = 0x8eb44a87;
	  this._gh = 0xdb0c2e0d;
	  this._hh = 0x47b5481d;

	  this._al = 0xc1059ed8;
	  this._bl = 0x367cd507;
	  this._cl = 0x3070dd17;
	  this._dl = 0xf70e5939;
	  this._el = 0xffc00b31;
	  this._fl = 0x68581511;
	  this._gl = 0x64f98fa7;
	  this._hl = 0xbefa4fa4;

	  return this
	};

	Sha384.prototype._hash = function () {
	  var H = Buffer$2.allocUnsafe(48);

	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset);
	    H.writeInt32BE(l, offset + 4);
	  }

	  writeInt64BE(this._ah, this._al, 0);
	  writeInt64BE(this._bh, this._bl, 8);
	  writeInt64BE(this._ch, this._cl, 16);
	  writeInt64BE(this._dh, this._dl, 24);
	  writeInt64BE(this._eh, this._el, 32);
	  writeInt64BE(this._fh, this._fl, 40);

	  return H
	};

	var sha384 = Sha384;

	var exports$1 = sha_js.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase();

	  var Algorithm = exports$1[algorithm];
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

	  return new Algorithm()
	};

	exports$1.sha = sha$1;
	exports$1.sha1 = sha1;
	exports$1.sha224 = sha224;
	exports$1.sha256 = sha256;
	exports$1.sha384 = sha384;
	exports$1.sha512 = sha512;

	var sha_jsExports = sha_js.exports;

	var Buffer$1 = safeBufferExports.Buffer;

	var toBuffer$1 = function (thing, encoding, name) {
	  if (Buffer$1.isBuffer(thing)) {
	    return thing
	  } else if (typeof thing === 'string') {
	    return Buffer$1.from(thing, encoding)
	  } else if (ArrayBuffer.isView(thing)) {
	    return Buffer$1.from(thing.buffer)
	  } else {
	    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
	  }
	};

	var md5 = md5$1;
	var RIPEMD160 = ripemd160;
	var sha = sha_jsExports;
	var Buffer = safeBufferExports.Buffer;

	var checkParameters = precondition;
	var defaultEncoding = defaultEncoding_1;
	var toBuffer = toBuffer$1;

	var ZEROS = Buffer.alloc(128);
	var sizes = {
	  md5: 16,
	  sha1: 20,
	  sha224: 28,
	  sha256: 32,
	  sha384: 48,
	  sha512: 64,
	  rmd160: 20,
	  ripemd160: 20
	};

	function Hmac (alg, key, saltLen) {
	  var hash = getDigest(alg);
	  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

	  if (key.length > blocksize) {
	    key = hash(key);
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, ZEROS], blocksize);
	  }

	  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
	  var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36;
	    opad[i] = key[i] ^ 0x5C;
	  }

	  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
	  ipad.copy(ipad1, 0, 0, blocksize);
	  this.ipad1 = ipad1;
	  this.ipad2 = ipad;
	  this.opad = opad;
	  this.alg = alg;
	  this.blocksize = blocksize;
	  this.hash = hash;
	  this.size = sizes[alg];
	}

	Hmac.prototype.run = function (data, ipad) {
	  data.copy(ipad, this.blocksize);
	  var h = this.hash(ipad);
	  h.copy(this.opad, this.blocksize);
	  return this.hash(this.opad)
	};

	function getDigest (alg) {
	  function shaFunc (data) {
	    return sha(alg).update(data).digest()
	  }
	  function rmd160Func (data) {
	    return new RIPEMD160().update(data).digest()
	  }

	  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
	  if (alg === 'md5') return md5
	  return shaFunc
	}

	function pbkdf2 (password, salt, iterations, keylen, digest) {
	  checkParameters(iterations, keylen);
	  password = toBuffer(password, defaultEncoding, 'Password');
	  salt = toBuffer(salt, defaultEncoding, 'Salt');

	  digest = digest || 'sha1';

	  var hmac = new Hmac(digest, password, salt.length);

	  var DK = Buffer.allocUnsafe(keylen);
	  var block1 = Buffer.allocUnsafe(salt.length + 4);
	  salt.copy(block1, 0, 0, salt.length);

	  var destPos = 0;
	  var hLen = sizes[digest];
	  var l = Math.ceil(keylen / hLen);

	  for (var i = 1; i <= l; i++) {
	    block1.writeUInt32BE(i, salt.length);

	    var T = hmac.run(block1, hmac.ipad1);
	    var U = T;

	    for (var j = 1; j < iterations; j++) {
	      U = hmac.run(U, hmac.ipad2);
	      for (var k = 0; k < hLen; k++) T[k] ^= U[k];
	    }

	    T.copy(DK, destPos);
	    destPos += hLen;
	  }

	  return DK
	}

	var syncBrowser = pbkdf2;

	safeBufferExports.Buffer;
	commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;

	var pbkdf2Sync = syncBrowser;

	var scrypt$1 = {exports: {}};

	scrypt$1.exports;

	(function (module, exports) {

		(function(root) {
		    const MAX_VALUE = 0x7fffffff;

		    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
		    // See: https://github.com/dchest/scrypt-async-js
		    function SHA256(m) {
		        const K = new Uint32Array([
		           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
		           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
		           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
		           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
		           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
		           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
		           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
		           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
		           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
		           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
		           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
		           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
		           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
		       ]);

		        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
		        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
		        const w = new Uint32Array(64);

		        function blocks(p) {
		            let off = 0, len = p.length;
		            while (len >= 64) {
		                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

		                for (i = 0; i < 16; i++) {
		                    j = off + i*4;
		                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
		                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
		                }

		                for (i = 16; i < 64; i++) {
		                    u = w[i-2];
		                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

		                    u = w[i-15];
		                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

		                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
		                }

		                for (i = 0; i < 64; i++) {
		                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
		                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
		                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

		                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
		                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

		                    h = g;
		                    g = f;
		                    f = e;
		                    e = (d + t1) | 0;
		                    d = c;
		                    c = b;
		                    b = a;
		                    a = (t1 + t2) | 0;
		                }

		                h0 = (h0 + a) | 0;
		                h1 = (h1 + b) | 0;
		                h2 = (h2 + c) | 0;
		                h3 = (h3 + d) | 0;
		                h4 = (h4 + e) | 0;
		                h5 = (h5 + f) | 0;
		                h6 = (h6 + g) | 0;
		                h7 = (h7 + h) | 0;

		                off += 64;
		                len -= 64;
		            }
		        }

		        blocks(m);

		        let i, bytesLeft = m.length % 64,
		        bitLenHi = (m.length / 0x20000000) | 0,
		        bitLenLo = m.length << 3,
		        numZeros = (bytesLeft < 56) ? 56 : 120,
		        p = m.slice(m.length - bytesLeft, m.length);

		        p.push(0x80);
		        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
		        p.push((bitLenHi >>> 24) & 0xff);
		        p.push((bitLenHi >>> 16) & 0xff);
		        p.push((bitLenHi >>> 8)  & 0xff);
		        p.push((bitLenHi >>> 0)  & 0xff);
		        p.push((bitLenLo >>> 24) & 0xff);
		        p.push((bitLenLo >>> 16) & 0xff);
		        p.push((bitLenLo >>> 8)  & 0xff);
		        p.push((bitLenLo >>> 0)  & 0xff);

		        blocks(p);

		        return [
		            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
		            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
		            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
		            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
		            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
		            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
		            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
		            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
		        ];
		    }

		    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
		        // compress password if it's longer than hash block length
		        password = (password.length <= 64) ? password : SHA256(password);

		        const innerLen = 64 + salt.length + 4;
		        const inner = new Array(innerLen);
		        const outerKey = new Array(64);

		        let i;
		        let dk = [];

		        // inner = (password ^ ipad) || salt || counter
		        for (i = 0; i < 64; i++) { inner[i] = 0x36; }
		        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
		        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
		        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

		        // outerKey = password ^ opad
		        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
		        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

		        // increments counter inside inner
		        function incrementCounter() {
		            for (let i = innerLen - 1; i >= innerLen - 4; i--) {
		                inner[i]++;
		                if (inner[i] <= 0xff) return;
		                inner[i] = 0;
		            }
		        }

		        // output blocks = SHA256(outerKey || SHA256(inner)) ...
		        while (dkLen >= 32) {
		            incrementCounter();
		            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
		            dkLen -= 32;
		        }
		        if (dkLen > 0) {
		            incrementCounter();
		            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
		        }

		        return dk;
		    }

		    // The following is an adaptation of scryptsy
		    // See: https://www.npmjs.com/package/scryptsy
		    function blockmix_salsa8(BY, Yi, r, x, _X) {
		        let i;

		        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
		        for (i = 0; i < 2 * r; i++) {
		            blockxor(BY, i * 16, _X, 16);
		            salsa20_8(_X, x);
		            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
		        }

		        for (i = 0; i < r; i++) {
		            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
		        }

		        for (i = 0; i < r; i++) {
		            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
		        }
		    }

		    function R(a, b) {
		        return (a << b) | (a >>> (32 - b));
		    }

		    function salsa20_8(B, x) {
		        arraycopy(B, 0, x, 0, 16);

		        for (let i = 8; i > 0; i -= 2) {
		            x[ 4] ^= R(x[ 0] + x[12], 7);
		            x[ 8] ^= R(x[ 4] + x[ 0], 9);
		            x[12] ^= R(x[ 8] + x[ 4], 13);
		            x[ 0] ^= R(x[12] + x[ 8], 18);
		            x[ 9] ^= R(x[ 5] + x[ 1], 7);
		            x[13] ^= R(x[ 9] + x[ 5], 9);
		            x[ 1] ^= R(x[13] + x[ 9], 13);
		            x[ 5] ^= R(x[ 1] + x[13], 18);
		            x[14] ^= R(x[10] + x[ 6], 7);
		            x[ 2] ^= R(x[14] + x[10], 9);
		            x[ 6] ^= R(x[ 2] + x[14], 13);
		            x[10] ^= R(x[ 6] + x[ 2], 18);
		            x[ 3] ^= R(x[15] + x[11], 7);
		            x[ 7] ^= R(x[ 3] + x[15], 9);
		            x[11] ^= R(x[ 7] + x[ 3], 13);
		            x[15] ^= R(x[11] + x[ 7], 18);
		            x[ 1] ^= R(x[ 0] + x[ 3], 7);
		            x[ 2] ^= R(x[ 1] + x[ 0], 9);
		            x[ 3] ^= R(x[ 2] + x[ 1], 13);
		            x[ 0] ^= R(x[ 3] + x[ 2], 18);
		            x[ 6] ^= R(x[ 5] + x[ 4], 7);
		            x[ 7] ^= R(x[ 6] + x[ 5], 9);
		            x[ 4] ^= R(x[ 7] + x[ 6], 13);
		            x[ 5] ^= R(x[ 4] + x[ 7], 18);
		            x[11] ^= R(x[10] + x[ 9], 7);
		            x[ 8] ^= R(x[11] + x[10], 9);
		            x[ 9] ^= R(x[ 8] + x[11], 13);
		            x[10] ^= R(x[ 9] + x[ 8], 18);
		            x[12] ^= R(x[15] + x[14], 7);
		            x[13] ^= R(x[12] + x[15], 9);
		            x[14] ^= R(x[13] + x[12], 13);
		            x[15] ^= R(x[14] + x[13], 18);
		        }

		        for (let i = 0; i < 16; ++i) {
		            B[i] += x[i];
		        }
		    }

		    // naive approach... going back to loop unrolling may yield additional performance
		    function blockxor(S, Si, D, len) {
		        for (let i = 0; i < len; i++) {
		            D[i] ^= S[Si + i];
		        }
		    }

		    function arraycopy(src, srcPos, dest, destPos, length) {
		        while (length--) {
		            dest[destPos++] = src[srcPos++];
		        }
		    }

		    function checkBufferish(o) {
		        if (!o || typeof(o.length) !== 'number') { return false; }

		        for (let i = 0; i < o.length; i++) {
		            const v = o[i];
		            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
		                return false;
		            }
		        }

		        return true;
		    }

		    function ensureInteger(value, name) {
		        if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
		        return value;
		    }

		    // N = Cpu cost, r = Memory cost, p = parallelization cost
		    // callback(error, progress, key)
		    function _scrypt(password, salt, N, r, p, dkLen, callback) {

		        N = ensureInteger(N, 'N');
		        r = ensureInteger(r, 'r');
		        p = ensureInteger(p, 'p');

		        dkLen = ensureInteger(dkLen, 'dkLen');

		        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

		        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
		        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

		        if (!checkBufferish(password)) {
		            throw new Error('password must be an array or buffer');
		        }
		        password = Array.prototype.slice.call(password);

		        if (!checkBufferish(salt)) {
		            throw new Error('salt must be an array or buffer');
		        }
		        salt = Array.prototype.slice.call(salt);

		        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
		        const B = new Uint32Array(p * 32 * r);
		        for (let i = 0; i < B.length; i++) {
		            const j = i * 4;
		            B[i] = ((b[j + 3] & 0xff) << 24) |
		                   ((b[j + 2] & 0xff) << 16) |
		                   ((b[j + 1] & 0xff) << 8) |
		                   ((b[j + 0] & 0xff) << 0);
		        }

		        const XY = new Uint32Array(64 * r);
		        const V = new Uint32Array(32 * r * N);

		        const Yi = 32 * r;

		        // scratch space
		        const x = new Uint32Array(16);       // salsa20_8
		        const _X = new Uint32Array(16);      // blockmix_salsa8

		        const totalOps = p * N * 2;
		        let currentOp = 0;
		        let lastPercent10 = null;

		        // Set this to true to abandon the scrypt on the next step
		        let stop = false;

		        // State information
		        let state = 0;
		        let i0 = 0, i1;
		        let Bi;

		        // How many blockmix_salsa8 can we do per step?
		        const limit = callback ? parseInt(1000 / r): 0xffffffff;

		        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
		        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

		        // This is really all I changed; making scryptsy a state machine so we occasionally
		        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
		        const incrementalSMix = function() {
		            if (stop) {
		                return callback(new Error('cancelled'), currentOp / totalOps);
		            }

		            let steps;

		            switch (state) {
		                case 0:
		                    // for (var i = 0; i < p; i++)...
		                    Bi = i0 * 32 * r;

		                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

		                    state = 1;                                         // Move to ROMix 2
		                    i1 = 0;

		                    // Fall through

		                case 1:

		                    // Run up to 1000 steps of the first inner smix loop
		                    steps = N - i1;
		                    if (steps > limit) { steps = limit; }
		                    for (let i = 0; i < steps; i++) {                  // ROMix - 2
		                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
		                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
		                    }

		                    // for (var i = 0; i < N; i++)
		                    i1 += steps;
		                    currentOp += steps;

		                    if (callback) {
		                        // Call the callback with the progress (optionally stopping us)
		                        const percent10 = parseInt(1000 * currentOp / totalOps);
		                        if (percent10 !== lastPercent10) {
		                            stop = callback(null, currentOp / totalOps);
		                            if (stop) { break; }
		                            lastPercent10 = percent10;
		                        }
		                    }

		                    if (i1 < N) { break; }

		                    i1 = 0;                                          // Move to ROMix 6
		                    state = 2;

		                    // Fall through

		                case 2:

		                    // Run up to 1000 steps of the second inner smix loop
		                    steps = N - i1;
		                    if (steps > limit) { steps = limit; }
		                    for (let i = 0; i < steps; i++) {                // ROMix - 6
		                        const offset = (2 * r - 1) * 16;             // ROMix - 7
		                        const j = XY[offset] & (N - 1);
		                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
		                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
		                    }

		                    // for (var i = 0; i < N; i++)...
		                    i1 += steps;
		                    currentOp += steps;

		                    // Call the callback with the progress (optionally stopping us)
		                    if (callback) {
		                        const percent10 = parseInt(1000 * currentOp / totalOps);
		                        if (percent10 !== lastPercent10) {
		                            stop = callback(null, currentOp / totalOps);
		                            if (stop) { break; }
		                            lastPercent10 = percent10;
		                        }
		                    }

		                    if (i1 < N) { break; }

		                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

		                    // for (var i = 0; i < p; i++)...
		                    i0++;
		                    if (i0 < p) {
		                        state = 0;
		                        break;
		                    }

		                    b = [];
		                    for (let i = 0; i < B.length; i++) {
		                        b.push((B[i] >>  0) & 0xff);
		                        b.push((B[i] >>  8) & 0xff);
		                        b.push((B[i] >> 16) & 0xff);
		                        b.push((B[i] >> 24) & 0xff);
		                    }

		                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

		                    // Send the result to the callback
		                    if (callback) { callback(null, 1.0, derivedKey); }

		                    // Done; don't break (which would reschedule)
		                    return derivedKey;
		            }

		            // Schedule the next steps
		            if (callback) { nextTick(incrementalSMix); }
		        };

		        // Run the smix state machine until completion
		        if (!callback) {
		            while (true) {
		                const derivedKey = incrementalSMix();
		                if (derivedKey != undefined) { return derivedKey; }
		            }
		        }

		        // Bootstrap the async incremental smix
		        incrementalSMix();
		    }

		    const lib = {
		        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
		            return new Promise(function(resolve, reject) {
		                let lastProgress = 0;
		                if (progressCallback) { progressCallback(0); }
		                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
		                    if (error) {
		                        reject(error);
		                    } else if (key) {
		                        if (progressCallback && lastProgress !== 1) {
		                            progressCallback(1);
		                        }
		                        resolve(new Uint8Array(key));
		                    } else if (progressCallback && progress !== lastProgress) {
		                        lastProgress = progress;
		                        return progressCallback(progress);
		                    }
		                });
		            });
		        },
		        syncScrypt: function(password, salt, N, r, p, dkLen) {
		            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
		        }
		    };

		    // node.js
		    {
		       module.exports = lib;

		    // RequireJS/AMD
		    // http://www.requirejs.org/docs/api.html
		    // https://github.com/amdjs/amdjs-api/wiki/AMD
		    }

		})(); 
	} (scrypt$1, scrypt$1.exports));

	var scryptExports = scrypt$1.exports;
	var scrypt = /*@__PURE__*/getDefaultExportFromCjs(scryptExports);

	// Unique ID creation requires a high quality random # generator. In the browser we therefore
	// require the crypto API and do not support built-in fallback to lower quality random number
	// generators (like Math.random()).
	var getRandomValues;
	var rnds8 = new Uint8Array(16);
	function rng() {
	  // lazy load so that environments that need to polyfill have a chance to do so
	  if (!getRandomValues) {
	    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
	    // find the complete implementation of crypto (msCrypto) on IE11.
	    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

	    if (!getRandomValues) {
	      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
	    }
	  }

	  return getRandomValues(rnds8);
	}

	var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

	function validate(uuid) {
	  return typeof uuid === 'string' && REGEX.test(uuid);
	}

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */

	var byteToHex = [];

	for (var i = 0; i < 256; ++i) {
	  byteToHex.push((i + 0x100).toString(16).substr(1));
	}

	function stringify(arr) {
	  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  // Note: Be careful editing this code!  It's been tuned for performance
	  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
	  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
	  // of the following:
	  // - One or more input array values don't map to a hex octet (leading to
	  // "undefined" in the uuid)
	  // - Invalid input values for the RFC `version` or `variant` fields

	  if (!validate(uuid)) {
	    throw TypeError('Stringified UUID is invalid');
	  }

	  return uuid;
	}

	function v4(options, buf, offset) {
	  options = options || {};
	  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

	  if (buf) {
	    offset = offset || 0;

	    for (var i = 0; i < 16; ++i) {
	      buf[offset + i] = rnds[i];
	    }

	    return buf;
	  }

	  return stringify(rnds);
	}

	//  Copyright (C) 2018 Zilliqa
	var ALGO_IDENTIFIER = "aes-128-ctr";
	/**
	 * getDerivedKey
	 *
	 * NOTE: only scrypt and pbkdf2 are supported.
	 *
	 * @param {Buffer} key - the passphrase
	 * @param {KDF} kdf - the key derivation function to be used
	 * @param {KDFParams} params - params for the kdf
	 *
	 * @returns {Promise<Buffer>}
	 */
	function getDerivedKey(key, kdf, params) {
	    return __awaiter(this, void 0, void 0, function () {
	        var salt, _a, c, dklen, _b, n, r, p, dklen, derivedKeyInt8Array;
	        return __generator(this, function (_c) {
	            salt = Buffer$c.from(params.salt, "hex");
	            if (kdf === "pbkdf2") {
	                _a = params, c = _a.c, dklen = _a.dklen;
	                return [2 /*return*/, pbkdf2Sync(key, salt, c, dklen, "sha256")];
	            }
	            if (kdf === "scrypt") {
	                _b = params, n = _b.n, r = _b.r, p = _b.p, dklen = _b.dklen;
	                derivedKeyInt8Array = scrypt.syncScrypt(key, salt, n, r, p, dklen);
	                return [2 /*return*/, Buffer$c.from(derivedKeyInt8Array)];
	            }
	            throw new Error("Only pbkdf2 and scrypt are supported");
	        });
	    });
	}
	/**
	 * encryptPrivateKey
	 *
	 * Encodes and encrypts an account in the format specified by
	 * https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition.
	 * However, note that, in keeping with the hash function used by Zilliqa's
	 * core protocol, the MAC is generated using sha256 instead of keccak.
	 *
	 * NOTE: only scrypt and pbkdf2 are supported.
	 *
	 * @param {KDF} kdf - the key derivation function to be used
	 * @param {string} privateKey - hex-encoded private key
	 * @param {string} passphrase - a passphrase used for encryption
	 *
	 * @returns {Promise<string>}
	 */
	var encryptPrivateKey = function (kdf, privateKey, passphrase) { return __awaiter(void 0, void 0, void 0, function () {
	    var address, salt, iv, kdfparams, derivedKey, cipher, ciphertext;
	    return __generator(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                address = getAddressFromPrivateKey(privateKey);
	                salt = randomBytes(32);
	                iv = Buffer$c.from(randomBytes(16), "hex");
	                kdfparams = {
	                    salt: salt,
	                    n: 8192,
	                    c: 262144,
	                    r: 8,
	                    p: 1,
	                    dklen: 32,
	                };
	                return [4 /*yield*/, getDerivedKey(Buffer$c.from(passphrase), kdf, kdfparams)];
	            case 1:
	                derivedKey = _a.sent();
	                cipher = new aes.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aes.Counter(iv));
	                ciphertext = Buffer$c.from(cipher.encrypt(Buffer$c.from(privateKey, "hex")));
	                return [2 /*return*/, JSON.stringify({
	                        address: address,
	                        crypto: {
	                            cipher: ALGO_IDENTIFIER,
	                            cipherparams: {
	                                iv: iv.toString("hex"),
	                            },
	                            ciphertext: ciphertext.toString("hex"),
	                            kdf: kdf,
	                            kdfparams: kdfparams,
	                            mac: hashjs
	                                // @ts-ignore
	                                .hmac(hashjs.sha256, derivedKey, "hex")
	                                .update(Buffer$c.concat([
	                                derivedKey.slice(16, 32),
	                                ciphertext,
	                                iv,
	                                Buffer$c.from(ALGO_IDENTIFIER),
	                            ]), "hex")
	                                .digest("hex"),
	                        },
	                        id: v4({ random: bundleExports.bytes.hexToIntArray(randomBytes(16)) }),
	                        version: 3,
	                    })];
	        }
	    });
	}); };
	/**
	 * decryptPrivateKey
	 *
	 * Recovers the private key from a keystore file using the given passphrase.
	 *
	 * @param {string} passphrase
	 * @param {KeystoreV3} keystore
	 * @returns {Promise<string>}
	 */
	var decryptPrivateKey = function (passphrase, keystore) { return __awaiter(void 0, void 0, void 0, function () {
	    var ciphertext, iv, kdfparams, derivedKey, mac, cipher;
	    return __generator(this, function (_a) {
	        switch (_a.label) {
	            case 0:
	                ciphertext = Buffer$c.from(keystore.crypto.ciphertext, "hex");
	                iv = Buffer$c.from(keystore.crypto.cipherparams.iv, "hex");
	                kdfparams = keystore.crypto.kdfparams;
	                return [4 /*yield*/, getDerivedKey(Buffer$c.from(passphrase), keystore.crypto.kdf, kdfparams)];
	            case 1:
	                derivedKey = _a.sent();
	                mac = hashjs
	                    // @ts-ignore
	                    .hmac(hashjs.sha256, derivedKey, "hex")
	                    .update(Buffer$c.concat([
	                    derivedKey.slice(16, 32),
	                    ciphertext,
	                    iv,
	                    Buffer$c.from(ALGO_IDENTIFIER),
	                ]), "hex")
	                    .digest("hex");
	                // we need to do a byte-by-byte comparison to avoid non-constant time side
	                // channel attacks.
	                if (!bundleExports.bytes.isEqual(mac.toUpperCase(), keystore.crypto.mac.toUpperCase())) {
	                    return [2 /*return*/, Promise.reject("Failed to decrypt.")];
	                }
	                cipher = new aes.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aes.Counter(iv));
	                return [2 /*return*/, Buffer$c.from(cipher.decrypt(ciphertext)).toString("hex")];
	        }
	    });
	}); };

	//  Copyright (C) 2018 Zilliqa
	/**
	 * sign
	 *
	 * @param {string} hash - hex-encoded hash of the data to be signed
	 *
	 * @returns {string} the signature
	 */
	var sign = function (msg, privateKey, pubKey) {
	    var sig = sign$1(msg, Buffer$c.from(privateKey, "hex"), Buffer$c.from(pubKey, "hex"));
	    var r = sig.r.toString("hex");
	    var s = sig.s.toString("hex");
	    while (r.length < 64) {
	        r = "0" + r;
	    }
	    while (s.length < 64) {
	        s = "0" + s;
	    }
	    return r + s;
	};

	exports.HRP = HRP;
	exports.Signature = Signature;
	exports.compressPublicKey = compressPublicKey;
	exports.convertBits = convertBits;
	exports.decode = decode;
	exports.decodeBase58 = decodeBase58;
	exports.decryptPrivateKey = decryptPrivateKey;
	exports.encode = encode;
	exports.encodeBase58 = encodeBase58;
	exports.encryptPrivateKey = encryptPrivateKey;
	exports.fromBech32Address = fromBech32Address;
	exports.getAccountFrom0xPrivateKey = getAccountFrom0xPrivateKey;
	exports.getAddressFromPrivateKey = getAddressFromPrivateKey;
	exports.getAddressFromPublicKey = getAddressFromPublicKey;
	exports.getPubKeyFromPrivateKey = getPubKeyFromPrivateKey;
	exports.isValidChecksumAddress = isValidChecksumAddress;
	exports.normaliseAddress = normaliseAddress;
	exports.normalizePrivateKey = normalizePrivateKey;
	exports.randomBytes = randomBytes;
	exports.schnorr = schnorr;
	exports.sign = sign;
	exports.toBech32Address = toBech32Address;
	exports.toChecksumAddress = toChecksumAddress;
	exports.verifyPrivateKey = verifyPrivateKey;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=bundle.js.map
