"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProvider = exports.createProperty = exports.createIContractsContext = exports.createGettingProviders = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _case = require("case");

var _constants = require("../utils/constants");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var createProvider = function createProvider(name, providerInfos) {
  var classDeclaration = t.classDeclaration(t.identifier(name), t.identifier("ContractBase"), t.classBody([t.classMethod("constructor", t.identifier("constructor"), [(0, _utils.tsObjectPattern)([t.objectProperty(t.identifier("address"), t.identifier("address"), false, true), t.objectProperty(t.identifier("cosmWasmClient"), t.identifier("cosmWasmClient"), false, true), t.objectProperty(t.identifier("signingCosmWasmClient"), t.identifier("signingCosmWasmClient"), false, true)], t.tsTypeAnnotation(t.tsTypeReference(t.identifier("IContractConstructor"))))], t.blockStatement([t.expressionStatement(t.callExpression(t["super"](), [t.identifier("address"), t.identifier("cosmWasmClient"), t.identifier("signingCosmWasmClient"), t.identifier(providerInfos[_constants.PROVIDER_TYPES.SIGNING_CLIENT_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.SIGNING_CLIENT_TYPE].classname : "undefined"), t.identifier(providerInfos[_constants.PROVIDER_TYPES.QUERY_CLIENT_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.QUERY_CLIENT_TYPE].classname : "undefined"), t.identifier(providerInfos[_constants.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE].classname : "undefined")]))]))]));
  classDeclaration.superTypeParameters = t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(providerInfos[_constants.PROVIDER_TYPES.SIGNING_CLIENT_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.SIGNING_CLIENT_TYPE].classname : "IEmptyClient")), t.tsTypeReference(t.identifier(providerInfos[_constants.PROVIDER_TYPES.QUERY_CLIENT_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.QUERY_CLIENT_TYPE].classname : "IEmptyClient")), t.tsTypeReference(t.identifier(providerInfos[_constants.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE] ? providerInfos[_constants.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE].classname : "IEmptyClient"))]);
  return t.exportNamedDeclaration(classDeclaration);
};

exports.createProvider = createProvider;

var createIContractsContext = function createIContractsContext(providerInfos) {
  var properties = [];

  for (var _key in providerInfos) {
    if (Object.prototype.hasOwnProperty.call(providerInfos, _key)) {
      var contractProviderInfo = providerInfos[_key];
      properties.push(createProperty(_key, contractProviderInfo));
    }
  }

  return t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier("IContractsContext"), null, null, t.tsInterfaceBody(properties)));
};

exports.createIContractsContext = createIContractsContext;
var PROVIDER_MAPPING = {};
PROVIDER_MAPPING[_constants.PROVIDER_TYPES.SIGNING_CLIENT_TYPE] = "ISigningClientProvider";
PROVIDER_MAPPING[_constants.PROVIDER_TYPES.QUERY_CLIENT_TYPE] = "IQueryClientProvider";
PROVIDER_MAPPING[_constants.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE] = "IMessageComposerProvider";

var createProperty = function createProperty(name, providerInfos) {
  var typeAnnotation = null;
  var keys = Object.keys(providerInfos);

  if ((keys === null || keys === void 0 ? void 0 : keys.length) == 1) {
    var _key2 = keys[0];
    typeAnnotation = t.tsTypeAnnotation(t.tsTypeReference(t.identifier(PROVIDER_MAPPING[_key2]), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(providerInfos[_key2].classname))])));
  } else {
    var typeRefs = [];

    var _iterator = _createForOfIteratorHelper(keys),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _key3 = _step.value;
        typeRefs.push(t.tsTypeReference(t.identifier(PROVIDER_MAPPING[_key3]), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(providerInfos[_key3].classname))])));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    typeAnnotation = t.tsTypeAnnotation(t.tsIntersectionType(typeRefs));
  }

  return t.tsPropertySignature(t.identifier((0, _case.camel)(name)), typeAnnotation);
};

exports.createProperty = createProperty;

var createGettingProviders = function createGettingProviders(providerInfos) {
  var properties = [];

  for (var _i = 0, _Object$keys = Object.keys(providerInfos); _i < _Object$keys.length; _i++) {
    var _key4 = _Object$keys[_i];
    properties.push(t.objectProperty(t.identifier((0, _case.camel)(_key4)), t.newExpression(t.identifier((0, _case.pascal)(_key4)), [t.objectExpression([t.objectProperty(t.identifier("address"), t.identifier("address"), false, true), t.objectProperty(t.identifier("cosmWasmClient"), t.identifier("cosmWasmClient"), false, true), t.objectProperty(t.identifier("signingCosmWasmClient"), t.identifier("signingCosmWasmClient"), false, true)])])));
  }

  return t.exportNamedDeclaration(t.variableDeclaration("const", [t.variableDeclarator(t.identifier("getProviders"), t.arrowFunctionExpression([(0, _utils.identifier)("address?", t.tsTypeAnnotation(t.tsTypeReference(t.identifier("string")))), (0, _utils.identifier)("cosmWasmClient?", t.tsTypeAnnotation(t.tsTypeReference(t.identifier("CosmWasmClient")))), (0, _utils.identifier)("signingCosmWasmClient?", t.tsTypeAnnotation(t.tsTypeReference(t.identifier("SigningCosmWasmClient"))))], t.objectExpression(properties)))]));
};

exports.createGettingProviders = createGettingProviders;