"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typedIdentifier = exports.typeRefOrUnionWithUndefined = exports.tsTypeOperator = exports.tsPropertySignature = exports.tsObjectPattern = exports.shorthandProperty = exports.recursiveNamespace = exports.propertySignature = exports.promiseTypeAnnotation = exports.pickTypeReference = exports.parameterizedTypeReference = exports.optionalConditionalExpression = exports.omitTypeReference = exports.memberExpressionOrIdentifierSnake = exports.memberExpressionOrIdentifier = exports.importStmt = exports.importAs = exports.importAminoMsg = exports.identifier = exports.getMessageProperties = exports.getFieldDimensionality = exports.classProperty = exports.classDeclaration = exports.callExpression = exports.bindMethod = exports.arrowFunctionExpression = exports.arrayTypeNDimensions = exports.abstractClassDeclaration = exports.FieldTypeAsts = void 0;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var t = _interopRequireWildcard(require("@babel/types"));

var _case = require("case");

var _ref = require("./ref");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// t.TSPropertySignature - kind?
var propertySignature = function propertySignature(name, typeAnnotation) {
  var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    type: 'TSPropertySignature',
    key: t.identifier(name),
    kind: 'get',
    typeAnnotation: typeAnnotation,
    optional: optional
  };
};

exports.propertySignature = propertySignature;

var identifier = function identifier(name, typeAnnotation) {
  var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var type = t.identifier(name);
  type.typeAnnotation = typeAnnotation;
  type.optional = optional;
  return type;
};

exports.identifier = identifier;

var tsTypeOperator = function tsTypeOperator(typeAnnotation, operator) {
  var obj = t.tsTypeOperator(typeAnnotation);
  obj.operator = operator;
  return obj;
};

exports.tsTypeOperator = tsTypeOperator;

var getMessageProperties = function getMessageProperties(msg) {
  var results = [];
  var objs = [];

  if (msg.anyOf) {
    objs = msg.anyOf;
  } else if (msg.oneOf) {
    objs = msg.oneOf;
  } else if (msg.allOf) {
    objs = msg.allOf;
  }

  var _iterator = _createForOfIteratorHelper(objs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var obj = _step.value;

      if (obj.properties) {
        results.push(obj);
      } else {
        if (obj.$ref) {
          var ref = (0, _ref.refLookup)(obj.$ref, msg);
          var refProps = getMessageProperties(ref);
          results = [].concat((0, _toConsumableArray2["default"])(results), (0, _toConsumableArray2["default"])(refProps));
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return results;
};

exports.getMessageProperties = getMessageProperties;

var tsPropertySignature = function tsPropertySignature(key, typeAnnotation, optional) {
  var obj = t.tsPropertySignature(key, typeAnnotation);
  obj.optional = optional;
  return obj;
};

exports.tsPropertySignature = tsPropertySignature;

var tsObjectPattern = function tsObjectPattern(properties, typeAnnotation) {
  var obj = t.objectPattern(properties);
  obj.typeAnnotation = typeAnnotation;
  return obj;
};

exports.tsObjectPattern = tsObjectPattern;

var callExpression = function callExpression(callee, _arguments, typeParameters) {
  var callExpr = t.callExpression(callee, _arguments);
  callExpr.typeParameters = typeParameters;
  return callExpr;
};

exports.callExpression = callExpression;

var bindMethod = function bindMethod(name) {
  return t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier(name)), t.callExpression(t.memberExpression(t.memberExpression(t.thisExpression(), t.identifier(name)), t.identifier('bind')), [t.thisExpression()])));
};

exports.bindMethod = bindMethod;

var typedIdentifier = function typedIdentifier(name, typeAnnotation) {
  var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var type = t.identifier(name);
  type.typeAnnotation = typeAnnotation;
  type.optional = optional;
  return type;
};

exports.typedIdentifier = typedIdentifier;

var promiseTypeAnnotation = function promiseTypeAnnotation(name) {
  return t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Promise'), t.tsTypeParameterInstantiation([t.tsTypeReference(t.identifier(name))])));
};

exports.promiseTypeAnnotation = promiseTypeAnnotation;

var abstractClassDeclaration = function abstractClassDeclaration(name, body) {
  var implementsExressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var superClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var declaration = classDeclaration(name, body, implementsExressions, superClass);
  declaration["abstract"] = true;
  return declaration;
};

exports.abstractClassDeclaration = abstractClassDeclaration;

var classDeclaration = function classDeclaration(name, body) {
  var implementsExressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var superClass = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var declaration = t.classDeclaration(t.identifier(name), superClass, t.classBody(body));

  if (implementsExressions.length) {
    declaration["implements"] = implementsExressions;
  }

  return declaration;
};

exports.classDeclaration = classDeclaration;

var classProperty = function classProperty(name) {
  var typeAnnotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var isReadonly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isStatic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var noImplicitOverride = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var prop = t.classProperty(t.identifier(name));
  if (isReadonly) prop.readonly = true;
  if (isStatic) prop["static"] = true;
  if (typeAnnotation) prop.typeAnnotation = typeAnnotation;
  if (noImplicitOverride) prop.override = true;
  return prop;
};

exports.classProperty = classProperty;

var arrowFunctionExpression = function arrowFunctionExpression(params, body, returnType) {
  var isAsync = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var func = t.arrowFunctionExpression(params, body, isAsync);
  if (returnType) func.returnType = returnType;
  return func;
};

exports.arrowFunctionExpression = arrowFunctionExpression;

var recursiveNamespace = function recursiveNamespace(names, moduleBlockBody) {
  if (!names || !names.length) return moduleBlockBody;
  var name = names.pop();
  var body = [t.exportNamedDeclaration(t.tsModuleDeclaration(t.identifier(name), t.tsModuleBlock(recursiveNamespace(names, moduleBlockBody))))];
  return body;
};

exports.recursiveNamespace = recursiveNamespace;

var arrayTypeNDimensions = function arrayTypeNDimensions(body, n) {
  if (!n) return t.tsArrayType(body);
  return t.tsArrayType(arrayTypeNDimensions(body, n - 1));
};

exports.arrayTypeNDimensions = arrayTypeNDimensions;
var FieldTypeAsts = {
  string: function string() {
    return t.tsStringKeyword();
  },
  array: function array(type) {
    return t.tsArrayType(FieldTypeAsts[type]());
  },
  Duration: function Duration() {
    return t.tsTypeReference(t.identifier('Duration'));
  },
  Height: function Height() {
    return t.tsTypeReference(t.identifier('Height'));
  },
  Coin: function Coin() {
    return t.tsTypeReference(t.identifier('Coin'));
  },
  Long: function Long() {
    return t.tsTypeReference(t.identifier('Long'));
  }
};
exports.FieldTypeAsts = FieldTypeAsts;

var shorthandProperty = function shorthandProperty(prop) {
  return t.objectProperty(t.identifier(prop), t.identifier(prop), false, true);
};

exports.shorthandProperty = shorthandProperty;

var importStmt = function importStmt(names, path) {
  return t.importDeclaration(names.map(function (name) {
    return t.importSpecifier(t.identifier(name), t.identifier(name));
  }), t.stringLiteral(path));
};

exports.importStmt = importStmt;

var importAs = function importAs(name, _importAs, importPath) {
  return t.importDeclaration([t.importSpecifier(t.identifier(_importAs), t.identifier(name))], t.stringLiteral(importPath));
};

exports.importAs = importAs;

var importAminoMsg = function importAminoMsg() {
  return importStmt(['AminoMsg'], '@cosmjs/amino');
};

exports.importAminoMsg = importAminoMsg;

var getFieldDimensionality = function getFieldDimensionality(field) {
  var typeName = field.type;
  var isArray = typeName.endsWith('[]');
  var dimensions = 0;

  if (isArray) {
    dimensions = typeName.match(/\[\]/g).length - 1;
    typeName = typeName.replace(/\[\]/g, '');
  }

  return {
    typeName: typeName,
    dimensions: dimensions,
    isArray: isArray
  };
};

exports.getFieldDimensionality = getFieldDimensionality;

var memberExpressionOrIdentifier = function memberExpressionOrIdentifier(names) {
  if (names.length === 1) {
    return t.identifier(names[0]);
  }

  if (names.length === 2) {
    var _names = (0, _slicedToArray2["default"])(names, 2),
        b = _names[0],
        a = _names[1];

    return t.memberExpression(t.identifier(a), t.identifier(b));
  }

  var _names2 = (0, _toArray2["default"])(names),
      name = _names2[0],
      rest = _names2.slice(1);

  return t.memberExpression(memberExpressionOrIdentifier(rest), t.identifier(name));
};

exports.memberExpressionOrIdentifier = memberExpressionOrIdentifier;

var memberExpressionOrIdentifierSnake = function memberExpressionOrIdentifierSnake(names) {
  if (names.length === 1) {
    return t.identifier((0, _case.snake)(names[0]));
  }

  if (names.length === 2) {
    var _names3 = (0, _slicedToArray2["default"])(names, 2),
        b = _names3[0],
        a = _names3[1];

    return t.memberExpression(t.identifier((0, _case.snake)(a)), t.identifier((0, _case.snake)(b)));
  }

  var _names4 = (0, _toArray2["default"])(names),
      name = _names4[0],
      rest = _names4.slice(1);

  return t.memberExpression(memberExpressionOrIdentifierSnake(rest), t.identifier((0, _case.snake)(name)));
};
/**
 * If optional, return a conditional, otherwise just the expression
 */


exports.memberExpressionOrIdentifierSnake = memberExpressionOrIdentifierSnake;

var optionalConditionalExpression = function optionalConditionalExpression(test, expression, alternate) {
  var optional = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return optional ? t.conditionalExpression(test, expression, alternate) : expression;
};

exports.optionalConditionalExpression = optionalConditionalExpression;

var typeRefOrUnionWithUndefined = function typeRefOrUnionWithUndefined(identifier) {
  var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var typeReference = t.tsTypeReference(identifier);
  return optional ? t.tsUnionType([typeReference, t.tsUndefinedKeyword()]) : typeReference;
};

exports.typeRefOrUnionWithUndefined = typeRefOrUnionWithUndefined;

var parameterizedTypeReference = function parameterizedTypeReference(identifier, from, omit) {
  return t.tsTypeReference(t.identifier(identifier), t.tsTypeParameterInstantiation([from, typeof omit === 'string' ? t.tsLiteralType(t.stringLiteral(omit)) : t.tsUnionType(omit.map(function (o) {
    return t.tsLiteralType(t.stringLiteral(o));
  }))]));
};
/**
 * omitTypeReference(t.tsTypeReference(t.identifier('Cw4UpdateMembersMutation'),),'args').....
 * Omit<Cw4UpdateMembersMutation, 'args'>
 */


exports.parameterizedTypeReference = parameterizedTypeReference;

var omitTypeReference = function omitTypeReference(from, omit) {
  return parameterizedTypeReference('Omit', from, omit);
};

exports.omitTypeReference = omitTypeReference;

var pickTypeReference = function pickTypeReference(from, pick) {
  return parameterizedTypeReference('Pick', from, pick);
};

exports.pickTypeReference = pickTypeReference;