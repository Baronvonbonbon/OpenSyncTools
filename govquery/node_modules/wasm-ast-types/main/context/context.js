"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefinitionSchema = exports.defaultOptions = exports.RenderContextBase = exports.RenderContext = exports.BuilderContext = void 0;

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("../utils");

var _imports = require("./imports");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _path = require("path");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

;
var defaultOptions = {
  enabled: true,
  types: {
    enabled: true,
    aliasExecuteMsg: false
  },
  client: {
    enabled: true,
    execExtendsQuery: true,
    noImplicitOverride: false
  },
  recoil: {
    enabled: false
  },
  messageComposer: {
    enabled: false
  },
  msgBuilder: {
    enabled: false
  },
  reactQuery: {
    enabled: false,
    optionalClient: false,
    version: 'v3',
    mutations: false,
    camelize: true,
    queryKeys: false
  }
};
exports.defaultOptions = defaultOptions;

var getDefinitionSchema = function getDefinitionSchema(schemas) {
  var aggregateSchema = {
    definitions: {//
    }
  };
  schemas.forEach(function (schema) {
    schema.definitions = schema.definitions || {};
    aggregateSchema.definitions = _objectSpread(_objectSpread({}, aggregateSchema.definitions), schema.definitions);
  });
  return aggregateSchema;
};

exports.getDefinitionSchema = getDefinitionSchema;

var BuilderContext = /*#__PURE__*/function () {
  function BuilderContext() {
    (0, _classCallCheck2["default"])(this, BuilderContext);
    (0, _defineProperty2["default"])(this, "providers", {});
  }

  (0, _createClass2["default"])(BuilderContext, [{
    key: "addProviderInfo",
    value: function addProviderInfo(contractName, type, classname, filename) {
      if (!this.providers[contractName]) {
        this.providers[contractName] = {};
      }

      this.providers[contractName][type] = {
        classname: classname,
        filename: filename,
        basename: (0, _path.basename)(filename, (0, _path.extname)(filename))
      };
    }
  }, {
    key: "getProviderInfos",
    value: function getProviderInfos() {
      return this.providers;
    }
  }]);
  return BuilderContext;
}();
/**
 * context object for generating code.
 * only mergeDefaultOpt needs to implementing for combine options and default options.
 * @param TOpt option type
 */


exports.BuilderContext = BuilderContext;

var RenderContextBase = /*#__PURE__*/function () {
  function RenderContextBase(contract, options, builderContext) {
    (0, _classCallCheck2["default"])(this, RenderContextBase);
    (0, _defineProperty2["default"])(this, "builderContext", void 0);
    (0, _defineProperty2["default"])(this, "contract", void 0);
    (0, _defineProperty2["default"])(this, "utils", []);
    (0, _defineProperty2["default"])(this, "schema", void 0);
    (0, _defineProperty2["default"])(this, "options", void 0);
    this.contract = contract;
    this.schema = getDefinitionSchema(contract.schemas);
    this.options = this.mergeDefaultOpt(options);
    this.builderContext = builderContext;
  }
  /**
   * merge options and default options
   * @param options
   */


  (0, _createClass2["default"])(RenderContextBase, [{
    key: "refLookup",
    value: function refLookup($ref) {
      return (0, _utils.refLookup)($ref, this.schema);
    }
  }, {
    key: "addUtil",
    value: function addUtil(util) {
      this.utils[util] = true;
    }
  }, {
    key: "addProviderInfo",
    value: function addProviderInfo(contractName, type, classname, filename) {
      this.builderContext.addProviderInfo(contractName, type, classname, filename);
    }
  }, {
    key: "getProviderInfos",
    value: function getProviderInfos() {
      return this.builderContext.providers;
    }
  }, {
    key: "getImports",
    value: function getImports(registeredUtils, filepath) {
      return (0, _imports.getImportStatements)((0, _imports.convertUtilsToImportList)(this, Object.keys(this.utils), registeredUtils), filepath);
    }
  }]);
  return RenderContextBase;
}();

exports.RenderContextBase = RenderContextBase;

var RenderContext = /*#__PURE__*/function (_RenderContextBase) {
  (0, _inherits2["default"])(RenderContext, _RenderContextBase);

  var _super = _createSuper(RenderContext);

  function RenderContext() {
    (0, _classCallCheck2["default"])(this, RenderContext);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(RenderContext, [{
    key: "mergeDefaultOpt",
    value: function mergeDefaultOpt(options) {
      return (0, _deepmerge["default"])(defaultOptions, options !== null && options !== void 0 ? options : {});
    }
  }]);
  return RenderContext;
}(RenderContextBase);

exports.RenderContext = RenderContext;