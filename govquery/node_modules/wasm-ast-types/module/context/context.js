import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { refLookup } from "../utils";
import { convertUtilsToImportList, getImportStatements } from "./imports";
import deepmerge from "deepmerge";
import { basename, extname } from 'path'; /// Plugin Types

;
export const defaultOptions = {
  enabled: true,
  types: {
    enabled: true,
    aliasExecuteMsg: false
  },
  client: {
    enabled: true,
    execExtendsQuery: true,
    noImplicitOverride: false
  },
  recoil: {
    enabled: false
  },
  messageComposer: {
    enabled: false
  },
  msgBuilder: {
    enabled: false
  },
  reactQuery: {
    enabled: false,
    optionalClient: false,
    version: 'v3',
    mutations: false,
    camelize: true,
    queryKeys: false
  }
};
export const getDefinitionSchema = schemas => {
  const aggregateSchema = {
    definitions: {//
    }
  };
  schemas.forEach(schema => {
    schema.definitions = schema.definitions || {};
    aggregateSchema.definitions = _objectSpread(_objectSpread({}, aggregateSchema.definitions), schema.definitions);
  });
  return aggregateSchema;
};
export class BuilderContext {
  constructor() {
    _defineProperty(this, "providers", {});
  }

  addProviderInfo(contractName, type, classname, filename) {
    if (!this.providers[contractName]) {
      this.providers[contractName] = {};
    }

    this.providers[contractName][type] = {
      classname,
      filename,
      basename: basename(filename, extname(filename))
    };
  }

  getProviderInfos() {
    return this.providers;
  }

}
/**
 * context object for generating code.
 * only mergeDefaultOpt needs to implementing for combine options and default options.
 * @param TOpt option type
 */

export class RenderContextBase {
  constructor(contract, options, builderContext) {
    _defineProperty(this, "builderContext", void 0);

    _defineProperty(this, "contract", void 0);

    _defineProperty(this, "utils", []);

    _defineProperty(this, "schema", void 0);

    _defineProperty(this, "options", void 0);

    this.contract = contract;
    this.schema = getDefinitionSchema(contract.schemas);
    this.options = this.mergeDefaultOpt(options);
    this.builderContext = builderContext;
  }
  /**
   * merge options and default options
   * @param options
   */


  refLookup($ref) {
    return refLookup($ref, this.schema);
  }

  addUtil(util) {
    this.utils[util] = true;
  }

  addProviderInfo(contractName, type, classname, filename) {
    this.builderContext.addProviderInfo(contractName, type, classname, filename);
  }

  getProviderInfos() {
    return this.builderContext.providers;
  }

  getImports(registeredUtils, filepath) {
    return getImportStatements(convertUtilsToImportList(this, Object.keys(this.utils), registeredUtils), filepath);
  }

}
export class RenderContext extends RenderContextBase {
  mergeDefaultOpt(options) {
    return deepmerge(defaultOptions, options ?? {});
  }

}